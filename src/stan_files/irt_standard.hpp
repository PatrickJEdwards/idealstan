/*
    idealstanv2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    idealstanv2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with idealstanv2.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_irt_standard_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_irt_standard");
    reader.add_event(1, 1, "include", "/chunks/license.stan");
    reader.add_event(1, 0, "start", "/chunks/license.stan");
    reader.add_event(15, 14, "end", "/chunks/license.stan");
    reader.add_event(15, 2, "restart", "model_irt_standard");
    reader.add_event(17, 4, "include", "/chunks/stationary_functions.stan");
    reader.add_event(17, 0, "start", "/chunks/stationary_functions.stan");
    reader.add_event(141, 124, "end", "/chunks/stationary_functions.stan");
    reader.add_event(141, 5, "restart", "model_irt_standard");
    reader.add_event(141, 5, "include", "/chunks/jacobians.stan");
    reader.add_event(141, 0, "start", "/chunks/jacobians.stan");
    reader.add_event(181, 40, "end", "/chunks/jacobians.stan");
    reader.add_event(181, 6, "restart", "model_irt_standard");
    reader.add_event(245, 70, "include", "/chunks/change_outcome.stan");
    reader.add_event(245, 0, "start", "/chunks/change_outcome.stan");
    reader.add_event(303, 58, "end", "/chunks/change_outcome.stan");
    reader.add_event(303, 71, "restart", "model_irt_standard");
    reader.add_event(305, 73, "include", "/chunks/create_constrained.stan");
    reader.add_event(305, 0, "start", "/chunks/create_constrained.stan");
    reader.add_event(328, 23, "end", "/chunks/create_constrained.stan");
    reader.add_event(328, 74, "restart", "model_irt_standard");
    reader.add_event(384, 130, "include", "/chunks/build_params_v2.stan");
    reader.add_event(384, 0, "start", "/chunks/build_params_v2.stan");
    reader.add_event(411, 27, "end", "/chunks/build_params_v2.stan");
    reader.add_event(411, 131, "restart", "model_irt_standard");
    reader.add_event(416, 136, "include", "/chunks/l_hier_ar1_prior.stan");
    reader.add_event(416, 0, "start", "/chunks/l_hier_ar1_prior.stan");
    reader.add_event(429, 13, "end", "/chunks/l_hier_ar1_prior.stan");
    reader.add_event(429, 137, "restart", "model_irt_standard");
    reader.add_event(432, 140, "include", "/chunks/l_hier_prior.stan");
    reader.add_event(432, 0, "start", "/chunks/l_hier_prior.stan");
    reader.add_event(448, 16, "end", "/chunks/l_hier_prior.stan");
    reader.add_event(448, 141, "restart", "model_irt_standard");
    reader.add_event(510, 203, "include", "/chunks/modeling_statement_v9.stan");
    reader.add_event(510, 0, "start", "/chunks/modeling_statement_v9.stan");
    reader.add_event(537, 27, "end", "/chunks/modeling_statement_v9.stan");
    reader.add_event(537, 204, "restart", "model_irt_standard");
    reader.add_event(540, 207, "include", "/chunks/model_types.stan");
    reader.add_event(540, 0, "start", "/chunks/model_types.stan");
    reader.add_event(850, 310, "end", "/chunks/model_types.stan");
    reader.add_event(850, 208, "restart", "model_irt_standard");
    reader.add_event(855, 213, "end", "model_irt_standard");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
pacf_to_acf(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 26;
        validate_non_negative_index("y", "num_elements(x)", num_elements(x));
        validate_non_negative_index("y", "num_elements(x)", num_elements(x));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  y(static_cast<Eigen::VectorXd::Index>(num_elements(x)),static_cast<Eigen::VectorXd::Index>(num_elements(x)));
        (void) y;  // dummy to suppress unused var warning

        stan::math::initialize(y, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(y,DUMMY_VAR__);
        current_statement_begin__ = 27;
        int n(0);
        (void) n;  // dummy to suppress unused var warning

        stan::math::fill(n, std::numeric_limits<int>::min());


        current_statement_begin__ = 28;
        stan::math::assign(n, num_elements(x));
        current_statement_begin__ = 29;
        stan::math::assign(y, rep_matrix(0.0,n,n));
        current_statement_begin__ = 30;
        for (int k = 1; k <= n; ++k) {

            current_statement_begin__ = 31;
            for (int i = 1; i <= (k - 1); ++i) {

                current_statement_begin__ = 32;
                stan::math::assign(get_base1_lhs(y,k,i,"y",1), (get_base1(y,(k - 1),i,"y",1) + (get_base1(x,k,"x",1) * get_base1(y,(k - 1),(k - i),"y",1))));
            }
            current_statement_begin__ = 34;
            stan::math::assign(get_base1_lhs(y,k,k,"y",1), get_base1(x,k,"x",1));
        }
        current_statement_begin__ = 37;
        return stan::math::promote_scalar<fun_return_scalar_t__>(minus(transpose(get_base1(y,n,"y",1))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pacf_to_acf_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x, std::ostream* pstream__) const {
        return pacf_to_acf(x, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
constrain_stationary(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 49;
        validate_non_negative_index("r", "num_elements(x)", num_elements(x));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  r(static_cast<Eigen::VectorXd::Index>(num_elements(x)));
        (void) r;  // dummy to suppress unused var warning

        stan::math::initialize(r, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(r,DUMMY_VAR__);
        current_statement_begin__ = 50;
        int n(0);
        (void) n;  // dummy to suppress unused var warning

        stan::math::fill(n, std::numeric_limits<int>::min());


        current_statement_begin__ = 51;
        stan::math::assign(n, num_elements(x));
        current_statement_begin__ = 53;
        for (int i = 1; i <= n; ++i) {

            current_statement_begin__ = 54;
            stan::math::assign(get_base1_lhs(r,i,"r",1), (get_base1(x,i,"x",1) / sqrt((1.0 + pow(get_base1(x,i,"x",1),2)))));
        }
        current_statement_begin__ = 57;
        return stan::math::promote_scalar<fun_return_scalar_t__>(r);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct constrain_stationary_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x, std::ostream* pstream__) const {
        return constrain_stationary(x, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
acf_to_pacf(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 72;
        validate_non_negative_index("y", "num_elements(x)", num_elements(x));
        validate_non_negative_index("y", "num_elements(x)", num_elements(x));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  y(static_cast<Eigen::VectorXd::Index>(num_elements(x)),static_cast<Eigen::VectorXd::Index>(num_elements(x)));
        (void) y;  // dummy to suppress unused var warning

        stan::math::initialize(y, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(y,DUMMY_VAR__);
        current_statement_begin__ = 73;
        validate_non_negative_index("r", "num_elements(x)", num_elements(x));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  r(static_cast<Eigen::VectorXd::Index>(num_elements(x)));
        (void) r;  // dummy to suppress unused var warning

        stan::math::initialize(r, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(r,DUMMY_VAR__);
        current_statement_begin__ = 74;
        int n(0);
        (void) n;  // dummy to suppress unused var warning

        stan::math::fill(n, std::numeric_limits<int>::min());


        current_statement_begin__ = 75;
        stan::math::assign(n, num_elements(x));
        current_statement_begin__ = 76;
        stan::math::assign(y, rep_matrix(0.0,n,n));
        current_statement_begin__ = 77;
        stan::math::assign(get_base1_lhs(y,n,"y",1), minus(transpose(x)));
        current_statement_begin__ = 78;
        for (int j = 0; j <= (n - 1); ++j) {
            {
            current_statement_begin__ = 79;
            int k(0);
            (void) k;  // dummy to suppress unused var warning

            stan::math::fill(k, std::numeric_limits<int>::min());


            current_statement_begin__ = 80;
            stan::math::assign(k, (n - j));
            current_statement_begin__ = 81;
            for (int i = 1; i <= (k - 1); ++i) {

                current_statement_begin__ = 82;
                stan::math::assign(get_base1_lhs(y,(k - 1),i,"y",1), ((get_base1(y,k,i,"y",1) - (get_base1(y,k,k,"y",1) * get_base1(y,k,(k - i),"y",1))) / (1 - pow(get_base1(y,k,k,"y",1),2))));
            }
            }
        }
        current_statement_begin__ = 85;
        stan::math::assign(r, diagonal(y));
        current_statement_begin__ = 86;
        return stan::math::promote_scalar<fun_return_scalar_t__>(r);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct acf_to_pacf_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x, std::ostream* pstream__) const {
        return acf_to_pacf(x, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
unconstrain_stationary(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 97;
        validate_non_negative_index("y", "num_elements(x)", num_elements(x));
        validate_non_negative_index("y", "num_elements(x)", num_elements(x));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  y(static_cast<Eigen::VectorXd::Index>(num_elements(x)),static_cast<Eigen::VectorXd::Index>(num_elements(x)));
        (void) y;  // dummy to suppress unused var warning

        stan::math::initialize(y, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(y,DUMMY_VAR__);
        current_statement_begin__ = 98;
        validate_non_negative_index("r", "num_elements(x)", num_elements(x));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  r(static_cast<Eigen::VectorXd::Index>(num_elements(x)));
        (void) r;  // dummy to suppress unused var warning

        stan::math::initialize(r, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(r,DUMMY_VAR__);
        current_statement_begin__ = 99;
        validate_non_negative_index("z", "num_elements(x)", num_elements(x));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  z(static_cast<Eigen::VectorXd::Index>(num_elements(x)));
        (void) z;  // dummy to suppress unused var warning

        stan::math::initialize(z, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(z,DUMMY_VAR__);
        current_statement_begin__ = 100;
        int n(0);
        (void) n;  // dummy to suppress unused var warning

        stan::math::fill(n, std::numeric_limits<int>::min());


        current_statement_begin__ = 101;
        stan::math::assign(n, num_elements(x));
        current_statement_begin__ = 103;
        stan::math::assign(r, acf_to_pacf(x, pstream__));
        current_statement_begin__ = 105;
        for (int i = 1; i <= n; ++i) {

            current_statement_begin__ = 106;
            stan::math::assign(get_base1_lhs(z,i,"z",1), (get_base1(r,i,"r",1) / sqrt((1.0 - pow(get_base1(r,i,"r",1),2)))));
        }
        current_statement_begin__ = 108;
        return stan::math::promote_scalar<fun_return_scalar_t__>(z);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct unconstrain_stationary_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x, std::ostream* pstream__) const {
        return unconstrain_stationary(x, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
jacobian_stationary(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& r, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 120;
        validate_non_negative_index("l", "num_elements(r)", num_elements(r));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  l(static_cast<Eigen::VectorXd::Index>(num_elements(r)));
        (void) l;  // dummy to suppress unused var warning

        stan::math::initialize(l, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(l,DUMMY_VAR__);
        current_statement_begin__ = 121;
        validate_non_negative_index("t1", "num_elements(r)", num_elements(r));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  t1(static_cast<Eigen::VectorXd::Index>(num_elements(r)));
        (void) t1;  // dummy to suppress unused var warning

        stan::math::initialize(t1, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(t1,DUMMY_VAR__);
        current_statement_begin__ = 122;
        validate_non_negative_index("t2", "num_elements(r)", num_elements(r));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  t2(static_cast<Eigen::VectorXd::Index>(num_elements(r)));
        (void) t2;  // dummy to suppress unused var warning

        stan::math::initialize(t2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(t2,DUMMY_VAR__);
        current_statement_begin__ = 123;
        int n(0);
        (void) n;  // dummy to suppress unused var warning

        stan::math::fill(n, std::numeric_limits<int>::min());


        current_statement_begin__ = 124;
        stan::math::assign(n, num_elements(r));
        current_statement_begin__ = 126;
        if (as_bool(logical_eq(n,1))) {

            current_statement_begin__ = 127;
            stan::math::assign(get_base1_lhs(l,1,"l",1), log(1));
        } else {

            current_statement_begin__ = 129;
            for (int i = 1; i <= n; ++i) {

                current_statement_begin__ = 130;
                stan::math::assign(get_base1_lhs(t1,i,"t1",1), log(pow((1 - pow(get_base1(r,i,"r",1),2)),divide((i - 1),2))));
                current_statement_begin__ = 132;
                stan::math::assign(get_base1_lhs(t2,i,"t2",1), (logical_eq(modulus(i,2),0) ? stan::math::promote_scalar<fun_scalar_t__>(log((1 + get_base1(r,i,"r",1)))) : stan::math::promote_scalar<fun_scalar_t__>(0) ));
            }
        }
        current_statement_begin__ = 136;
        stan::math::assign(l, add(t1,t2));
        current_statement_begin__ = 138;
        return stan::math::promote_scalar<fun_return_scalar_t__>(l);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct jacobian_stationary_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& r, std::ostream* pstream__) const {
        return jacobian_stationary(r, pstream__);
    }
};

template <typename T1__>
typename boost::math::tools::promote_args<T1__>::type
jacob_mean(const int& N,
               const T1__& N_real, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 153;
        validate_non_negative_index("I", "N", N);
        validate_non_negative_index("I", "N", N);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  I(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(N));
        (void) I;  // dummy to suppress unused var warning

        stan::math::initialize(I, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(I,DUMMY_VAR__);
        current_statement_begin__ = 154;
        validate_non_negative_index("col_vec", "N", N);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  col_vec(static_cast<Eigen::VectorXd::Index>(N));
        (void) col_vec;  // dummy to suppress unused var warning

        stan::math::initialize(col_vec, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(col_vec,DUMMY_VAR__);
        current_statement_begin__ = 155;
        validate_non_negative_index("row_vec", "N", N);
        Eigen::Matrix<fun_scalar_t__,1,Eigen::Dynamic>  row_vec(static_cast<Eigen::VectorXd::Index>(N));
        (void) row_vec;  // dummy to suppress unused var warning

        stan::math::initialize(row_vec, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(row_vec,DUMMY_VAR__);
        current_statement_begin__ = 156;
        fun_scalar_t__ num_div;
        (void) num_div;  // dummy to suppress unused var warning

        stan::math::initialize(num_div, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(num_div,DUMMY_VAR__);
        current_statement_begin__ = 157;
        fun_scalar_t__ density;
        (void) density;  // dummy to suppress unused var warning

        stan::math::initialize(density, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(density,DUMMY_VAR__);


        current_statement_begin__ = 159;
        stan::math::assign(num_div, (1 / N_real));
        current_statement_begin__ = 161;
        stan::math::assign(col_vec, rep_vector(num_div,N));
        current_statement_begin__ = 162;
        stan::math::assign(row_vec, transpose(rep_vector(num_div,N)));
        current_statement_begin__ = 165;
        stan::math::assign(I, diag_matrix(rep_vector(1,N)));
        current_statement_begin__ = 170;
        stan::math::assign(density, log(fabs((num_div - multiply(multiply(row_vec,I),col_vec)))));
        current_statement_begin__ = 174;
        if (as_bool(logical_eq(is_inf(density),1))) {

            current_statement_begin__ = 175;
            return stan::math::promote_scalar<fun_return_scalar_t__>(0);
        } else {

            current_statement_begin__ = 177;
            return stan::math::promote_scalar<fun_return_scalar_t__>(density);
        }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct jacob_mean_functor__ {
    template <typename T1__>
        typename boost::math::tools::promote_args<T1__>::type
    operator()(const int& N,
               const T1__& N_real, std::ostream* pstream__) const {
        return jacob_mean(N, N_real, pstream__);
    }
};

#include <meta_header.hpp>
 class model_irt_standard : public prob_grad {
private:
    int N;
    int N_int;
    int N_cont;
    int T;
    vector<int> Y_int;
    vector<double> Y_cont;
    int model_type;
    int LX;
    int SRX;
    int SAX;
    int use_ar;
    int num_legis;
    int num_bills;
    vector<int> ll;
    vector<int> bb;
    vector<int> time;
    vector<matrix_d> legis_pred;
    matrix_d srx_pred;
    matrix_d sax_pred;
    double diff;
    double diff_high;
    double discrim_reg_sd;
    double discrim_abs_sd;
    double legis_sd;
    double diff_abs_sd;
    double diff_reg_sd;
    double restrict_sd;
    double ar_sd;
    int sample_stationary;
    double time_sd;
    int restrict_var;
    double restrict_var_high;
    double restrict_mean_val;
    int restrict_mean_ind;
    int restrict_mean;
    int m;
    double m_cont;
    int m_step;
    vector<int> absence;
    int num_constrain_l;
    vector<int> Y_new;
    int num_var_free;
    int num_var_restrict;
    double jacob_mean_correct;
public:
    model_irt_standard(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_irt_standard(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_irt_standard_namespace::model_irt_standard";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 184;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 185;
            context__.validate_dims("data initialization", "N_int", "int", context__.to_vec());
            N_int = int(0);
            vals_i__ = context__.vals_i("N_int");
            pos__ = 0;
            N_int = vals_i__[pos__++];
            current_statement_begin__ = 186;
            context__.validate_dims("data initialization", "N_cont", "int", context__.to_vec());
            N_cont = int(0);
            vals_i__ = context__.vals_i("N_cont");
            pos__ = 0;
            N_cont = vals_i__[pos__++];
            current_statement_begin__ = 187;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            current_statement_begin__ = 188;
            validate_non_negative_index("Y_int", "N_int", N_int);
            context__.validate_dims("data initialization", "Y_int", "int", context__.to_vec(N_int));
            validate_non_negative_index("Y_int", "N_int", N_int);
            Y_int = std::vector<int>(N_int,int(0));
            vals_i__ = context__.vals_i("Y_int");
            pos__ = 0;
            size_t Y_int_limit_0__ = N_int;
            for (size_t i_0__ = 0; i_0__ < Y_int_limit_0__; ++i_0__) {
                Y_int[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 189;
            validate_non_negative_index("Y_cont", "N_cont", N_cont);
            context__.validate_dims("data initialization", "Y_cont", "double", context__.to_vec(N_cont));
            validate_non_negative_index("Y_cont", "N_cont", N_cont);
            Y_cont = std::vector<double>(N_cont,double(0));
            vals_r__ = context__.vals_r("Y_cont");
            pos__ = 0;
            size_t Y_cont_limit_0__ = N_cont;
            for (size_t i_0__ = 0; i_0__ < Y_cont_limit_0__; ++i_0__) {
                Y_cont[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 200;
            context__.validate_dims("data initialization", "model_type", "int", context__.to_vec());
            model_type = int(0);
            vals_i__ = context__.vals_i("model_type");
            pos__ = 0;
            model_type = vals_i__[pos__++];
            current_statement_begin__ = 201;
            context__.validate_dims("data initialization", "LX", "int", context__.to_vec());
            LX = int(0);
            vals_i__ = context__.vals_i("LX");
            pos__ = 0;
            LX = vals_i__[pos__++];
            current_statement_begin__ = 202;
            context__.validate_dims("data initialization", "SRX", "int", context__.to_vec());
            SRX = int(0);
            vals_i__ = context__.vals_i("SRX");
            pos__ = 0;
            SRX = vals_i__[pos__++];
            current_statement_begin__ = 203;
            context__.validate_dims("data initialization", "SAX", "int", context__.to_vec());
            SAX = int(0);
            vals_i__ = context__.vals_i("SAX");
            pos__ = 0;
            SAX = vals_i__[pos__++];
            current_statement_begin__ = 204;
            context__.validate_dims("data initialization", "use_ar", "int", context__.to_vec());
            use_ar = int(0);
            vals_i__ = context__.vals_i("use_ar");
            pos__ = 0;
            use_ar = vals_i__[pos__++];
            current_statement_begin__ = 205;
            context__.validate_dims("data initialization", "num_legis", "int", context__.to_vec());
            num_legis = int(0);
            vals_i__ = context__.vals_i("num_legis");
            pos__ = 0;
            num_legis = vals_i__[pos__++];
            current_statement_begin__ = 206;
            context__.validate_dims("data initialization", "num_bills", "int", context__.to_vec());
            num_bills = int(0);
            vals_i__ = context__.vals_i("num_bills");
            pos__ = 0;
            num_bills = vals_i__[pos__++];
            current_statement_begin__ = 207;
            validate_non_negative_index("ll", "N", N);
            context__.validate_dims("data initialization", "ll", "int", context__.to_vec(N));
            validate_non_negative_index("ll", "N", N);
            ll = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("ll");
            pos__ = 0;
            size_t ll_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < ll_limit_0__; ++i_0__) {
                ll[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 208;
            validate_non_negative_index("bb", "N", N);
            context__.validate_dims("data initialization", "bb", "int", context__.to_vec(N));
            validate_non_negative_index("bb", "N", N);
            bb = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("bb");
            pos__ = 0;
            size_t bb_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < bb_limit_0__; ++i_0__) {
                bb[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 209;
            validate_non_negative_index("time", "N", N);
            context__.validate_dims("data initialization", "time", "int", context__.to_vec(N));
            validate_non_negative_index("time", "N", N);
            time = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("time");
            pos__ = 0;
            size_t time_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < time_limit_0__; ++i_0__) {
                time[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 210;
            validate_non_negative_index("legis_pred", "T", T);
            validate_non_negative_index("legis_pred", "num_legis", num_legis);
            validate_non_negative_index("legis_pred", "LX", LX);
            context__.validate_dims("data initialization", "legis_pred", "matrix_d", context__.to_vec(T,num_legis,LX));
            validate_non_negative_index("legis_pred", "T", T);
            validate_non_negative_index("legis_pred", "num_legis", num_legis);
            validate_non_negative_index("legis_pred", "LX", LX);
            legis_pred = std::vector<matrix_d>(T,matrix_d(static_cast<Eigen::VectorXd::Index>(num_legis),static_cast<Eigen::VectorXd::Index>(LX)));
            vals_r__ = context__.vals_r("legis_pred");
            pos__ = 0;
            size_t legis_pred_m_mat_lim__ = num_legis;
            size_t legis_pred_n_mat_lim__ = LX;
            for (size_t n_mat__ = 0; n_mat__ < legis_pred_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < legis_pred_m_mat_lim__; ++m_mat__) {
                    size_t legis_pred_limit_0__ = T;
                    for (size_t i_0__ = 0; i_0__ < legis_pred_limit_0__; ++i_0__) {
                        legis_pred[i_0__](m_mat__,n_mat__) = vals_r__[pos__++];
            }
                }
            }
            current_statement_begin__ = 211;
            validate_non_negative_index("srx_pred", "num_bills", num_bills);
            validate_non_negative_index("srx_pred", "SRX", SRX);
            context__.validate_dims("data initialization", "srx_pred", "matrix_d", context__.to_vec(num_bills,SRX));
            validate_non_negative_index("srx_pred", "num_bills", num_bills);
            validate_non_negative_index("srx_pred", "SRX", SRX);
            srx_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(num_bills),static_cast<Eigen::VectorXd::Index>(SRX));
            vals_r__ = context__.vals_r("srx_pred");
            pos__ = 0;
            size_t srx_pred_m_mat_lim__ = num_bills;
            size_t srx_pred_n_mat_lim__ = SRX;
            for (size_t n_mat__ = 0; n_mat__ < srx_pred_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < srx_pred_m_mat_lim__; ++m_mat__) {
                    srx_pred(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 212;
            validate_non_negative_index("sax_pred", "num_bills", num_bills);
            validate_non_negative_index("sax_pred", "SAX", SAX);
            context__.validate_dims("data initialization", "sax_pred", "matrix_d", context__.to_vec(num_bills,SAX));
            validate_non_negative_index("sax_pred", "num_bills", num_bills);
            validate_non_negative_index("sax_pred", "SAX", SAX);
            sax_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(num_bills),static_cast<Eigen::VectorXd::Index>(SAX));
            vals_r__ = context__.vals_r("sax_pred");
            pos__ = 0;
            size_t sax_pred_m_mat_lim__ = num_bills;
            size_t sax_pred_n_mat_lim__ = SAX;
            for (size_t n_mat__ = 0; n_mat__ < sax_pred_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < sax_pred_m_mat_lim__; ++m_mat__) {
                    sax_pred(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 213;
            context__.validate_dims("data initialization", "diff", "double", context__.to_vec());
            diff = double(0);
            vals_r__ = context__.vals_r("diff");
            pos__ = 0;
            diff = vals_r__[pos__++];
            current_statement_begin__ = 214;
            context__.validate_dims("data initialization", "diff_high", "double", context__.to_vec());
            diff_high = double(0);
            vals_r__ = context__.vals_r("diff_high");
            pos__ = 0;
            diff_high = vals_r__[pos__++];
            current_statement_begin__ = 215;
            context__.validate_dims("data initialization", "discrim_reg_sd", "double", context__.to_vec());
            discrim_reg_sd = double(0);
            vals_r__ = context__.vals_r("discrim_reg_sd");
            pos__ = 0;
            discrim_reg_sd = vals_r__[pos__++];
            current_statement_begin__ = 216;
            context__.validate_dims("data initialization", "discrim_abs_sd", "double", context__.to_vec());
            discrim_abs_sd = double(0);
            vals_r__ = context__.vals_r("discrim_abs_sd");
            pos__ = 0;
            discrim_abs_sd = vals_r__[pos__++];
            current_statement_begin__ = 217;
            context__.validate_dims("data initialization", "legis_sd", "double", context__.to_vec());
            legis_sd = double(0);
            vals_r__ = context__.vals_r("legis_sd");
            pos__ = 0;
            legis_sd = vals_r__[pos__++];
            current_statement_begin__ = 218;
            context__.validate_dims("data initialization", "diff_abs_sd", "double", context__.to_vec());
            diff_abs_sd = double(0);
            vals_r__ = context__.vals_r("diff_abs_sd");
            pos__ = 0;
            diff_abs_sd = vals_r__[pos__++];
            current_statement_begin__ = 219;
            context__.validate_dims("data initialization", "diff_reg_sd", "double", context__.to_vec());
            diff_reg_sd = double(0);
            vals_r__ = context__.vals_r("diff_reg_sd");
            pos__ = 0;
            diff_reg_sd = vals_r__[pos__++];
            current_statement_begin__ = 220;
            context__.validate_dims("data initialization", "restrict_sd", "double", context__.to_vec());
            restrict_sd = double(0);
            vals_r__ = context__.vals_r("restrict_sd");
            pos__ = 0;
            restrict_sd = vals_r__[pos__++];
            current_statement_begin__ = 221;
            context__.validate_dims("data initialization", "ar_sd", "double", context__.to_vec());
            ar_sd = double(0);
            vals_r__ = context__.vals_r("ar_sd");
            pos__ = 0;
            ar_sd = vals_r__[pos__++];
            current_statement_begin__ = 222;
            context__.validate_dims("data initialization", "sample_stationary", "int", context__.to_vec());
            sample_stationary = int(0);
            vals_i__ = context__.vals_i("sample_stationary");
            pos__ = 0;
            sample_stationary = vals_i__[pos__++];
            current_statement_begin__ = 223;
            context__.validate_dims("data initialization", "time_sd", "double", context__.to_vec());
            time_sd = double(0);
            vals_r__ = context__.vals_r("time_sd");
            pos__ = 0;
            time_sd = vals_r__[pos__++];
            current_statement_begin__ = 224;
            context__.validate_dims("data initialization", "restrict_var", "int", context__.to_vec());
            restrict_var = int(0);
            vals_i__ = context__.vals_i("restrict_var");
            pos__ = 0;
            restrict_var = vals_i__[pos__++];
            current_statement_begin__ = 225;
            context__.validate_dims("data initialization", "restrict_var_high", "double", context__.to_vec());
            restrict_var_high = double(0);
            vals_r__ = context__.vals_r("restrict_var_high");
            pos__ = 0;
            restrict_var_high = vals_r__[pos__++];
            current_statement_begin__ = 226;
            context__.validate_dims("data initialization", "restrict_mean_val", "double", context__.to_vec());
            restrict_mean_val = double(0);
            vals_r__ = context__.vals_r("restrict_mean_val");
            pos__ = 0;
            restrict_mean_val = vals_r__[pos__++];
            current_statement_begin__ = 227;
            context__.validate_dims("data initialization", "restrict_mean_ind", "int", context__.to_vec());
            restrict_mean_ind = int(0);
            vals_i__ = context__.vals_i("restrict_mean_ind");
            pos__ = 0;
            restrict_mean_ind = vals_i__[pos__++];
            current_statement_begin__ = 228;
            context__.validate_dims("data initialization", "restrict_mean", "int", context__.to_vec());
            restrict_mean = int(0);
            vals_i__ = context__.vals_i("restrict_mean");
            pos__ = 0;
            restrict_mean = vals_i__[pos__++];

            // validate, data variables
            current_statement_begin__ = 184;
            current_statement_begin__ = 185;
            current_statement_begin__ = 186;
            current_statement_begin__ = 187;
            current_statement_begin__ = 188;
            current_statement_begin__ = 189;
            current_statement_begin__ = 200;
            current_statement_begin__ = 201;
            current_statement_begin__ = 202;
            current_statement_begin__ = 203;
            current_statement_begin__ = 204;
            current_statement_begin__ = 205;
            check_greater_or_equal(function__,"num_legis",num_legis,1);
            current_statement_begin__ = 206;
            check_greater_or_equal(function__,"num_bills",num_bills,1);
            current_statement_begin__ = 207;
            current_statement_begin__ = 208;
            current_statement_begin__ = 209;
            current_statement_begin__ = 210;
            current_statement_begin__ = 211;
            current_statement_begin__ = 212;
            current_statement_begin__ = 213;
            current_statement_begin__ = 214;
            current_statement_begin__ = 215;
            current_statement_begin__ = 216;
            current_statement_begin__ = 217;
            current_statement_begin__ = 218;
            current_statement_begin__ = 219;
            current_statement_begin__ = 220;
            current_statement_begin__ = 221;
            current_statement_begin__ = 222;
            current_statement_begin__ = 223;
            current_statement_begin__ = 224;
            current_statement_begin__ = 225;
            current_statement_begin__ = 226;
            current_statement_begin__ = 227;
            current_statement_begin__ = 228;
            // initialize data variables
            current_statement_begin__ = 232;
            m = int(0);
            stan::math::fill(m, std::numeric_limits<int>::min());
            current_statement_begin__ = 233;
            m_cont = double(0);
            stan::math::fill(m_cont,DUMMY_VAR__);
            current_statement_begin__ = 234;
            m_step = int(0);
            stan::math::fill(m_step, std::numeric_limits<int>::min());
            current_statement_begin__ = 235;
            validate_non_negative_index("absence", "N", N);
            absence = std::vector<int>(N,int(0));
            stan::math::fill(absence, std::numeric_limits<int>::min());
            current_statement_begin__ = 236;
            num_constrain_l = int(0);
            stan::math::fill(num_constrain_l, std::numeric_limits<int>::min());
            current_statement_begin__ = 237;
            validate_non_negative_index("Y_new", "N", N);
            Y_new = std::vector<int>(N,int(0));
            stan::math::fill(Y_new, std::numeric_limits<int>::min());
            current_statement_begin__ = 238;
            num_var_free = int(0);
            stan::math::fill(num_var_free, std::numeric_limits<int>::min());
            current_statement_begin__ = 239;
            num_var_restrict = int(0);
            stan::math::fill(num_var_restrict, std::numeric_limits<int>::min());
            current_statement_begin__ = 240;
            jacob_mean_correct = double(0);
            stan::math::fill(jacob_mean_correct,DUMMY_VAR__);

            current_statement_begin__ = 248;
            stan::math::assign(m_cont, max(Y_cont));
            current_statement_begin__ = 249;
            stan::math::assign(m, max(Y_int));
            current_statement_begin__ = 251;
            if (as_bool((primitive_value((primitive_value(logical_eq(model_type,4)) || primitive_value(logical_eq(model_type,6)))) || primitive_value(logical_eq(model_type,8))))) {

                current_statement_begin__ = 253;
                stan::math::assign(m, (max(Y_int) - 1));
                current_statement_begin__ = 255;
                if (as_bool(logical_lt(model_type,7))) {

                    current_statement_begin__ = 256;
                    stan::math::assign(m_step, m);
                } else {

                    current_statement_begin__ = 258;
                    stan::math::assign(m_step, 2);
                }
            } else if (as_bool((primitive_value(logical_eq(model_type,10)) || primitive_value(logical_eq(model_type,12))))) {

                current_statement_begin__ = 262;
                stan::math::assign(m_cont, (max(Y_cont) - 1));
                current_statement_begin__ = 263;
                stan::math::assign(m_step, 2);
                current_statement_begin__ = 264;
                stan::math::assign(m, 2);
            } else if (as_bool((primitive_value(logical_eq(model_type,3)) || primitive_value(logical_eq(model_type,5))))) {

                current_statement_begin__ = 267;
                stan::math::assign(m, max(Y_int));
                current_statement_begin__ = 268;
                stan::math::assign(m_step, m);
            } else if (as_bool((primitive_value((primitive_value((primitive_value((primitive_value(logical_eq(model_type,1)) || primitive_value(logical_eq(model_type,2)))) || primitive_value(logical_eq(model_type,7)))) || primitive_value(logical_eq(model_type,9)))) || primitive_value(logical_eq(model_type,11))))) {

                current_statement_begin__ = 272;
                stan::math::assign(m, 2);
                current_statement_begin__ = 273;
                stan::math::assign(m_step, 2);
            } else {

                current_statement_begin__ = 275;
                stan::math::assign(m, 2);
                current_statement_begin__ = 276;
                stan::math::assign(m_step, 2);
            }
            current_statement_begin__ = 279;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 281;
                if (as_bool(logical_lt(model_type,9))) {

                    current_statement_begin__ = 282;
                    if (as_bool(logical_gt(get_base1(Y_int,n,"Y_int",1),m))) {

                        current_statement_begin__ = 283;
                        stan::math::assign(get_base1_lhs(absence,n,"absence",1), 1);
                    } else {

                        current_statement_begin__ = 285;
                        stan::math::assign(get_base1_lhs(absence,n,"absence",1), 0);
                    }
                } else {

                    current_statement_begin__ = 288;
                    if (as_bool(logical_gt(get_base1(Y_cont,n,"Y_cont",1),m_cont))) {

                        current_statement_begin__ = 289;
                        stan::math::assign(get_base1_lhs(absence,n,"absence",1), 1);
                    } else {

                        current_statement_begin__ = 291;
                        stan::math::assign(get_base1_lhs(absence,n,"absence",1), 0);
                    }
                }
                current_statement_begin__ = 294;
                if (as_bool((primitive_value(logical_eq(model_type,1)) || primitive_value(logical_eq(model_type,2))))) {

                    current_statement_begin__ = 296;
                    if (as_bool(logical_neq(min(Y_int),0))) {

                        current_statement_begin__ = 297;
                        stan::math::assign(get_base1_lhs(Y_new,n,"Y_new",1), (get_base1(Y_int,n,"Y_int",1) - 1));
                    } else {

                        current_statement_begin__ = 299;
                        stan::math::assign(get_base1_lhs(Y_new,n,"Y_new",1), get_base1(Y_int,n,"Y_int",1));
                    }
                }
            }
            current_statement_begin__ = 310;
            if (as_bool(logical_eq(num_legis,2))) {

                current_statement_begin__ = 311;
                stan::math::assign(num_constrain_l, 1);
            } else {

                current_statement_begin__ = 313;
                if (as_bool(logical_eq(T,1))) {

                    current_statement_begin__ = 314;
                    stan::math::assign(num_constrain_l, 2);
                } else {

                    current_statement_begin__ = 316;
                    if (as_bool(logical_eq(use_ar,1))) {

                        current_statement_begin__ = 317;
                        stan::math::assign(num_constrain_l, 2);
                    } else {

                        current_statement_begin__ = 319;
                        stan::math::assign(num_constrain_l, 2);
                    }
                }
            }
            current_statement_begin__ = 330;
            if (as_bool(logical_eq(restrict_var,1))) {

                current_statement_begin__ = 331;
                stan::math::assign(num_var_restrict, num_legis);
                current_statement_begin__ = 332;
                stan::math::assign(num_var_free, 0);
            } else {

                current_statement_begin__ = 334;
                stan::math::assign(num_var_restrict, 0);
                current_statement_begin__ = 335;
                stan::math::assign(num_var_free, num_legis);
            }
            current_statement_begin__ = 337;
            if (as_bool(logical_gt(T,1))) {

                current_statement_begin__ = 338;
                stan::math::assign(jacob_mean_correct, jacob_mean(T,T, pstream__));
            } else {

                current_statement_begin__ = 340;
                stan::math::assign(jacob_mean_correct, 1);
            }

            // validate transformed data
            current_statement_begin__ = 232;
            current_statement_begin__ = 233;
            current_statement_begin__ = 234;
            current_statement_begin__ = 235;
            current_statement_begin__ = 236;
            current_statement_begin__ = 237;
            current_statement_begin__ = 238;
            current_statement_begin__ = 239;
            current_statement_begin__ = 240;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 347;
            validate_non_negative_index("sigma_abs_free", "num_bills", num_bills);
            num_params_r__ += num_bills;
            current_statement_begin__ = 348;
            validate_non_negative_index("L_free", "(num_legis - 2)", (num_legis - 2));
            num_params_r__ += (num_legis - 2);
            current_statement_begin__ = 349;
            validate_non_negative_index("L_tp1_var", "num_legis", num_legis);
            validate_non_negative_index("L_tp1_var", "(T - 1)", (T - 1));
            num_params_r__ += num_legis * (T - 1);
            current_statement_begin__ = 350;
            validate_non_negative_index("L_AR1_free", "(num_legis - 1)", (num_legis - 1));
            num_params_r__ += (num_legis - 1);
            current_statement_begin__ = 351;
            validate_non_negative_index("sigma_reg_free", "num_bills", num_bills);
            num_params_r__ += num_bills;
            current_statement_begin__ = 352;
            validate_non_negative_index("restrict_high", "1", 1);
            num_params_r__ += 1;
            current_statement_begin__ = 353;
            validate_non_negative_index("legis_x", "LX", LX);
            num_params_r__ += LX;
            current_statement_begin__ = 354;
            validate_non_negative_index("sigma_reg_x", "SRX", SRX);
            num_params_r__ += SRX;
            current_statement_begin__ = 355;
            validate_non_negative_index("sigma_abs_x", "SAX", SAX);
            num_params_r__ += SAX;
            current_statement_begin__ = 356;
            validate_non_negative_index("legis_x_cons", "LX", LX);
            num_params_r__ += LX;
            current_statement_begin__ = 357;
            validate_non_negative_index("sigma_reg_x_cons", "SRX", SRX);
            num_params_r__ += SRX;
            current_statement_begin__ = 358;
            validate_non_negative_index("sigma_abs_x_cons", "SAX", SAX);
            num_params_r__ += SAX;
            current_statement_begin__ = 359;
            validate_non_negative_index("B_int_free", "num_bills", num_bills);
            num_params_r__ += num_bills;
            current_statement_begin__ = 360;
            validate_non_negative_index("A_int_free", "num_bills", num_bills);
            num_params_r__ += num_bills;
            current_statement_begin__ = 361;
            validate_non_negative_index("steps_votes", "(m_step - 1)", (m_step - 1));
            num_params_r__ += (m_step - 1);
            current_statement_begin__ = 362;
            validate_non_negative_index("steps_votes_grm", "(m_step - 1)", (m_step - 1));
            validate_non_negative_index("steps_votes_grm", "num_bills", num_bills);
            num_params_r__ += (m_step - 1) * num_bills;
            current_statement_begin__ = 363;
            ++num_params_r__;
            current_statement_begin__ = 364;
            ++num_params_r__;
            current_statement_begin__ = 365;
            validate_non_negative_index("time_var", "num_legis", num_legis);
            num_params_r__ += num_legis;
            current_statement_begin__ = 366;
            validate_non_negative_index("time_var_restrict", "num_legis", num_legis);
            num_params_r__ += num_legis;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_irt_standard() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("sigma_abs_free")))
            throw std::runtime_error("variable sigma_abs_free missing");
        vals_r__ = context__.vals_r("sigma_abs_free");
        pos__ = 0U;
        validate_non_negative_index("sigma_abs_free", "num_bills", num_bills);
        context__.validate_dims("initialization", "sigma_abs_free", "vector_d", context__.to_vec(num_bills));
        vector_d sigma_abs_free(static_cast<Eigen::VectorXd::Index>(num_bills));
        for (int j1__ = 0U; j1__ < num_bills; ++j1__)
            sigma_abs_free(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(sigma_abs_free);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_abs_free: ") + e.what());
        }

        if (!(context__.contains_r("L_free")))
            throw std::runtime_error("variable L_free missing");
        vals_r__ = context__.vals_r("L_free");
        pos__ = 0U;
        validate_non_negative_index("L_free", "(num_legis - 2)", (num_legis - 2));
        context__.validate_dims("initialization", "L_free", "vector_d", context__.to_vec((num_legis - 2)));
        vector_d L_free(static_cast<Eigen::VectorXd::Index>((num_legis - 2)));
        for (int j1__ = 0U; j1__ < (num_legis - 2); ++j1__)
            L_free(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(L_free);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable L_free: ") + e.what());
        }

        if (!(context__.contains_r("L_tp1_var")))
            throw std::runtime_error("variable L_tp1_var missing");
        vals_r__ = context__.vals_r("L_tp1_var");
        pos__ = 0U;
        validate_non_negative_index("L_tp1_var", "(T - 1)", (T - 1));
        validate_non_negative_index("L_tp1_var", "num_legis", num_legis);
        context__.validate_dims("initialization", "L_tp1_var", "vector_d", context__.to_vec((T - 1),num_legis));
        std::vector<vector_d> L_tp1_var((T - 1),vector_d(static_cast<Eigen::VectorXd::Index>(num_legis)));
        for (int j1__ = 0U; j1__ < num_legis; ++j1__)
            for (int i0__ = 0U; i0__ < (T - 1); ++i0__)
                L_tp1_var[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (T - 1); ++i0__)
            try {
            writer__.vector_unconstrain(L_tp1_var[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable L_tp1_var: ") + e.what());
        }

        if (!(context__.contains_r("L_AR1_free")))
            throw std::runtime_error("variable L_AR1_free missing");
        vals_r__ = context__.vals_r("L_AR1_free");
        pos__ = 0U;
        validate_non_negative_index("L_AR1_free", "(num_legis - 1)", (num_legis - 1));
        context__.validate_dims("initialization", "L_AR1_free", "vector_d", context__.to_vec((num_legis - 1)));
        vector_d L_AR1_free(static_cast<Eigen::VectorXd::Index>((num_legis - 1)));
        for (int j1__ = 0U; j1__ < (num_legis - 1); ++j1__)
            L_AR1_free(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(-(0.98999999999999999),0.98999999999999999,L_AR1_free);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable L_AR1_free: ") + e.what());
        }

        if (!(context__.contains_r("sigma_reg_free")))
            throw std::runtime_error("variable sigma_reg_free missing");
        vals_r__ = context__.vals_r("sigma_reg_free");
        pos__ = 0U;
        validate_non_negative_index("sigma_reg_free", "num_bills", num_bills);
        context__.validate_dims("initialization", "sigma_reg_free", "vector_d", context__.to_vec(num_bills));
        vector_d sigma_reg_free(static_cast<Eigen::VectorXd::Index>(num_bills));
        for (int j1__ = 0U; j1__ < num_bills; ++j1__)
            sigma_reg_free(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(sigma_reg_free);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_reg_free: ") + e.what());
        }

        if (!(context__.contains_r("restrict_high")))
            throw std::runtime_error("variable restrict_high missing");
        vals_r__ = context__.vals_r("restrict_high");
        pos__ = 0U;
        validate_non_negative_index("restrict_high", "1", 1);
        context__.validate_dims("initialization", "restrict_high", "vector_d", context__.to_vec(1));
        vector_d restrict_high(static_cast<Eigen::VectorXd::Index>(1));
        for (int j1__ = 0U; j1__ < 1; ++j1__)
            restrict_high(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(restrict_high);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable restrict_high: ") + e.what());
        }

        if (!(context__.contains_r("legis_x")))
            throw std::runtime_error("variable legis_x missing");
        vals_r__ = context__.vals_r("legis_x");
        pos__ = 0U;
        validate_non_negative_index("legis_x", "LX", LX);
        context__.validate_dims("initialization", "legis_x", "vector_d", context__.to_vec(LX));
        vector_d legis_x(static_cast<Eigen::VectorXd::Index>(LX));
        for (int j1__ = 0U; j1__ < LX; ++j1__)
            legis_x(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(legis_x);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable legis_x: ") + e.what());
        }

        if (!(context__.contains_r("sigma_reg_x")))
            throw std::runtime_error("variable sigma_reg_x missing");
        vals_r__ = context__.vals_r("sigma_reg_x");
        pos__ = 0U;
        validate_non_negative_index("sigma_reg_x", "SRX", SRX);
        context__.validate_dims("initialization", "sigma_reg_x", "vector_d", context__.to_vec(SRX));
        vector_d sigma_reg_x(static_cast<Eigen::VectorXd::Index>(SRX));
        for (int j1__ = 0U; j1__ < SRX; ++j1__)
            sigma_reg_x(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(sigma_reg_x);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_reg_x: ") + e.what());
        }

        if (!(context__.contains_r("sigma_abs_x")))
            throw std::runtime_error("variable sigma_abs_x missing");
        vals_r__ = context__.vals_r("sigma_abs_x");
        pos__ = 0U;
        validate_non_negative_index("sigma_abs_x", "SAX", SAX);
        context__.validate_dims("initialization", "sigma_abs_x", "vector_d", context__.to_vec(SAX));
        vector_d sigma_abs_x(static_cast<Eigen::VectorXd::Index>(SAX));
        for (int j1__ = 0U; j1__ < SAX; ++j1__)
            sigma_abs_x(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(sigma_abs_x);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_abs_x: ") + e.what());
        }

        if (!(context__.contains_r("legis_x_cons")))
            throw std::runtime_error("variable legis_x_cons missing");
        vals_r__ = context__.vals_r("legis_x_cons");
        pos__ = 0U;
        validate_non_negative_index("legis_x_cons", "LX", LX);
        context__.validate_dims("initialization", "legis_x_cons", "vector_d", context__.to_vec(LX));
        vector_d legis_x_cons(static_cast<Eigen::VectorXd::Index>(LX));
        for (int j1__ = 0U; j1__ < LX; ++j1__)
            legis_x_cons(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(legis_x_cons);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable legis_x_cons: ") + e.what());
        }

        if (!(context__.contains_r("sigma_reg_x_cons")))
            throw std::runtime_error("variable sigma_reg_x_cons missing");
        vals_r__ = context__.vals_r("sigma_reg_x_cons");
        pos__ = 0U;
        validate_non_negative_index("sigma_reg_x_cons", "SRX", SRX);
        context__.validate_dims("initialization", "sigma_reg_x_cons", "vector_d", context__.to_vec(SRX));
        vector_d sigma_reg_x_cons(static_cast<Eigen::VectorXd::Index>(SRX));
        for (int j1__ = 0U; j1__ < SRX; ++j1__)
            sigma_reg_x_cons(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(sigma_reg_x_cons);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_reg_x_cons: ") + e.what());
        }

        if (!(context__.contains_r("sigma_abs_x_cons")))
            throw std::runtime_error("variable sigma_abs_x_cons missing");
        vals_r__ = context__.vals_r("sigma_abs_x_cons");
        pos__ = 0U;
        validate_non_negative_index("sigma_abs_x_cons", "SAX", SAX);
        context__.validate_dims("initialization", "sigma_abs_x_cons", "vector_d", context__.to_vec(SAX));
        vector_d sigma_abs_x_cons(static_cast<Eigen::VectorXd::Index>(SAX));
        for (int j1__ = 0U; j1__ < SAX; ++j1__)
            sigma_abs_x_cons(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(sigma_abs_x_cons);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_abs_x_cons: ") + e.what());
        }

        if (!(context__.contains_r("B_int_free")))
            throw std::runtime_error("variable B_int_free missing");
        vals_r__ = context__.vals_r("B_int_free");
        pos__ = 0U;
        validate_non_negative_index("B_int_free", "num_bills", num_bills);
        context__.validate_dims("initialization", "B_int_free", "vector_d", context__.to_vec(num_bills));
        vector_d B_int_free(static_cast<Eigen::VectorXd::Index>(num_bills));
        for (int j1__ = 0U; j1__ < num_bills; ++j1__)
            B_int_free(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(B_int_free);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable B_int_free: ") + e.what());
        }

        if (!(context__.contains_r("A_int_free")))
            throw std::runtime_error("variable A_int_free missing");
        vals_r__ = context__.vals_r("A_int_free");
        pos__ = 0U;
        validate_non_negative_index("A_int_free", "num_bills", num_bills);
        context__.validate_dims("initialization", "A_int_free", "vector_d", context__.to_vec(num_bills));
        vector_d A_int_free(static_cast<Eigen::VectorXd::Index>(num_bills));
        for (int j1__ = 0U; j1__ < num_bills; ++j1__)
            A_int_free(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(A_int_free);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable A_int_free: ") + e.what());
        }

        if (!(context__.contains_r("steps_votes")))
            throw std::runtime_error("variable steps_votes missing");
        vals_r__ = context__.vals_r("steps_votes");
        pos__ = 0U;
        validate_non_negative_index("steps_votes", "(m_step - 1)", (m_step - 1));
        context__.validate_dims("initialization", "steps_votes", "vector_d", context__.to_vec((m_step - 1)));
        vector_d steps_votes(static_cast<Eigen::VectorXd::Index>((m_step - 1)));
        for (int j1__ = 0U; j1__ < (m_step - 1); ++j1__)
            steps_votes(j1__) = vals_r__[pos__++];
        try {
            writer__.ordered_unconstrain(steps_votes);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable steps_votes: ") + e.what());
        }

        if (!(context__.contains_r("steps_votes_grm")))
            throw std::runtime_error("variable steps_votes_grm missing");
        vals_r__ = context__.vals_r("steps_votes_grm");
        pos__ = 0U;
        validate_non_negative_index("steps_votes_grm", "num_bills", num_bills);
        validate_non_negative_index("steps_votes_grm", "(m_step - 1)", (m_step - 1));
        context__.validate_dims("initialization", "steps_votes_grm", "vector_d", context__.to_vec(num_bills,(m_step - 1)));
        std::vector<vector_d> steps_votes_grm(num_bills,vector_d(static_cast<Eigen::VectorXd::Index>((m_step - 1))));
        for (int j1__ = 0U; j1__ < (m_step - 1); ++j1__)
            for (int i0__ = 0U; i0__ < num_bills; ++i0__)
                steps_votes_grm[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < num_bills; ++i0__)
            try {
            writer__.ordered_unconstrain(steps_votes_grm[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable steps_votes_grm: ") + e.what());
        }

        if (!(context__.contains_r("extra_sd")))
            throw std::runtime_error("variable extra_sd missing");
        vals_r__ = context__.vals_r("extra_sd");
        pos__ = 0U;
        context__.validate_dims("initialization", "extra_sd", "double", context__.to_vec());
        double extra_sd(0);
        extra_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,extra_sd);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable extra_sd: ") + e.what());
        }

        if (!(context__.contains_r("ar_fix")))
            throw std::runtime_error("variable ar_fix missing");
        vals_r__ = context__.vals_r("ar_fix");
        pos__ = 0U;
        context__.validate_dims("initialization", "ar_fix", "double", context__.to_vec());
        double ar_fix(0);
        ar_fix = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(0.90000000000000002),0.90000000000000002,ar_fix);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable ar_fix: ") + e.what());
        }

        if (!(context__.contains_r("time_var")))
            throw std::runtime_error("variable time_var missing");
        vals_r__ = context__.vals_r("time_var");
        pos__ = 0U;
        validate_non_negative_index("time_var", "num_legis", num_legis);
        context__.validate_dims("initialization", "time_var", "vector_d", context__.to_vec(num_legis));
        vector_d time_var(static_cast<Eigen::VectorXd::Index>(num_legis));
        for (int j1__ = 0U; j1__ < num_legis; ++j1__)
            time_var(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,time_var);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable time_var: ") + e.what());
        }

        if (!(context__.contains_r("time_var_restrict")))
            throw std::runtime_error("variable time_var_restrict missing");
        vals_r__ = context__.vals_r("time_var_restrict");
        pos__ = 0U;
        validate_non_negative_index("time_var_restrict", "num_legis", num_legis);
        context__.validate_dims("initialization", "time_var_restrict", "vector_d", context__.to_vec(num_legis));
        vector_d time_var_restrict(static_cast<Eigen::VectorXd::Index>(num_legis));
        for (int j1__ = 0U; j1__ < num_legis; ++j1__)
            time_var_restrict(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,restrict_var_high,time_var_restrict);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable time_var_restrict: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  sigma_abs_free;
            (void) sigma_abs_free;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_abs_free = in__.vector_constrain(num_bills,lp__);
            else
                sigma_abs_free = in__.vector_constrain(num_bills);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  L_free;
            (void) L_free;  // dummy to suppress unused var warning
            if (jacobian__)
                L_free = in__.vector_constrain((num_legis - 2),lp__);
            else
                L_free = in__.vector_constrain((num_legis - 2));

            vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > L_tp1_var;
            size_t dim_L_tp1_var_0__ = (T - 1);
            L_tp1_var.reserve(dim_L_tp1_var_0__);
            for (size_t k_0__ = 0; k_0__ < dim_L_tp1_var_0__; ++k_0__) {
                if (jacobian__)
                    L_tp1_var.push_back(in__.vector_constrain(num_legis,lp__));
                else
                    L_tp1_var.push_back(in__.vector_constrain(num_legis));
            }

            Eigen::Matrix<T__,Eigen::Dynamic,1>  L_AR1_free;
            (void) L_AR1_free;  // dummy to suppress unused var warning
            if (jacobian__)
                L_AR1_free = in__.vector_lub_constrain(-(0.98999999999999999),0.98999999999999999,(num_legis - 1),lp__);
            else
                L_AR1_free = in__.vector_lub_constrain(-(0.98999999999999999),0.98999999999999999,(num_legis - 1));

            Eigen::Matrix<T__,Eigen::Dynamic,1>  sigma_reg_free;
            (void) sigma_reg_free;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_reg_free = in__.vector_constrain(num_bills,lp__);
            else
                sigma_reg_free = in__.vector_constrain(num_bills);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  restrict_high;
            (void) restrict_high;  // dummy to suppress unused var warning
            if (jacobian__)
                restrict_high = in__.vector_constrain(1,lp__);
            else
                restrict_high = in__.vector_constrain(1);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  legis_x;
            (void) legis_x;  // dummy to suppress unused var warning
            if (jacobian__)
                legis_x = in__.vector_constrain(LX,lp__);
            else
                legis_x = in__.vector_constrain(LX);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  sigma_reg_x;
            (void) sigma_reg_x;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_reg_x = in__.vector_constrain(SRX,lp__);
            else
                sigma_reg_x = in__.vector_constrain(SRX);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  sigma_abs_x;
            (void) sigma_abs_x;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_abs_x = in__.vector_constrain(SAX,lp__);
            else
                sigma_abs_x = in__.vector_constrain(SAX);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  legis_x_cons;
            (void) legis_x_cons;  // dummy to suppress unused var warning
            if (jacobian__)
                legis_x_cons = in__.vector_constrain(LX,lp__);
            else
                legis_x_cons = in__.vector_constrain(LX);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  sigma_reg_x_cons;
            (void) sigma_reg_x_cons;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_reg_x_cons = in__.vector_constrain(SRX,lp__);
            else
                sigma_reg_x_cons = in__.vector_constrain(SRX);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  sigma_abs_x_cons;
            (void) sigma_abs_x_cons;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_abs_x_cons = in__.vector_constrain(SAX,lp__);
            else
                sigma_abs_x_cons = in__.vector_constrain(SAX);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  B_int_free;
            (void) B_int_free;  // dummy to suppress unused var warning
            if (jacobian__)
                B_int_free = in__.vector_constrain(num_bills,lp__);
            else
                B_int_free = in__.vector_constrain(num_bills);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  A_int_free;
            (void) A_int_free;  // dummy to suppress unused var warning
            if (jacobian__)
                A_int_free = in__.vector_constrain(num_bills,lp__);
            else
                A_int_free = in__.vector_constrain(num_bills);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  steps_votes;
            (void) steps_votes;  // dummy to suppress unused var warning
            if (jacobian__)
                steps_votes = in__.ordered_constrain((m_step - 1),lp__);
            else
                steps_votes = in__.ordered_constrain((m_step - 1));

            vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > steps_votes_grm;
            size_t dim_steps_votes_grm_0__ = num_bills;
            steps_votes_grm.reserve(dim_steps_votes_grm_0__);
            for (size_t k_0__ = 0; k_0__ < dim_steps_votes_grm_0__; ++k_0__) {
                if (jacobian__)
                    steps_votes_grm.push_back(in__.ordered_constrain((m_step - 1),lp__));
                else
                    steps_votes_grm.push_back(in__.ordered_constrain((m_step - 1)));
            }

            T__ extra_sd;
            (void) extra_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                extra_sd = in__.scalar_lb_constrain(0,lp__);
            else
                extra_sd = in__.scalar_lb_constrain(0);

            T__ ar_fix;
            (void) ar_fix;  // dummy to suppress unused var warning
            if (jacobian__)
                ar_fix = in__.scalar_lub_constrain(-(0.90000000000000002),0.90000000000000002,lp__);
            else
                ar_fix = in__.scalar_lub_constrain(-(0.90000000000000002),0.90000000000000002);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  time_var;
            (void) time_var;  // dummy to suppress unused var warning
            if (jacobian__)
                time_var = in__.vector_lb_constrain(0,num_legis,lp__);
            else
                time_var = in__.vector_lb_constrain(0,num_legis);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  time_var_restrict;
            (void) time_var_restrict;  // dummy to suppress unused var warning
            if (jacobian__)
                time_var_restrict = in__.vector_lub_constrain(0,restrict_var_high,num_legis,lp__);
            else
                time_var_restrict = in__.vector_lub_constrain(0,restrict_var_high,num_legis);


            // transformed parameters
            current_statement_begin__ = 372;
            validate_non_negative_index("L_full", "num_legis", num_legis);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  L_full(static_cast<Eigen::VectorXd::Index>(num_legis));
            (void) L_full;  // dummy to suppress unused var warning

            stan::math::initialize(L_full, DUMMY_VAR__);
            stan::math::fill(L_full,DUMMY_VAR__);
            current_statement_begin__ = 373;
            validate_non_negative_index("L_AR1", "num_legis", num_legis);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  L_AR1(static_cast<Eigen::VectorXd::Index>(num_legis));
            (void) L_AR1;  // dummy to suppress unused var warning

            stan::math::initialize(L_AR1, DUMMY_VAR__);
            stan::math::fill(L_AR1,DUMMY_VAR__);
            current_statement_begin__ = 374;
            validate_non_negative_index("L_tp1", "num_legis", num_legis);
            validate_non_negative_index("L_tp1", "T", T);
            vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > L_tp1(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(num_legis))));
            stan::math::initialize(L_tp1, DUMMY_VAR__);
            stan::math::fill(L_tp1,DUMMY_VAR__);
            current_statement_begin__ = 375;
            validate_non_negative_index("restrict_low", "1", 1);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  restrict_low(static_cast<Eigen::VectorXd::Index>(1));
            (void) restrict_low;  // dummy to suppress unused var warning

            stan::math::initialize(restrict_low, DUMMY_VAR__);
            stan::math::fill(restrict_low,DUMMY_VAR__);


            current_statement_begin__ = 378;
            stan::math::assign(restrict_low, subtract(restrict_high,diff));
            current_statement_begin__ = 380;
            stan::math::assign(L_AR1, append_row(L_AR1_free,ar_fix));
            current_statement_begin__ = 384;
            if (as_bool(logical_eq(num_legis,2))) {

                current_statement_begin__ = 385;
                if (as_bool(logical_gt(T,1))) {

                    current_statement_begin__ = 386;
                    if (as_bool(logical_eq(use_ar,1))) {

                        current_statement_begin__ = 387;
                        stan::math::assign(L_full, append_row(L_free,restrict_high));
                    } else {

                        current_statement_begin__ = 389;
                        stan::math::assign(L_full, append_row(restrict_low,restrict_high));
                    }
                } else {

                    current_statement_begin__ = 392;
                    stan::math::assign(L_full, append_row(restrict_low,restrict_high));
                }
            } else {

                current_statement_begin__ = 397;
                if (as_bool(logical_gt(T,1))) {

                    current_statement_begin__ = 398;
                    if (as_bool(logical_eq(use_ar,1))) {

                        current_statement_begin__ = 399;
                        stan::math::assign(L_full, append_row(L_free,append_row(restrict_low,restrict_high)));
                    } else {

                        current_statement_begin__ = 401;
                        stan::math::assign(L_full, append_row(L_free,append_row(restrict_low,restrict_high)));
                    }
                } else {

                    current_statement_begin__ = 406;
                    stan::math::assign(L_full, append_row(L_free,append_row(restrict_low,restrict_high)));
                }
            }
            current_statement_begin__ = 412;
            if (as_bool(logical_gt(T,1))) {

                current_statement_begin__ = 413;
                if (as_bool(logical_eq(use_ar,1))) {

                    current_statement_begin__ = 418;
                    for (int t = 1; t <= T; ++t) {

                        current_statement_begin__ = 420;
                        if (as_bool(logical_eq(t,1))) {

                            current_statement_begin__ = 421;
                            stan::math::assign(get_base1_lhs(L_tp1,t,"L_tp1",1), add(L_full,multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_min_max(1, num_legis), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "legis_pred"),legis_x)));
                        } else {

                            current_statement_begin__ = 423;
                            stan::math::assign(get_base1_lhs(L_tp1,t,"L_tp1",1), add(add(add(L_full,elt_multiply(L_AR1,get_base1(L_tp1,(t - 1),"L_tp1",1))),multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_min_max(1, num_legis), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "legis_pred"),legis_x)),elt_multiply(time_var,get_base1(L_tp1_var,(t - 1),"L_tp1_var",1))));
                        }
                    }
                } else {

                    current_statement_begin__ = 434;
                    for (int t = 1; t <= T; ++t) {

                        current_statement_begin__ = 435;
                        if (as_bool(logical_eq(t,1))) {

                            current_statement_begin__ = 436;
                            stan::math::assign(get_base1_lhs(L_tp1,t,"L_tp1",1), add(L_full,multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_min_max(1, num_legis), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "legis_pred"),legis_x)));
                        } else {

                            current_statement_begin__ = 438;
                            if (as_bool(logical_eq(restrict_var,1))) {

                                current_statement_begin__ = 439;
                                stan::math::assign(get_base1_lhs(L_tp1,t,"L_tp1",1), add(add(get_base1(L_tp1,(t - 1),"L_tp1",1),multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_min_max(1, num_legis), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "legis_pred"),legis_x)),elt_multiply(time_var_restrict,get_base1(L_tp1_var,(t - 1),"L_tp1_var",1))));
                            } else {

                                current_statement_begin__ = 441;
                                stan::math::assign(get_base1_lhs(L_tp1,t,"L_tp1",1), add(add(get_base1(L_tp1,(t - 1),"L_tp1",1),multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_min_max(1, num_legis), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "legis_pred"),legis_x)),elt_multiply(time_var,get_base1(L_tp1_var,(t - 1),"L_tp1_var",1))));
                            }
                        }
                    }
                }
            } else {

                current_statement_begin__ = 449;
                stan::math::assign(get_base1_lhs(L_tp1,1,"L_tp1",1), L_full);
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < num_legis; ++i0__) {
                if (stan::math::is_uninitialized(L_full(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: L_full" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < num_legis; ++i0__) {
                if (stan::math::is_uninitialized(L_AR1(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: L_AR1" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < T; ++i0__) {
                for (int i1__ = 0; i1__ < num_legis; ++i1__) {
                    if (stan::math::is_uninitialized(L_tp1[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: L_tp1" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < 1; ++i0__) {
                if (stan::math::is_uninitialized(restrict_low(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: restrict_low" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 372;
            current_statement_begin__ = 373;
            current_statement_begin__ = 374;
            current_statement_begin__ = 375;

            // model body
            {
            current_statement_begin__ = 456;
            validate_non_negative_index("pi1", "N", N);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  pi1(static_cast<Eigen::VectorXd::Index>(N));
            (void) pi1;  // dummy to suppress unused var warning

            stan::math::initialize(pi1, DUMMY_VAR__);
            stan::math::fill(pi1,DUMMY_VAR__);
            current_statement_begin__ = 457;
            validate_non_negative_index("pi2", "N", N);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  pi2(static_cast<Eigen::VectorXd::Index>(N));
            (void) pi2;  // dummy to suppress unused var warning

            stan::math::initialize(pi2, DUMMY_VAR__);
            stan::math::fill(pi2,DUMMY_VAR__);


            current_statement_begin__ = 459;
            lp_accum__.add(normal_log<propto__>(legis_x, 0, 5));
            current_statement_begin__ = 460;
            lp_accum__.add(normal_log<propto__>(legis_x_cons, 0, 5));
            current_statement_begin__ = 462;
            lp_accum__.add(normal_log<propto__>(sigma_abs_x, 0, 5));
            current_statement_begin__ = 463;
            lp_accum__.add(normal_log<propto__>(sigma_reg_x, 0, 5));
            current_statement_begin__ = 464;
            lp_accum__.add(normal_log<propto__>(sigma_abs_x_cons, 0, 5));
            current_statement_begin__ = 465;
            lp_accum__.add(normal_log<propto__>(sigma_reg_x_cons, 0, 5));
            current_statement_begin__ = 466;
            lp_accum__.add(exponential_log<propto__>(extra_sd, 1));
            current_statement_begin__ = 467;
            lp_accum__.add(normal_log<propto__>(ar_fix, 0, 1));
            current_statement_begin__ = 468;
            lp_accum__.add(normal_log<propto__>(L_AR1_free, 0, ar_sd));
            current_statement_begin__ = 470;
            if (as_bool((primitive_value(logical_gt(model_type,2)) && primitive_value(logical_lt(model_type,5))))) {

                current_statement_begin__ = 471;
                for (int i = 1; i <= (m_step - 2); ++i) {

                    current_statement_begin__ = 472;
                    lp_accum__.add(normal_log<propto__>((get_base1(steps_votes,(i + 1),"steps_votes",1) - get_base1(steps_votes,i,"steps_votes",1)), 0, 5));
                }
            } else {

                current_statement_begin__ = 475;
                lp_accum__.add(normal_log<propto__>(steps_votes, 0, 5));
            }
            current_statement_begin__ = 477;
            if (as_bool(logical_eq(T,1))) {

                current_statement_begin__ = 478;
                lp_accum__.add(normal_log<propto__>(L_free, multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(1, (num_legis - num_constrain_l)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "legis_pred"),legis_x), legis_sd));
            } else {

                current_statement_begin__ = 480;
                lp_accum__.add(normal_log<propto__>(L_free, 0, legis_sd));
            }
            current_statement_begin__ = 483;
            for (int t = 1; t <= (T - 1); ++t) {

                current_statement_begin__ = 484;
                lp_accum__.add(normal_log<propto__>(get_base1(L_tp1_var,t,"L_tp1_var",1), 0, 1));
            }
            current_statement_begin__ = 487;
            lp_accum__.add(normal_log<propto__>(B_int_free, 0, diff_reg_sd));
            current_statement_begin__ = 488;
            lp_accum__.add(normal_log<propto__>(A_int_free, 0, diff_abs_sd));
            current_statement_begin__ = 491;
            for (int b = 1; b <= num_bills; ++b) {

                current_statement_begin__ = 492;
                lp_accum__.add(normal_log<propto__>(get_base1(steps_votes_grm,b,"steps_votes_grm",1), 0, 5));
            }
            current_statement_begin__ = 496;
            lp_accum__.add(exponential_log<propto__>(time_var_restrict, (1 / time_sd)));
            current_statement_begin__ = 498;
            lp_accum__.add(exponential_log<propto__>(time_var, (1 / time_sd)));
            current_statement_begin__ = 502;
            if (as_bool((primitive_value(logical_gt(T,1)) && primitive_value(logical_eq(restrict_mean,1))))) {

                current_statement_begin__ = 503;
                lp_accum__.add(normal_log<propto__>(mean(stan::model::rvalue(L_tp1, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(restrict_mean_ind), stan::model::nil_index_list())), "L_tp1")), restrict_mean_val, 0.01));
                current_statement_begin__ = 504;
                lp_accum__.add(jacob_mean_correct);
            }
            current_statement_begin__ = 513;
            if (as_bool(logical_eq(T,1))) {

                current_statement_begin__ = 514;
                lp_accum__.add(normal_log<propto__>(restrict_high, (diff_high + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(num_legis), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "legis_pred"),legis_x_cons)), restrict_sd));
            } else {

                current_statement_begin__ = 518;
                lp_accum__.add(normal_log<propto__>(restrict_high, (diff_high + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(num_legis), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "legis_pred"),legis_x_cons)), restrict_sd));
            }
            current_statement_begin__ = 525;
            lp_accum__.add(normal_log<propto__>(sigma_abs_free, multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(num_bills), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"),sigma_abs_x), discrim_abs_sd));
            current_statement_begin__ = 526;
            lp_accum__.add(normal_log<propto__>(sigma_reg_free, multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(num_bills), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"),sigma_reg_x), discrim_reg_sd));
            current_statement_begin__ = 541;
            if (as_bool(logical_eq(model_type,1))) {

                current_statement_begin__ = 544;
                if (as_bool(logical_eq(T,1))) {

                    current_statement_begin__ = 545;
                    stan::math::assign(pi1, subtract(elt_multiply(stan::model::rvalue(sigma_reg_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_reg_free"),stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full")),stan::model::rvalue(B_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "B_int_free")));
                } else {

                    current_statement_begin__ = 547;
                    for (int n = 1; n <= N; ++n) {

                        current_statement_begin__ = 549;
                        stan::math::assign(get_base1_lhs(pi1,n,"pi1",1), ((get_base1(sigma_reg_free,get_base1(bb,n,"bb",1),"sigma_reg_free",1) * get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2)) - get_base1(B_int_free,get_base1(bb,n,"bb",1),"B_int_free",1)));
                    }
                }
                current_statement_begin__ = 554;
                lp_accum__.add(bernoulli_logit_log<propto__>(Y_new, pi1));
            } else if (as_bool(logical_eq(model_type,2))) {

                current_statement_begin__ = 559;
                if (as_bool(logical_eq(T,1))) {

                    current_statement_begin__ = 560;
                    stan::math::assign(pi1, subtract(elt_multiply(stan::model::rvalue(sigma_reg_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_reg_free"),stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full")),stan::model::rvalue(B_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "B_int_free")));
                    current_statement_begin__ = 561;
                    stan::math::assign(pi2, subtract(elt_multiply(stan::model::rvalue(sigma_abs_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_abs_free"),stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full")),stan::model::rvalue(A_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "A_int_free")));
                } else {

                    current_statement_begin__ = 564;
                    for (int n = 1; n <= N; ++n) {

                        current_statement_begin__ = 566;
                        stan::math::assign(get_base1_lhs(pi1,n,"pi1",1), ((get_base1(sigma_reg_free,get_base1(bb,n,"bb",1),"sigma_reg_free",1) * get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2)) - get_base1(B_int_free,get_base1(bb,n,"bb",1),"B_int_free",1)));
                        current_statement_begin__ = 567;
                        stan::math::assign(get_base1_lhs(pi2,n,"pi2",1), ((get_base1(sigma_abs_free,get_base1(bb,n,"bb",1),"sigma_abs_free",1) * get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2)) - get_base1(A_int_free,get_base1(bb,n,"bb",1),"A_int_free",1)));
                    }
                }
                current_statement_begin__ = 573;
                for (int n = 1; n <= N; ++n) {

                    current_statement_begin__ = 575;
                    if (as_bool(logical_eq(get_base1(absence,n,"absence",1),1))) {

                        current_statement_begin__ = 576;
                        lp_accum__.add(bernoulli_logit_log<propto__>(1, get_base1(pi2,n,"pi2",1)));
                    } else {

                        current_statement_begin__ = 578;
                        lp_accum__.add(bernoulli_logit_log<propto__>(0, get_base1(pi2,n,"pi2",1)));
                        current_statement_begin__ = 579;
                        lp_accum__.add(bernoulli_logit_log<propto__>(get_base1(Y_new,n,"Y_new",1), get_base1(pi1,n,"pi1",1)));
                    }
                }
            } else if (as_bool(logical_eq(model_type,3))) {

                current_statement_begin__ = 586;
                if (as_bool(logical_eq(T,1))) {

                    current_statement_begin__ = 587;
                    stan::math::assign(pi1, subtract(elt_multiply(stan::model::rvalue(sigma_reg_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_reg_free"),stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full")),stan::model::rvalue(B_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "B_int_free")));
                } else {

                    current_statement_begin__ = 589;
                    for (int n = 1; n <= N; ++n) {

                        current_statement_begin__ = 591;
                        stan::math::assign(get_base1_lhs(pi1,n,"pi1",1), ((get_base1(sigma_reg_free,get_base1(bb,n,"bb",1),"sigma_reg_free",1) * get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2)) - get_base1(B_int_free,get_base1(bb,n,"bb",1),"B_int_free",1)));
                    }
                }
                current_statement_begin__ = 596;
                for (int n = 1; n <= N; ++n) {

                    current_statement_begin__ = 597;
                    lp_accum__.add(ordered_logistic_log<propto__>(get_base1(Y_int,n,"Y_int",1), get_base1(pi1,n,"pi1",1), steps_votes));
                }
            } else if (as_bool(logical_eq(model_type,4))) {

                current_statement_begin__ = 605;
                if (as_bool(logical_eq(T,1))) {

                    current_statement_begin__ = 606;
                    stan::math::assign(pi1, subtract(elt_multiply(stan::model::rvalue(sigma_reg_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_reg_free"),stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full")),stan::model::rvalue(B_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "B_int_free")));
                    current_statement_begin__ = 607;
                    stan::math::assign(pi2, subtract(elt_multiply(stan::model::rvalue(sigma_abs_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_abs_free"),stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full")),stan::model::rvalue(A_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "A_int_free")));
                } else {

                    current_statement_begin__ = 610;
                    for (int n = 1; n <= N; ++n) {

                        current_statement_begin__ = 612;
                        stan::math::assign(get_base1_lhs(pi1,n,"pi1",1), ((get_base1(sigma_reg_free,get_base1(bb,n,"bb",1),"sigma_reg_free",1) * get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2)) - get_base1(B_int_free,get_base1(bb,n,"bb",1),"B_int_free",1)));
                        current_statement_begin__ = 613;
                        stan::math::assign(get_base1_lhs(pi2,n,"pi2",1), ((get_base1(sigma_abs_free,get_base1(bb,n,"bb",1),"sigma_abs_free",1) * get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2)) - get_base1(A_int_free,get_base1(bb,n,"bb",1),"A_int_free",1)));
                    }
                }
                current_statement_begin__ = 619;
                for (int n = 1; n <= N; ++n) {

                    current_statement_begin__ = 621;
                    if (as_bool(logical_eq(get_base1(absence,n,"absence",1),1))) {

                        current_statement_begin__ = 622;
                        lp_accum__.add(bernoulli_logit_log<propto__>(1, get_base1(pi2,n,"pi2",1)));
                    } else {

                        current_statement_begin__ = 624;
                        lp_accum__.add(bernoulli_logit_log<propto__>(0, get_base1(pi2,n,"pi2",1)));
                        current_statement_begin__ = 625;
                        lp_accum__.add(ordered_logistic_log<propto__>(get_base1(Y_int,n,"Y_int",1), get_base1(pi1,n,"pi1",1), steps_votes));
                    }
                }
            } else if (as_bool(logical_eq(model_type,5))) {

                current_statement_begin__ = 632;
                if (as_bool(logical_eq(T,1))) {

                    current_statement_begin__ = 633;
                    stan::math::assign(pi1, subtract(elt_multiply(stan::model::rvalue(sigma_reg_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_reg_free"),stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full")),stan::model::rvalue(B_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "B_int_free")));
                } else {

                    current_statement_begin__ = 635;
                    for (int n = 1; n <= N; ++n) {

                        current_statement_begin__ = 637;
                        stan::math::assign(get_base1_lhs(pi1,n,"pi1",1), ((get_base1(sigma_reg_free,get_base1(bb,n,"bb",1),"sigma_reg_free",1) * get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2)) - get_base1(B_int_free,get_base1(bb,n,"bb",1),"B_int_free",1)));
                    }
                }
                current_statement_begin__ = 642;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 643;
                    lp_accum__.add(ordered_logistic_log<propto__>(get_base1(Y_int,n,"Y_int",1), get_base1(pi1,n,"pi1",1), get_base1(steps_votes_grm,get_base1(bb,n,"bb",1),"steps_votes_grm",1)));
                }
            } else if (as_bool(logical_eq(model_type,6))) {

                current_statement_begin__ = 648;
                if (as_bool(logical_eq(T,1))) {

                    current_statement_begin__ = 649;
                    stan::math::assign(pi1, subtract(elt_multiply(stan::model::rvalue(sigma_reg_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_reg_free"),stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full")),stan::model::rvalue(B_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "B_int_free")));
                    current_statement_begin__ = 650;
                    stan::math::assign(pi2, subtract(elt_multiply(stan::model::rvalue(sigma_abs_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_abs_free"),stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full")),stan::model::rvalue(A_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "A_int_free")));
                } else {

                    current_statement_begin__ = 653;
                    for (int n = 1; n <= N; ++n) {

                        current_statement_begin__ = 655;
                        stan::math::assign(get_base1_lhs(pi1,n,"pi1",1), ((get_base1(sigma_reg_free,get_base1(bb,n,"bb",1),"sigma_reg_free",1) * get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2)) - get_base1(B_int_free,get_base1(bb,n,"bb",1),"B_int_free",1)));
                        current_statement_begin__ = 656;
                        stan::math::assign(get_base1_lhs(pi2,n,"pi2",1), ((get_base1(sigma_abs_free,get_base1(bb,n,"bb",1),"sigma_abs_free",1) * get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2)) - get_base1(A_int_free,get_base1(bb,n,"bb",1),"A_int_free",1)));
                    }
                }
                current_statement_begin__ = 662;
                for (int n = 1; n <= N; ++n) {

                    current_statement_begin__ = 664;
                    if (as_bool(logical_eq(get_base1(absence,n,"absence",1),1))) {

                        current_statement_begin__ = 665;
                        lp_accum__.add(bernoulli_logit_log<propto__>(1, get_base1(pi2,n,"pi2",1)));
                    } else {

                        current_statement_begin__ = 667;
                        lp_accum__.add(bernoulli_logit_log<propto__>(0, get_base1(pi2,n,"pi2",1)));
                        current_statement_begin__ = 668;
                        lp_accum__.add(ordered_logistic_log<propto__>(get_base1(Y_int,n,"Y_int",1), get_base1(pi1,n,"pi1",1), get_base1(steps_votes_grm,get_base1(bb,n,"bb",1),"steps_votes_grm",1)));
                    }
                }
            } else if (as_bool(logical_eq(model_type,7))) {

                current_statement_begin__ = 675;
                if (as_bool(logical_eq(T,1))) {

                    current_statement_begin__ = 676;
                    stan::math::assign(pi1, subtract(elt_multiply(stan::model::rvalue(sigma_reg_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_reg_free"),stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full")),stan::model::rvalue(B_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "B_int_free")));
                } else {

                    current_statement_begin__ = 678;
                    for (int n = 1; n <= N; ++n) {

                        current_statement_begin__ = 680;
                        stan::math::assign(get_base1_lhs(pi1,n,"pi1",1), ((get_base1(sigma_reg_free,get_base1(bb,n,"bb",1),"sigma_reg_free",1) * get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2)) - get_base1(B_int_free,get_base1(bb,n,"bb",1),"B_int_free",1)));
                    }
                }
                current_statement_begin__ = 685;
                for (int n = 1; n <= N; ++n) {

                    current_statement_begin__ = 686;
                    lp_accum__.add(poisson_log<propto__>(get_base1(Y_int,n,"Y_int",1), exp(get_base1(pi1,n,"pi1",1))));
                }
            } else if (as_bool(logical_eq(model_type,8))) {

                current_statement_begin__ = 694;
                if (as_bool(logical_eq(T,1))) {

                    current_statement_begin__ = 695;
                    stan::math::assign(pi1, subtract(elt_multiply(stan::model::rvalue(sigma_reg_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_reg_free"),stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full")),stan::model::rvalue(B_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "B_int_free")));
                    current_statement_begin__ = 696;
                    stan::math::assign(pi2, subtract(elt_multiply(stan::model::rvalue(sigma_abs_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_abs_free"),stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full")),stan::model::rvalue(A_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "A_int_free")));
                } else {

                    current_statement_begin__ = 699;
                    for (int n = 1; n <= N; ++n) {

                        current_statement_begin__ = 701;
                        stan::math::assign(get_base1_lhs(pi1,n,"pi1",1), ((get_base1(sigma_reg_free,get_base1(bb,n,"bb",1),"sigma_reg_free",1) * get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2)) - get_base1(B_int_free,get_base1(bb,n,"bb",1),"B_int_free",1)));
                        current_statement_begin__ = 702;
                        stan::math::assign(get_base1_lhs(pi2,n,"pi2",1), ((get_base1(sigma_abs_free,get_base1(bb,n,"bb",1),"sigma_abs_free",1) * get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2)) - get_base1(A_int_free,get_base1(bb,n,"bb",1),"A_int_free",1)));
                    }
                }
                current_statement_begin__ = 708;
                for (int n = 1; n <= N; ++n) {

                    current_statement_begin__ = 710;
                    if (as_bool(logical_eq(get_base1(absence,n,"absence",1),1))) {

                        current_statement_begin__ = 711;
                        lp_accum__.add(bernoulli_logit_log<propto__>(1, get_base1(pi2,n,"pi2",1)));
                    } else {

                        current_statement_begin__ = 713;
                        lp_accum__.add(bernoulli_logit_log<propto__>(0, get_base1(pi2,n,"pi2",1)));
                        current_statement_begin__ = 714;
                        lp_accum__.add(poisson_log<propto__>(get_base1(Y_int,n,"Y_int",1), exp(get_base1(pi1,n,"pi1",1))));
                    }
                }
            } else if (as_bool(logical_eq(model_type,9))) {

                current_statement_begin__ = 721;
                if (as_bool(logical_eq(T,1))) {

                    current_statement_begin__ = 722;
                    stan::math::assign(pi1, subtract(elt_multiply(stan::model::rvalue(sigma_reg_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_reg_free"),stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full")),stan::model::rvalue(B_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "B_int_free")));
                } else {

                    current_statement_begin__ = 724;
                    for (int n = 1; n <= N; ++n) {

                        current_statement_begin__ = 726;
                        stan::math::assign(get_base1_lhs(pi1,n,"pi1",1), ((get_base1(sigma_reg_free,get_base1(bb,n,"bb",1),"sigma_reg_free",1) * get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2)) - get_base1(B_int_free,get_base1(bb,n,"bb",1),"B_int_free",1)));
                    }
                }
                current_statement_begin__ = 731;
                for (int n = 1; n <= N; ++n) {

                    current_statement_begin__ = 732;
                    lp_accum__.add(normal_log<propto__>(get_base1(Y_cont,n,"Y_cont",1), get_base1(pi1,n,"pi1",1), extra_sd));
                }
            } else if (as_bool(logical_eq(model_type,10))) {

                current_statement_begin__ = 740;
                if (as_bool(logical_eq(T,1))) {

                    current_statement_begin__ = 741;
                    stan::math::assign(pi1, subtract(elt_multiply(stan::model::rvalue(sigma_reg_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_reg_free"),stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full")),stan::model::rvalue(B_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "B_int_free")));
                    current_statement_begin__ = 742;
                    stan::math::assign(pi2, subtract(elt_multiply(stan::model::rvalue(sigma_abs_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_abs_free"),stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full")),stan::model::rvalue(A_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "A_int_free")));
                } else {

                    current_statement_begin__ = 745;
                    for (int n = 1; n <= N; ++n) {

                        current_statement_begin__ = 747;
                        stan::math::assign(get_base1_lhs(pi1,n,"pi1",1), ((get_base1(sigma_reg_free,get_base1(bb,n,"bb",1),"sigma_reg_free",1) * get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2)) - get_base1(B_int_free,get_base1(bb,n,"bb",1),"B_int_free",1)));
                        current_statement_begin__ = 748;
                        stan::math::assign(get_base1_lhs(pi2,n,"pi2",1), ((get_base1(sigma_abs_free,get_base1(bb,n,"bb",1),"sigma_abs_free",1) * get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2)) - get_base1(A_int_free,get_base1(bb,n,"bb",1),"A_int_free",1)));
                    }
                }
                current_statement_begin__ = 754;
                for (int n = 1; n <= N; ++n) {

                    current_statement_begin__ = 756;
                    if (as_bool(logical_eq(get_base1(absence,n,"absence",1),1))) {

                        current_statement_begin__ = 757;
                        lp_accum__.add(bernoulli_logit_log<propto__>(1, get_base1(pi2,n,"pi2",1)));
                    } else {

                        current_statement_begin__ = 759;
                        lp_accum__.add(bernoulli_logit_log<propto__>(0, get_base1(pi2,n,"pi2",1)));
                        current_statement_begin__ = 760;
                        lp_accum__.add(normal_log<propto__>(get_base1(Y_cont,n,"Y_cont",1), get_base1(pi1,n,"pi1",1), extra_sd));
                    }
                }
            } else if (as_bool(logical_eq(model_type,11))) {

                current_statement_begin__ = 767;
                if (as_bool(logical_eq(T,1))) {

                    current_statement_begin__ = 768;
                    stan::math::assign(pi1, subtract(elt_multiply(stan::model::rvalue(sigma_reg_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_reg_free"),stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full")),stan::model::rvalue(B_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "B_int_free")));
                } else {

                    current_statement_begin__ = 770;
                    for (int n = 1; n <= N; ++n) {

                        current_statement_begin__ = 772;
                        stan::math::assign(get_base1_lhs(pi1,n,"pi1",1), ((get_base1(sigma_reg_free,get_base1(bb,n,"bb",1),"sigma_reg_free",1) * get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2)) - get_base1(B_int_free,get_base1(bb,n,"bb",1),"B_int_free",1)));
                    }
                }
                current_statement_begin__ = 777;
                for (int n = 1; n <= N; ++n) {

                    current_statement_begin__ = 778;
                    lp_accum__.add(lognormal_log<propto__>(get_base1(Y_cont,n,"Y_cont",1), exp(get_base1(pi1,n,"pi1",1)), extra_sd));
                }
            } else if (as_bool(logical_eq(model_type,12))) {

                current_statement_begin__ = 784;
                if (as_bool(logical_eq(T,1))) {

                    current_statement_begin__ = 785;
                    stan::math::assign(pi1, subtract(elt_multiply(stan::model::rvalue(sigma_reg_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_reg_free"),stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full")),stan::model::rvalue(B_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "B_int_free")));
                    current_statement_begin__ = 786;
                    stan::math::assign(pi2, subtract(elt_multiply(stan::model::rvalue(sigma_abs_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_abs_free"),stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full")),stan::model::rvalue(A_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "A_int_free")));
                } else {

                    current_statement_begin__ = 789;
                    for (int n = 1; n <= N; ++n) {

                        current_statement_begin__ = 791;
                        stan::math::assign(get_base1_lhs(pi1,n,"pi1",1), ((get_base1(sigma_reg_free,get_base1(bb,n,"bb",1),"sigma_reg_free",1) * get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2)) - get_base1(B_int_free,get_base1(bb,n,"bb",1),"B_int_free",1)));
                        current_statement_begin__ = 792;
                        stan::math::assign(get_base1_lhs(pi2,n,"pi2",1), ((get_base1(sigma_abs_free,get_base1(bb,n,"bb",1),"sigma_abs_free",1) * get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2)) - get_base1(A_int_free,get_base1(bb,n,"bb",1),"A_int_free",1)));
                    }
                }
                current_statement_begin__ = 798;
                for (int n = 1; n <= N; ++n) {

                    current_statement_begin__ = 800;
                    if (as_bool(logical_eq(get_base1(absence,n,"absence",1),1))) {

                        current_statement_begin__ = 801;
                        lp_accum__.add(bernoulli_logit_log<propto__>(1, get_base1(pi2,n,"pi2",1)));
                    } else {

                        current_statement_begin__ = 803;
                        lp_accum__.add(bernoulli_logit_log<propto__>(0, get_base1(pi2,n,"pi2",1)));
                        current_statement_begin__ = 804;
                        lp_accum__.add(lognormal_log<propto__>(get_base1(Y_cont,n,"Y_cont",1), exp(get_base1(pi1,n,"pi1",1)), extra_sd));
                    }
                }
            } else if (as_bool(logical_eq(model_type,13))) {

                current_statement_begin__ = 810;
                if (as_bool(logical_eq(T,1))) {

                    current_statement_begin__ = 811;
                    stan::math::assign(pi1, subtract(add(stan::model::rvalue(sigma_reg_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_reg_free"),stan::model::rvalue(sigma_abs_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "sigma_abs_free")),multiply(get_base1(A_int_free,1,"A_int_free",1),square(subtract(stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full"),stan::model::rvalue(B_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "B_int_free"))))));
                } else {

                    current_statement_begin__ = 813;
                    for (int n = 1; n <= N; ++n) {

                        current_statement_begin__ = 815;
                        stan::math::assign(get_base1_lhs(pi1,n,"pi1",1), ((get_base1(sigma_reg_free,get_base1(bb,n,"bb",1),"sigma_reg_free",1) + get_base1(sigma_abs_free,get_base1(bb,n,"bb",1),"sigma_abs_free",1)) - (get_base1(A_int_free,1,"A_int_free",1) * square((get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2) - get_base1(B_int_free,get_base1(bb,n,"bb",1),"B_int_free",1))))));
                    }
                }
                current_statement_begin__ = 820;
                if (pstream__) {
                    stan_print(pstream__,stan::model::rvalue(pi1, stan::model::cons_list(stan::model::index_min_max(1, 10), stan::model::nil_index_list()), "pi1"));
                    *pstream__ << std::endl;
                }
                current_statement_begin__ = 821;
                lp_accum__.add(bernoulli_logit_log<propto__>(Y_new, pi1));
            } else if (as_bool(logical_eq(model_type,14))) {

                current_statement_begin__ = 825;
                if (as_bool(logical_eq(T,1))) {

                    current_statement_begin__ = 826;
                    stan::math::assign(pi1, multiply(get_base1(sigma_reg_free,1,"sigma_reg_free",1),square(subtract(stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full"),stan::model::rvalue(B_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "B_int_free")))));
                    current_statement_begin__ = 827;
                    stan::math::assign(pi2, multiply(get_base1(sigma_abs_free,1,"sigma_abs_free",1),square(subtract(stan::model::rvalue(L_full, stan::model::cons_list(stan::model::index_multi(ll), stan::model::nil_index_list()), "L_full"),stan::model::rvalue(A_int_free, stan::model::cons_list(stan::model::index_multi(bb), stan::model::nil_index_list()), "A_int_free")))));
                } else {

                    current_statement_begin__ = 829;
                    for (int n = 1; n <= N; ++n) {

                        current_statement_begin__ = 831;
                        stan::math::assign(get_base1_lhs(pi1,n,"pi1",1), (get_base1(sigma_reg_free,1,"sigma_reg_free",1) * square((get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2) - get_base1(B_int_free,get_base1(bb,n,"bb",1),"B_int_free",1)))));
                        current_statement_begin__ = 832;
                        stan::math::assign(get_base1_lhs(pi2,n,"pi2",1), (get_base1(sigma_abs_free,1,"sigma_abs_free",1) * square((get_base1(get_base1(L_tp1,get_base1(time,n,"time",1),"L_tp1",1),get_base1(ll,n,"ll",1),"L_tp1",2) - get_base1(A_int_free,get_base1(bb,n,"bb",1),"A_int_free",1)))));
                    }
                }
                current_statement_begin__ = 837;
                for (int n = 1; n <= N; ++n) {

                    current_statement_begin__ = 839;
                    if (as_bool(logical_eq(get_base1(absence,n,"absence",1),1))) {

                        current_statement_begin__ = 840;
                        lp_accum__.add(bernoulli_logit_log<propto__>(1, get_base1(pi2,n,"pi2",1)));
                    } else {

                        current_statement_begin__ = 842;
                        lp_accum__.add(bernoulli_logit_log<propto__>(0, get_base1(pi2,n,"pi2",1)));
                        current_statement_begin__ = 843;
                        lp_accum__.add(bernoulli_logit_log<propto__>(get_base1(Y_new,n,"Y_new",1), get_base1(pi1,n,"pi1",1)));
                    }
                }
            }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma_abs_free");
        names__.push_back("L_free");
        names__.push_back("L_tp1_var");
        names__.push_back("L_AR1_free");
        names__.push_back("sigma_reg_free");
        names__.push_back("restrict_high");
        names__.push_back("legis_x");
        names__.push_back("sigma_reg_x");
        names__.push_back("sigma_abs_x");
        names__.push_back("legis_x_cons");
        names__.push_back("sigma_reg_x_cons");
        names__.push_back("sigma_abs_x_cons");
        names__.push_back("B_int_free");
        names__.push_back("A_int_free");
        names__.push_back("steps_votes");
        names__.push_back("steps_votes_grm");
        names__.push_back("extra_sd");
        names__.push_back("ar_fix");
        names__.push_back("time_var");
        names__.push_back("time_var_restrict");
        names__.push_back("L_full");
        names__.push_back("L_AR1");
        names__.push_back("L_tp1");
        names__.push_back("restrict_low");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(num_bills);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((num_legis - 2));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((T - 1));
        dims__.push_back(num_legis);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((num_legis - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_bills);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(LX);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(SRX);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(SAX);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(LX);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(SRX);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(SAX);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_bills);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_bills);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((m_step - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_bills);
        dims__.push_back((m_step - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_legis);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_legis);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_legis);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_legis);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(num_legis);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(1);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_irt_standard_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d sigma_abs_free = in__.vector_constrain(num_bills);
        vector_d L_free = in__.vector_constrain((num_legis - 2));
        vector<vector_d> L_tp1_var;
        size_t dim_L_tp1_var_0__ = (T - 1);
        for (size_t k_0__ = 0; k_0__ < dim_L_tp1_var_0__; ++k_0__) {
            L_tp1_var.push_back(in__.vector_constrain(num_legis));
        }
        vector_d L_AR1_free = in__.vector_lub_constrain(-(0.98999999999999999),0.98999999999999999,(num_legis - 1));
        vector_d sigma_reg_free = in__.vector_constrain(num_bills);
        vector_d restrict_high = in__.vector_constrain(1);
        vector_d legis_x = in__.vector_constrain(LX);
        vector_d sigma_reg_x = in__.vector_constrain(SRX);
        vector_d sigma_abs_x = in__.vector_constrain(SAX);
        vector_d legis_x_cons = in__.vector_constrain(LX);
        vector_d sigma_reg_x_cons = in__.vector_constrain(SRX);
        vector_d sigma_abs_x_cons = in__.vector_constrain(SAX);
        vector_d B_int_free = in__.vector_constrain(num_bills);
        vector_d A_int_free = in__.vector_constrain(num_bills);
        vector_d steps_votes = in__.ordered_constrain((m_step - 1));
        vector<vector_d> steps_votes_grm;
        size_t dim_steps_votes_grm_0__ = num_bills;
        for (size_t k_0__ = 0; k_0__ < dim_steps_votes_grm_0__; ++k_0__) {
            steps_votes_grm.push_back(in__.ordered_constrain((m_step - 1)));
        }
        double extra_sd = in__.scalar_lb_constrain(0);
        double ar_fix = in__.scalar_lub_constrain(-(0.90000000000000002),0.90000000000000002);
        vector_d time_var = in__.vector_lb_constrain(0,num_legis);
        vector_d time_var_restrict = in__.vector_lub_constrain(0,restrict_var_high,num_legis);
            for (int k_0__ = 0; k_0__ < num_bills; ++k_0__) {
            vars__.push_back(sigma_abs_free[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (num_legis - 2); ++k_0__) {
            vars__.push_back(L_free[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < num_legis; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (T - 1); ++k_0__) {
                vars__.push_back(L_tp1_var[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < (num_legis - 1); ++k_0__) {
            vars__.push_back(L_AR1_free[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < num_bills; ++k_0__) {
            vars__.push_back(sigma_reg_free[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < 1; ++k_0__) {
            vars__.push_back(restrict_high[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < LX; ++k_0__) {
            vars__.push_back(legis_x[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < SRX; ++k_0__) {
            vars__.push_back(sigma_reg_x[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < SAX; ++k_0__) {
            vars__.push_back(sigma_abs_x[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < LX; ++k_0__) {
            vars__.push_back(legis_x_cons[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < SRX; ++k_0__) {
            vars__.push_back(sigma_reg_x_cons[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < SAX; ++k_0__) {
            vars__.push_back(sigma_abs_x_cons[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < num_bills; ++k_0__) {
            vars__.push_back(B_int_free[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < num_bills; ++k_0__) {
            vars__.push_back(A_int_free[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (m_step - 1); ++k_0__) {
            vars__.push_back(steps_votes[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < (m_step - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < num_bills; ++k_0__) {
                vars__.push_back(steps_votes_grm[k_0__][k_1__]);
                }
            }
        vars__.push_back(extra_sd);
        vars__.push_back(ar_fix);
            for (int k_0__ = 0; k_0__ < num_legis; ++k_0__) {
            vars__.push_back(time_var[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < num_legis; ++k_0__) {
            vars__.push_back(time_var_restrict[k_0__]);
            }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 372;
            validate_non_negative_index("L_full", "num_legis", num_legis);
            vector_d L_full(static_cast<Eigen::VectorXd::Index>(num_legis));
            (void) L_full;  // dummy to suppress unused var warning

            stan::math::initialize(L_full, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(L_full,DUMMY_VAR__);
            current_statement_begin__ = 373;
            validate_non_negative_index("L_AR1", "num_legis", num_legis);
            vector_d L_AR1(static_cast<Eigen::VectorXd::Index>(num_legis));
            (void) L_AR1;  // dummy to suppress unused var warning

            stan::math::initialize(L_AR1, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(L_AR1,DUMMY_VAR__);
            current_statement_begin__ = 374;
            validate_non_negative_index("L_tp1", "num_legis", num_legis);
            validate_non_negative_index("L_tp1", "T", T);
            vector<vector_d> L_tp1(T, (vector_d(static_cast<Eigen::VectorXd::Index>(num_legis))));
            stan::math::initialize(L_tp1, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(L_tp1,DUMMY_VAR__);
            current_statement_begin__ = 375;
            validate_non_negative_index("restrict_low", "1", 1);
            vector_d restrict_low(static_cast<Eigen::VectorXd::Index>(1));
            (void) restrict_low;  // dummy to suppress unused var warning

            stan::math::initialize(restrict_low, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(restrict_low,DUMMY_VAR__);


            current_statement_begin__ = 378;
            stan::math::assign(restrict_low, subtract(restrict_high,diff));
            current_statement_begin__ = 380;
            stan::math::assign(L_AR1, append_row(L_AR1_free,ar_fix));
            current_statement_begin__ = 384;
            if (as_bool(logical_eq(num_legis,2))) {

                current_statement_begin__ = 385;
                if (as_bool(logical_gt(T,1))) {

                    current_statement_begin__ = 386;
                    if (as_bool(logical_eq(use_ar,1))) {

                        current_statement_begin__ = 387;
                        stan::math::assign(L_full, append_row(L_free,restrict_high));
                    } else {

                        current_statement_begin__ = 389;
                        stan::math::assign(L_full, append_row(restrict_low,restrict_high));
                    }
                } else {

                    current_statement_begin__ = 392;
                    stan::math::assign(L_full, append_row(restrict_low,restrict_high));
                }
            } else {

                current_statement_begin__ = 397;
                if (as_bool(logical_gt(T,1))) {

                    current_statement_begin__ = 398;
                    if (as_bool(logical_eq(use_ar,1))) {

                        current_statement_begin__ = 399;
                        stan::math::assign(L_full, append_row(L_free,append_row(restrict_low,restrict_high)));
                    } else {

                        current_statement_begin__ = 401;
                        stan::math::assign(L_full, append_row(L_free,append_row(restrict_low,restrict_high)));
                    }
                } else {

                    current_statement_begin__ = 406;
                    stan::math::assign(L_full, append_row(L_free,append_row(restrict_low,restrict_high)));
                }
            }
            current_statement_begin__ = 412;
            if (as_bool(logical_gt(T,1))) {

                current_statement_begin__ = 413;
                if (as_bool(logical_eq(use_ar,1))) {

                    current_statement_begin__ = 418;
                    for (int t = 1; t <= T; ++t) {

                        current_statement_begin__ = 420;
                        if (as_bool(logical_eq(t,1))) {

                            current_statement_begin__ = 421;
                            stan::math::assign(get_base1_lhs(L_tp1,t,"L_tp1",1), add(L_full,multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_min_max(1, num_legis), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "legis_pred"),legis_x)));
                        } else {

                            current_statement_begin__ = 423;
                            stan::math::assign(get_base1_lhs(L_tp1,t,"L_tp1",1), add(add(add(L_full,elt_multiply(L_AR1,get_base1(L_tp1,(t - 1),"L_tp1",1))),multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_min_max(1, num_legis), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "legis_pred"),legis_x)),elt_multiply(time_var,get_base1(L_tp1_var,(t - 1),"L_tp1_var",1))));
                        }
                    }
                } else {

                    current_statement_begin__ = 434;
                    for (int t = 1; t <= T; ++t) {

                        current_statement_begin__ = 435;
                        if (as_bool(logical_eq(t,1))) {

                            current_statement_begin__ = 436;
                            stan::math::assign(get_base1_lhs(L_tp1,t,"L_tp1",1), add(L_full,multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_min_max(1, num_legis), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "legis_pred"),legis_x)));
                        } else {

                            current_statement_begin__ = 438;
                            if (as_bool(logical_eq(restrict_var,1))) {

                                current_statement_begin__ = 439;
                                stan::math::assign(get_base1_lhs(L_tp1,t,"L_tp1",1), add(add(get_base1(L_tp1,(t - 1),"L_tp1",1),multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_min_max(1, num_legis), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "legis_pred"),legis_x)),elt_multiply(time_var_restrict,get_base1(L_tp1_var,(t - 1),"L_tp1_var",1))));
                            } else {

                                current_statement_begin__ = 441;
                                stan::math::assign(get_base1_lhs(L_tp1,t,"L_tp1",1), add(add(get_base1(L_tp1,(t - 1),"L_tp1",1),multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_min_max(1, num_legis), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list()))), "legis_pred"),legis_x)),elt_multiply(time_var,get_base1(L_tp1_var,(t - 1),"L_tp1_var",1))));
                            }
                        }
                    }
                }
            } else {

                current_statement_begin__ = 449;
                stan::math::assign(get_base1_lhs(L_tp1,1,"L_tp1",1), L_full);
            }

            // validate transformed parameters
            current_statement_begin__ = 372;
            current_statement_begin__ = 373;
            current_statement_begin__ = 374;
            current_statement_begin__ = 375;

            // write transformed parameters
            for (int k_0__ = 0; k_0__ < num_legis; ++k_0__) {
            vars__.push_back(L_full[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < num_legis; ++k_0__) {
            vars__.push_back(L_AR1[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < num_legis; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(L_tp1[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < 1; ++k_0__) {
            vars__.push_back(restrict_low[k_0__]);
            }

            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_irt_standard";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= num_bills; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_abs_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (num_legis - 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= num_legis; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (T - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_tp1_var" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= (num_legis - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_AR1_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= num_bills; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_reg_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "restrict_high" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= LX; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "legis_x" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= SRX; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_reg_x" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= SAX; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_abs_x" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= LX; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "legis_x_cons" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= SRX; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_reg_x_cons" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= SAX; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_abs_x_cons" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= num_bills; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B_int_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= num_bills; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "A_int_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (m_step - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "steps_votes" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (m_step - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= num_bills; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "steps_votes_grm" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "extra_sd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ar_fix";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= num_legis; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "time_var" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= num_legis; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "time_var_restrict" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= num_legis; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_full" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= num_legis; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_AR1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= num_legis; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_tp1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "restrict_low" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= num_bills; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_abs_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (num_legis - 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= num_legis; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (T - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_tp1_var" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= (num_legis - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_AR1_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= num_bills; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_reg_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "restrict_high" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= LX; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "legis_x" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= SRX; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_reg_x" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= SAX; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_abs_x" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= LX; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "legis_x_cons" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= SRX; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_reg_x_cons" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= SAX; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_abs_x_cons" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= num_bills; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B_int_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= num_bills; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "A_int_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (m_step - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "steps_votes" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (m_step - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= num_bills; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "steps_votes_grm" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "extra_sd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ar_fix";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= num_legis; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "time_var" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= num_legis; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "time_var_restrict" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= num_legis; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_full" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= num_legis; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_AR1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= num_legis; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_tp1" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "restrict_low" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }

}; // model

}

typedef model_irt_standard_namespace::model_irt_standard stan_model;


#endif
