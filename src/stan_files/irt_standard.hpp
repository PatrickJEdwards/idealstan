/*
    idealstanv2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    idealstanv2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with idealstanv2.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1

#include <stan/model/model_header.hpp>

namespace model_irt_standard_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_irt_standard");
    reader.add_event(1, 1, "include", "/chunks/license.stan");
    reader.add_event(1, 0, "start", "/chunks/license.stan");
    reader.add_event(15, 14, "end", "/chunks/license.stan");
    reader.add_event(15, 2, "restart", "model_irt_standard");
    reader.add_event(17, 4, "include", "/chunks/stationary_functions.stan");
    reader.add_event(17, 0, "start", "/chunks/stationary_functions.stan");
    reader.add_event(141, 124, "end", "/chunks/stationary_functions.stan");
    reader.add_event(141, 5, "restart", "model_irt_standard");
    reader.add_event(141, 5, "include", "/chunks/jacobians.stan");
    reader.add_event(141, 0, "start", "/chunks/jacobians.stan");
    reader.add_event(165, 24, "end", "/chunks/jacobians.stan");
    reader.add_event(165, 6, "restart", "model_irt_standard");
    reader.add_event(165, 6, "include", "/chunks/calc_rlnorm_gp.stan");
    reader.add_event(165, 0, "start", "/chunks/calc_rlnorm_gp.stan");
    reader.add_event(186, 21, "end", "/chunks/calc_rlnorm_gp.stan");
    reader.add_event(186, 7, "restart", "model_irt_standard");
    reader.add_event(186, 7, "include", "/chunks/id_params.stan");
    reader.add_event(186, 0, "start", "/chunks/id_params.stan");
    reader.add_event(253, 67, "end", "/chunks/id_params.stan");
    reader.add_event(253, 8, "restart", "model_irt_standard");
    reader.add_event(253, 8, "include", "/chunks/r_in.stan");
    reader.add_event(253, 0, "start", "/chunks/r_in.stan");
    reader.add_event(264, 11, "end", "/chunks/r_in.stan");
    reader.add_event(264, 9, "restart", "model_irt_standard");
    reader.add_event(264, 9, "include", "/chunks/map_rect.stan");
    reader.add_event(264, 0, "start", "/chunks/map_rect.stan");
    reader.add_event(455, 191, "include", "/chunks/map_reconstruct_ord.stan");
    reader.add_event(455, 0, "start", "/chunks/map_reconstruct_ord.stan");
    reader.add_event(548, 93, "end", "/chunks/map_reconstruct_ord.stan");
    reader.add_event(548, 192, "restart", "/chunks/map_rect.stan");
    reader.add_event(616, 260, "include", "/chunks/fix_priors_maprect.stan");
    reader.add_event(616, 0, "start", "/chunks/fix_priors_maprect.stan");
    reader.add_event(650, 34, "end", "/chunks/fix_priors_maprect.stan");
    reader.add_event(650, 261, "restart", "/chunks/map_rect.stan");
    reader.add_event(655, 266, "include", "/chunks/model_types_mm_map_persons.stan");
    reader.add_event(655, 0, "start", "/chunks/model_types_mm_map_persons.stan");
    reader.add_event(1394, 739, "end", "/chunks/model_types_mm_map_persons.stan");
    reader.add_event(1394, 267, "restart", "/chunks/map_rect.stan");
    reader.add_event(1396, 269, "include", "/chunks/model_types_mm_map_items.stan");
    reader.add_event(1396, 0, "start", "/chunks/model_types_mm_map_items.stan");
    reader.add_event(2131, 735, "end", "/chunks/model_types_mm_map_items.stan");
    reader.add_event(2131, 270, "restart", "/chunks/map_rect.stan");
    reader.add_event(2139, 278, "end", "/chunks/map_rect.stan");
    reader.add_event(2139, 10, "restart", "model_irt_standard");
    reader.add_event(2279, 150, "include", "/chunks/create_constrained.stan");
    reader.add_event(2279, 0, "start", "/chunks/create_constrained.stan");
    reader.add_event(2302, 23, "end", "/chunks/create_constrained.stan");
    reader.add_event(2302, 151, "restart", "model_irt_standard");
    reader.add_event(2378, 227, "include", "/chunks/l_hier_ar1_prior.stan");
    reader.add_event(2378, 0, "start", "/chunks/l_hier_ar1_prior.stan");
    reader.add_event(2391, 13, "end", "/chunks/l_hier_ar1_prior.stan");
    reader.add_event(2391, 228, "restart", "model_irt_standard");
    reader.add_event(2393, 230, "include", "/chunks/l_hier_prior.stan");
    reader.add_event(2393, 0, "start", "/chunks/l_hier_prior.stan");
    reader.add_event(2405, 12, "end", "/chunks/l_hier_prior.stan");
    reader.add_event(2405, 231, "restart", "model_irt_standard");
    reader.add_event(2422, 248, "include", "/chunks/map_build_params.stan");
    reader.add_event(2422, 0, "start", "/chunks/map_build_params.stan");
    reader.add_event(2630, 208, "end", "/chunks/map_build_params.stan");
    reader.add_event(2630, 249, "restart", "model_irt_standard");
    reader.add_event(2645, 264, "include", "/chunks/ord_steps_calc.stan");
    reader.add_event(2645, 0, "start", "/chunks/ord_steps_calc.stan");
    reader.add_event(2716, 71, "end", "/chunks/ord_steps_calc.stan");
    reader.add_event(2716, 265, "restart", "model_irt_standard");
    reader.add_event(2769, 318, "include", "/chunks/fix_priors.stan");
    reader.add_event(2769, 0, "start", "/chunks/fix_priors.stan");
    reader.add_event(2808, 39, "end", "/chunks/fix_priors.stan");
    reader.add_event(2808, 319, "restart", "model_irt_standard");
    reader.add_event(2817, 328, "include", "/chunks/model_types_mm.stan");
    reader.add_event(2817, 0, "start", "/chunks/model_types_mm.stan");
    reader.add_event(3541, 724, "end", "/chunks/model_types_mm.stan");
    reader.add_event(3541, 329, "restart", "model_irt_standard");
    reader.add_event(3562, 348, "end", "model_irt_standard");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
pacf_to_acf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 26;
        validate_non_negative_index("y", "num_elements(x)", num_elements(x));
        validate_non_negative_index("y", "num_elements(x)", num_elements(x));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> y(num_elements(x), num_elements(x));
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);

        current_statement_begin__ = 27;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());


        current_statement_begin__ = 28;
        stan::math::assign(n, num_elements(x));
        current_statement_begin__ = 29;
        stan::math::assign(y, rep_matrix(0.0, n, n));
        current_statement_begin__ = 30;
        for (int k = 1; k <= n; ++k) {

            current_statement_begin__ = 31;
            for (int i = 1; i <= (k - 1); ++i) {

                current_statement_begin__ = 32;
                stan::model::assign(y, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            (get_base1(y, (k - 1), i, "y", 1) + (get_base1(x, k, "x", 1) * get_base1(y, (k - 1), (k - i), "y", 1))), 
                            "assigning variable y");
            }
            current_statement_begin__ = 34;
            stan::model::assign(y, 
                        stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                        get_base1(x, k, "x", 1), 
                        "assigning variable y");
        }
        current_statement_begin__ = 37;
        return stan::math::promote_scalar<fun_return_scalar_t__>(minus(transpose(get_base1(y, n, "y", 1))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pacf_to_acf_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x, std::ostream* pstream__) const {
        return pacf_to_acf(x, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
constrain_stationary(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 49;
        validate_non_negative_index("r", "num_elements(x)", num_elements(x));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> r(num_elements(x));
        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r, DUMMY_VAR__);

        current_statement_begin__ = 50;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());


        current_statement_begin__ = 51;
        stan::math::assign(n, num_elements(x));
        current_statement_begin__ = 53;
        for (int i = 1; i <= n; ++i) {

            current_statement_begin__ = 54;
            stan::model::assign(r, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (get_base1(x, i, "x", 1) / stan::math::sqrt((1.0 + pow(get_base1(x, i, "x", 1), 2)))), 
                        "assigning variable r");
        }
        current_statement_begin__ = 57;
        return stan::math::promote_scalar<fun_return_scalar_t__>(r);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct constrain_stationary_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x, std::ostream* pstream__) const {
        return constrain_stationary(x, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
acf_to_pacf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 72;
        validate_non_negative_index("y", "num_elements(x)", num_elements(x));
        validate_non_negative_index("y", "num_elements(x)", num_elements(x));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> y(num_elements(x), num_elements(x));
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);

        current_statement_begin__ = 73;
        validate_non_negative_index("r", "num_elements(x)", num_elements(x));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> r(num_elements(x));
        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r, DUMMY_VAR__);

        current_statement_begin__ = 74;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());


        current_statement_begin__ = 75;
        stan::math::assign(n, num_elements(x));
        current_statement_begin__ = 76;
        stan::math::assign(y, rep_matrix(0.0, n, n));
        current_statement_begin__ = 77;
        stan::model::assign(y, 
                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                    minus(transpose(x)), 
                    "assigning variable y");
        current_statement_begin__ = 78;
        for (int j = 0; j <= (n - 1); ++j) {
            {
            current_statement_begin__ = 79;
            int k(0);
            (void) k;  // dummy to suppress unused var warning
            stan::math::fill(k, std::numeric_limits<int>::min());


            current_statement_begin__ = 80;
            stan::math::assign(k, (n - j));
            current_statement_begin__ = 81;
            for (int i = 1; i <= (k - 1); ++i) {

                current_statement_begin__ = 82;
                stan::model::assign(y, 
                            stan::model::cons_list(stan::model::index_uni((k - 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            ((get_base1(y, k, i, "y", 1) - (get_base1(y, k, k, "y", 1) * get_base1(y, k, (k - i), "y", 1))) / (1 - pow(get_base1(y, k, k, "y", 1), 2))), 
                            "assigning variable y");
            }
            }
        }
        current_statement_begin__ = 85;
        stan::math::assign(r, diagonal(y));
        current_statement_begin__ = 86;
        return stan::math::promote_scalar<fun_return_scalar_t__>(r);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct acf_to_pacf_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x, std::ostream* pstream__) const {
        return acf_to_pacf(x, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
unconstrain_stationary(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 97;
        validate_non_negative_index("y", "num_elements(x)", num_elements(x));
        validate_non_negative_index("y", "num_elements(x)", num_elements(x));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> y(num_elements(x), num_elements(x));
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);

        current_statement_begin__ = 98;
        validate_non_negative_index("r", "num_elements(x)", num_elements(x));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> r(num_elements(x));
        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r, DUMMY_VAR__);

        current_statement_begin__ = 99;
        validate_non_negative_index("z", "num_elements(x)", num_elements(x));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> z(num_elements(x));
        stan::math::initialize(z, DUMMY_VAR__);
        stan::math::fill(z, DUMMY_VAR__);

        current_statement_begin__ = 100;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());


        current_statement_begin__ = 101;
        stan::math::assign(n, num_elements(x));
        current_statement_begin__ = 103;
        stan::math::assign(r, acf_to_pacf(x, pstream__));
        current_statement_begin__ = 105;
        for (int i = 1; i <= n; ++i) {

            current_statement_begin__ = 106;
            stan::model::assign(z, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (get_base1(r, i, "r", 1) / stan::math::sqrt((1.0 - pow(get_base1(r, i, "r", 1), 2)))), 
                        "assigning variable z");
        }
        current_statement_begin__ = 108;
        return stan::math::promote_scalar<fun_return_scalar_t__>(z);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct unconstrain_stationary_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x, std::ostream* pstream__) const {
        return unconstrain_stationary(x, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
jacobian_stationary(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& r, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 120;
        validate_non_negative_index("l", "num_elements(r)", num_elements(r));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> l(num_elements(r));
        stan::math::initialize(l, DUMMY_VAR__);
        stan::math::fill(l, DUMMY_VAR__);

        current_statement_begin__ = 121;
        validate_non_negative_index("t1", "num_elements(r)", num_elements(r));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> t1(num_elements(r));
        stan::math::initialize(t1, DUMMY_VAR__);
        stan::math::fill(t1, DUMMY_VAR__);

        current_statement_begin__ = 122;
        validate_non_negative_index("t2", "num_elements(r)", num_elements(r));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> t2(num_elements(r));
        stan::math::initialize(t2, DUMMY_VAR__);
        stan::math::fill(t2, DUMMY_VAR__);

        current_statement_begin__ = 123;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());


        current_statement_begin__ = 124;
        stan::math::assign(n, num_elements(r));
        current_statement_begin__ = 126;
        if (as_bool(logical_eq(n, 1))) {

            current_statement_begin__ = 127;
            stan::model::assign(l, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        stan::math::log(1), 
                        "assigning variable l");
        } else {

            current_statement_begin__ = 129;
            for (int i = 1; i <= n; ++i) {

                current_statement_begin__ = 130;
                stan::model::assign(t1, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::log(pow((1 - pow(get_base1(r, i, "r", 1), 2)), divide((i - 1), 2))), 
                            "assigning variable t1");
                current_statement_begin__ = 132;
                stan::model::assign(t2, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (logical_eq(modulus(i, 2), 0) ? stan::math::promote_scalar<local_scalar_t__>(stan::math::log((1 + get_base1(r, i, "r", 1)))) : stan::math::promote_scalar<local_scalar_t__>(0) ), 
                            "assigning variable t2");
            }
        }
        current_statement_begin__ = 136;
        stan::math::assign(l, add(t1, t2));
        current_statement_begin__ = 138;
        return stan::math::promote_scalar<fun_return_scalar_t__>(l);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct jacobian_stationary_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& r, std::ostream* pstream__) const {
        return jacobian_stationary(r, pstream__);
    }
};

template <typename T1__>
typename boost::math::tools::promote_args<T1__>::type
jacob_mean(const int& N,
               const T1__& N_real, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 153;
        validate_non_negative_index("col_vec", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> col_vec(N);
        stan::math::initialize(col_vec, DUMMY_VAR__);
        stan::math::fill(col_vec, DUMMY_VAR__);

        current_statement_begin__ = 154;
        local_scalar_t__ num_div(DUMMY_VAR__);
        (void) num_div;  // dummy to suppress unused var warning
        stan::math::initialize(num_div, DUMMY_VAR__);
        stan::math::fill(num_div, DUMMY_VAR__);

        current_statement_begin__ = 155;
        local_scalar_t__ density(DUMMY_VAR__);
        (void) density;  // dummy to suppress unused var warning
        stan::math::initialize(density, DUMMY_VAR__);
        stan::math::fill(density, DUMMY_VAR__);


        current_statement_begin__ = 157;
        stan::math::assign(num_div, (1 / N_real));
        current_statement_begin__ = 159;
        stan::math::assign(col_vec, rep_vector(num_div, N));
        current_statement_begin__ = 161;
        stan::math::assign(density, sum(stan::math::log(col_vec)));
        current_statement_begin__ = 163;
        return stan::math::promote_scalar<fun_return_scalar_t__>(density);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct jacob_mean_functor__ {
    template <typename T1__>
        typename boost::math::tools::promote_args<T1__>::type
    operator()(const int& N,
               const T1__& N_real, std::ostream* pstream__) const {
        return jacob_mean(N, N_real, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
gp_prior_mean(const std::vector<T0__>& x,
                  const T1__& num_diff,
                  const int& min_length, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 172;
        validate_non_negative_index("diff_elem", "(num_elements(x) - 1)", (num_elements(x) - 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> diff_elem((num_elements(x) - 1));
        stan::math::initialize(diff_elem, DUMMY_VAR__);
        stan::math::fill(diff_elem, DUMMY_VAR__);

        current_statement_begin__ = 173;
        validate_non_negative_index("data_out", "2", 2);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> data_out(2);
        stan::math::initialize(data_out, DUMMY_VAR__);
        stan::math::fill(data_out, DUMMY_VAR__);

        current_statement_begin__ = 174;
        local_scalar_t__ rl_mean(DUMMY_VAR__);
        (void) rl_mean;  // dummy to suppress unused var warning
        stan::math::initialize(rl_mean, DUMMY_VAR__);
        stan::math::fill(rl_mean, DUMMY_VAR__);


        current_statement_begin__ = 177;
        for (int n = 1; n <= (num_elements(x) - 1); ++n) {

            current_statement_begin__ = 178;
            stan::model::assign(diff_elem, 
                        stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                        stan::math::fabs((get_base1(x, (n + 1), "x", 1) - get_base1(x, n, "x", 1))), 
                        "assigning variable diff_elem");
        }
        current_statement_begin__ = 181;
        stan::math::assign(rl_mean, (mean(diff_elem) * num_diff));
        current_statement_begin__ = 183;
        return stan::math::promote_scalar<fun_return_scalar_t__>(transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(stan::math::log(rl_mean)).array())));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct gp_prior_mean_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const std::vector<T0__>& x,
                  const T1__& num_diff,
                  const int& min_length, std::ostream* pstream__) const {
        return gp_prior_mean(x, num_diff, min_length, pstream__);
    }
};

template <typename T0__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
typename boost::math::tools::promote_args<T0__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type
id_params(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& p,
              const int& high,
              const int& low,
              const T3__& fix_high,
              const T4__& fix_low,
              const T5__& sd_fix,
              const T6__& mean_val,
              const T7__& sd_val, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 197;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,num_elements(p));

        current_statement_begin__ = 198;
        local_scalar_t__ prob_dens(DUMMY_VAR__);
        (void) prob_dens;  // dummy to suppress unused var warning
        stan::math::initialize(prob_dens, DUMMY_VAR__);
        stan::math::fill(prob_dens, DUMMY_VAR__);
        stan::math::assign(prob_dens,0);


        current_statement_begin__ = 202;
        if (as_bool(logical_gt(high, low))) {

            current_statement_begin__ = 204;
            if (as_bool(logical_gt(low, 1))) {

                current_statement_begin__ = 205;
                stan::math::assign(prob_dens, (prob_dens + normal_log(stan::model::rvalue(p, stan::model::cons_list(stan::model::index_min_max(1, (low - 1)), stan::model::nil_index_list()), "p"), mean_val, sd_val)));
            }
            current_statement_begin__ = 208;
            stan::math::assign(prob_dens, (prob_dens + normal_log(get_base1(p, low, "p", 1), fix_low, sd_fix)));
            current_statement_begin__ = 210;
            if (as_bool(logical_gt(high, (low + 1)))) {

                current_statement_begin__ = 211;
                stan::math::assign(prob_dens, (prob_dens + normal_log(stan::model::rvalue(p, stan::model::cons_list(stan::model::index_min_max((low + 1), (high - 1)), stan::model::nil_index_list()), "p"), mean_val, sd_val)));
            }
            current_statement_begin__ = 215;
            stan::math::assign(prob_dens, (prob_dens + normal_log(get_base1(p, high, "p", 1), fix_high, sd_fix)));
            current_statement_begin__ = 218;
            if (as_bool(logical_lt(high, N))) {

                current_statement_begin__ = 219;
                stan::math::assign(prob_dens, (prob_dens + normal_log(stan::model::rvalue(p, stan::model::cons_list(stan::model::index_min_max((high + 1), N), stan::model::nil_index_list()), "p"), mean_val, sd_val)));
            }
        } else {

            current_statement_begin__ = 226;
            if (as_bool(logical_gt(high, 1))) {

                current_statement_begin__ = 227;
                stan::math::assign(prob_dens, (prob_dens + normal_log(stan::model::rvalue(p, stan::model::cons_list(stan::model::index_min_max(1, (high - 1)), stan::model::nil_index_list()), "p"), mean_val, sd_val)));
            }
            current_statement_begin__ = 230;
            stan::math::assign(prob_dens, (prob_dens + normal_log(get_base1(p, high, "p", 1), fix_high, sd_fix)));
            current_statement_begin__ = 232;
            if (as_bool(logical_gt(low, (high + 1)))) {

                current_statement_begin__ = 233;
                stan::math::assign(prob_dens, (prob_dens + normal_log(stan::model::rvalue(p, stan::model::cons_list(stan::model::index_min_max((high + 1), (low - 1)), stan::model::nil_index_list()), "p"), mean_val, sd_val)));
            }
            current_statement_begin__ = 237;
            stan::math::assign(prob_dens, (prob_dens + normal_log(get_base1(p, low, "p", 1), fix_low, sd_fix)));
            current_statement_begin__ = 239;
            if (as_bool(logical_lt(low, N))) {

                current_statement_begin__ = 240;
                stan::math::assign(prob_dens, (prob_dens + normal_log(stan::model::rvalue(p, stan::model::cons_list(stan::model::index_min_max((low + 1), N), stan::model::nil_index_list()), "p"), mean_val, sd_val)));
            }
        }
        current_statement_begin__ = 248;
        return stan::math::promote_scalar<fun_return_scalar_t__>(prob_dens);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct id_params_functor__ {
    template <typename T0__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
        typename boost::math::tools::promote_args<T0__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& p,
              const int& high,
              const int& low,
              const T3__& fix_high,
              const T4__& fix_low,
              const T5__& sd_fix,
              const T6__& mean_val,
              const T7__& sd_val, std::ostream* pstream__) const {
        return id_params(p, high, low, fix_high, fix_low, sd_fix, mean_val, sd_val, pstream__);
    }
};

int
r_in(const int& pos,
         const std::vector<int>& pos_var, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 255;
        for (int p = 1; p <= size(pos_var); ++p) {

            current_statement_begin__ = 256;
            if (as_bool(logical_eq(get_base1(pos_var, p, "pos_var", 1), pos))) {

                current_statement_begin__ = 258;
                return stan::math::promote_scalar<fun_return_scalar_t__>(1);
            }
        }
        current_statement_begin__ = 261;
        return stan::math::promote_scalar<fun_return_scalar_t__>(0);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct r_in_functor__ {
            int
    operator()(const int& pos,
         const std::vector<int>& pos_var, std::ostream* pstream__) const {
        return r_in(pos, pos_var, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
overT(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& allparams,
          const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& s_pars,
          const std::vector<T2__>& allcontdata,
          const std::vector<int>& allintdata, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 266;
        int S_type(0);
        (void) S_type;  // dummy to suppress unused var warning
        stan::math::fill(S_type, std::numeric_limits<int>::min());
        stan::math::assign(S_type,get_base1(allintdata, 1, "allintdata", 1));

        current_statement_begin__ = 267;
        int N_cont(0);
        (void) N_cont;  // dummy to suppress unused var warning
        stan::math::fill(N_cont, std::numeric_limits<int>::min());
        stan::math::assign(N_cont,get_base1(allintdata, 2, "allintdata", 1));

        current_statement_begin__ = 268;
        int N_int(0);
        (void) N_int;  // dummy to suppress unused var warning
        stan::math::fill(N_int, std::numeric_limits<int>::min());
        stan::math::assign(N_int,get_base1(allintdata, 3, "allintdata", 1));

        current_statement_begin__ = 269;
        int y_int_miss(0);
        (void) y_int_miss;  // dummy to suppress unused var warning
        stan::math::fill(y_int_miss, std::numeric_limits<int>::min());
        stan::math::assign(y_int_miss,get_base1(allintdata, 4, "allintdata", 1));

        current_statement_begin__ = 270;
        int y_cont_miss(0);
        (void) y_cont_miss;  // dummy to suppress unused var warning
        stan::math::fill(y_cont_miss, std::numeric_limits<int>::min());
        stan::math::assign(y_cont_miss,get_base1(allintdata, 5, "allintdata", 1));

        current_statement_begin__ = 271;
        int num_legis(0);
        (void) num_legis;  // dummy to suppress unused var warning
        stan::math::fill(num_legis, std::numeric_limits<int>::min());
        stan::math::assign(num_legis,get_base1(allintdata, 6, "allintdata", 1));

        current_statement_begin__ = 272;
        int num_bills(0);
        (void) num_bills;  // dummy to suppress unused var warning
        stan::math::fill(num_bills, std::numeric_limits<int>::min());
        stan::math::assign(num_bills,get_base1(allintdata, 7, "allintdata", 1));

        current_statement_begin__ = 273;
        int num_bills_grm(0);
        (void) num_bills_grm;  // dummy to suppress unused var warning
        stan::math::fill(num_bills_grm, std::numeric_limits<int>::min());
        stan::math::assign(num_bills_grm,num_bills);

        current_statement_begin__ = 274;
        int num_ls(0);
        (void) num_ls;  // dummy to suppress unused var warning
        stan::math::fill(num_ls, std::numeric_limits<int>::min());
        stan::math::assign(num_ls,get_base1(allintdata, 8, "allintdata", 1));

        current_statement_begin__ = 275;
        int T(0);
        (void) T;  // dummy to suppress unused var warning
        stan::math::fill(T, std::numeric_limits<int>::min());
        stan::math::assign(T,get_base1(allintdata, 9, "allintdata", 1));

        current_statement_begin__ = 276;
        int mod_count(0);
        (void) mod_count;  // dummy to suppress unused var warning
        stan::math::fill(mod_count, std::numeric_limits<int>::min());
        stan::math::assign(mod_count,get_base1(allintdata, 10, "allintdata", 1));

        current_statement_begin__ = 277;
        int LX(0);
        (void) LX;  // dummy to suppress unused var warning
        stan::math::fill(LX, std::numeric_limits<int>::min());
        stan::math::assign(LX,get_base1(allintdata, 11, "allintdata", 1));

        current_statement_begin__ = 278;
        int SRX(0);
        (void) SRX;  // dummy to suppress unused var warning
        stan::math::fill(SRX, std::numeric_limits<int>::min());
        stan::math::assign(SRX,get_base1(allintdata, 12, "allintdata", 1));

        current_statement_begin__ = 279;
        int SAX(0);
        (void) SAX;  // dummy to suppress unused var warning
        stan::math::fill(SAX, std::numeric_limits<int>::min());
        stan::math::assign(SAX,get_base1(allintdata, 13, "allintdata", 1));

        current_statement_begin__ = 280;
        validate_non_negative_index("n_cats_rat", "8", 8);
        std::vector<int  > n_cats_rat(8, int(0));
        stan::math::fill(n_cats_rat, std::numeric_limits<int>::min());
        stan::math::assign(n_cats_rat,stan::model::rvalue(allintdata, stan::model::cons_list(stan::model::index_min_max(14, 21), stan::model::nil_index_list()), "allintdata"));

        current_statement_begin__ = 281;
        validate_non_negative_index("n_cats_grm", "8", 8);
        std::vector<int  > n_cats_grm(8, int(0));
        stan::math::fill(n_cats_grm, std::numeric_limits<int>::min());
        stan::math::assign(n_cats_grm,stan::model::rvalue(allintdata, stan::model::cons_list(stan::model::index_min_max(22, 29), stan::model::nil_index_list()), "allintdata"));

        current_statement_begin__ = 282;
        int time_proc(0);
        (void) time_proc;  // dummy to suppress unused var warning
        stan::math::fill(time_proc, std::numeric_limits<int>::min());
        stan::math::assign(time_proc,get_base1(allintdata, 31, "allintdata", 1));

        current_statement_begin__ = 283;
        int const_type(0);
        (void) const_type;  // dummy to suppress unused var warning
        stan::math::fill(const_type, std::numeric_limits<int>::min());
        stan::math::assign(const_type,get_base1(allintdata, 32, "allintdata", 1));

        current_statement_begin__ = 284;
        int restrict_high(0);
        (void) restrict_high;  // dummy to suppress unused var warning
        stan::math::fill(restrict_high, std::numeric_limits<int>::min());
        stan::math::assign(restrict_high,get_base1(allintdata, 33, "allintdata", 1));

        current_statement_begin__ = 285;
        int restrict_low(0);
        (void) restrict_low;  // dummy to suppress unused var warning
        stan::math::fill(restrict_low, std::numeric_limits<int>::min());
        stan::math::assign(restrict_low,get_base1(allintdata, 34, "allintdata", 1));

        current_statement_begin__ = 286;
        int fix_high(0);
        (void) fix_high;  // dummy to suppress unused var warning
        stan::math::fill(fix_high, std::numeric_limits<int>::min());
        stan::math::assign(fix_high,get_base1(allintdata, 35, "allintdata", 1));

        current_statement_begin__ = 287;
        int fix_low(0);
        (void) fix_low;  // dummy to suppress unused var warning
        stan::math::fill(fix_low, std::numeric_limits<int>::min());
        stan::math::assign(fix_low,get_base1(allintdata, 36, "allintdata", 1));

        current_statement_begin__ = 290;
        int skip(0);
        (void) skip;  // dummy to suppress unused var warning
        stan::math::fill(skip, std::numeric_limits<int>::min());
        stan::math::assign(skip,36);

        current_statement_begin__ = 291;
        int skip_param(0);
        (void) skip_param;  // dummy to suppress unused var warning
        stan::math::fill(skip_param, std::numeric_limits<int>::min());

        current_statement_begin__ = 295;
        validate_non_negative_index("Y_int", "N_int", N_int);
        std::vector<int  > Y_int(N_int, int(0));
        stan::math::fill(Y_int, std::numeric_limits<int>::min());
        stan::math::assign(Y_int,stan::model::rvalue(allintdata, stan::model::cons_list(stan::model::index_min_max((skip + 1), (N_int + skip)), stan::model::nil_index_list()), "allintdata"));

        current_statement_begin__ = 296;
        validate_non_negative_index("bb", "(S_type ? N_int : 1 )", (S_type ? N_int : 1 ));
        std::vector<int  > bb((S_type ? N_int : 1 ), int(0));
        stan::math::fill(bb, std::numeric_limits<int>::min());

        current_statement_begin__ = 297;
        validate_non_negative_index("ll", "(S_type ? 1 : N_int )", (S_type ? 1 : N_int ));
        std::vector<int  > ll((S_type ? 1 : N_int ), int(0));
        stan::math::fill(ll, std::numeric_limits<int>::min());

        current_statement_begin__ = 298;
        validate_non_negative_index("time", "N_int", N_int);
        std::vector<int  > time(N_int, int(0));
        stan::math::fill(time, std::numeric_limits<int>::min());
        stan::math::assign(time,stan::model::rvalue(allintdata, stan::model::cons_list(stan::model::index_min_max((((2 * N_int) + skip) + 1), ((3 * N_int) + skip)), stan::model::nil_index_list()), "allintdata"));

        current_statement_begin__ = 299;
        validate_non_negative_index("mm", "N_int", N_int);
        std::vector<int  > mm(N_int, int(0));
        stan::math::fill(mm, std::numeric_limits<int>::min());
        stan::math::assign(mm,stan::model::rvalue(allintdata, stan::model::cons_list(stan::model::index_min_max((((3 * N_int) + skip) + 1), ((4 * N_int) + skip)), stan::model::nil_index_list()), "allintdata"));

        current_statement_begin__ = 300;
        validate_non_negative_index("order_cats_rat", "N_int", N_int);
        std::vector<int  > order_cats_rat(N_int, int(0));
        stan::math::fill(order_cats_rat, std::numeric_limits<int>::min());
        stan::math::assign(order_cats_rat,stan::model::rvalue(allintdata, stan::model::cons_list(stan::model::index_min_max((((4 * N_int) + skip) + 1), ((5 * N_int) + skip)), stan::model::nil_index_list()), "allintdata"));

        current_statement_begin__ = 301;
        validate_non_negative_index("order_cats_grm", "N_int", N_int);
        std::vector<int  > order_cats_grm(N_int, int(0));
        stan::math::fill(order_cats_grm, std::numeric_limits<int>::min());
        stan::math::assign(order_cats_grm,stan::model::rvalue(allintdata, stan::model::cons_list(stan::model::index_min_max((((5 * N_int) + skip) + 1), ((6 * N_int) + skip)), stan::model::nil_index_list()), "allintdata"));

        current_statement_begin__ = 302;
        validate_non_negative_index("pad_id", "N_int", N_int);
        std::vector<int  > pad_id(N_int, int(0));
        stan::math::fill(pad_id, std::numeric_limits<int>::min());
        stan::math::assign(pad_id,stan::model::rvalue(allintdata, stan::model::cons_list(stan::model::index_min_max((((6 * N_int) + skip) + 1), ((7 * N_int) + skip)), stan::model::nil_index_list()), "allintdata"));

        current_statement_begin__ = 303;
        validate_non_negative_index("discrete", "N_int", N_int);
        std::vector<int  > discrete(N_int, int(0));
        stan::math::fill(discrete, std::numeric_limits<int>::min());
        stan::math::assign(discrete,stan::model::rvalue(allintdata, stan::model::cons_list(stan::model::index_min_max((((7 * N_int) + skip) + 1), ((8 * N_int) + skip)), stan::model::nil_index_list()), "allintdata"));

        current_statement_begin__ = 307;
        validate_non_negative_index("Y_cont", "N_cont", N_cont);
        std::vector<local_scalar_t__  > Y_cont(N_cont, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(Y_cont, DUMMY_VAR__);
        stan::math::fill(Y_cont, DUMMY_VAR__);
        stan::math::assign(Y_cont,stan::model::rvalue(allcontdata, stan::model::cons_list(stan::model::index_min_max(1, N_cont), stan::model::nil_index_list()), "allcontdata"));

        current_statement_begin__ = 308;
        validate_non_negative_index("legis_pred", "N_cont", N_cont);
        validate_non_negative_index("legis_pred", "LX", LX);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> legis_pred(N_cont, LX);
        stan::math::initialize(legis_pred, DUMMY_VAR__);
        stan::math::fill(legis_pred, DUMMY_VAR__);
        stan::math::assign(legis_pred,to_matrix(stan::model::rvalue(allcontdata, stan::model::cons_list(stan::model::index_min_max((N_cont + 1), ((LX * N_cont) + N_cont)), stan::model::nil_index_list()), "allcontdata"), N_cont, LX));

        current_statement_begin__ = 309;
        validate_non_negative_index("srx_pred", "N_cont", N_cont);
        validate_non_negative_index("srx_pred", "SRX", SRX);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> srx_pred(N_cont, SRX);
        stan::math::initialize(srx_pred, DUMMY_VAR__);
        stan::math::fill(srx_pred, DUMMY_VAR__);
        stan::math::assign(srx_pred,to_matrix(stan::model::rvalue(allcontdata, stan::model::cons_list(stan::model::index_min_max((((LX * N_cont) + N_cont) + 1), (((LX * N_cont) + (SRX * N_cont)) + N_cont)), stan::model::nil_index_list()), "allcontdata"), N_cont, SRX));

        current_statement_begin__ = 310;
        validate_non_negative_index("sax_pred", "N_cont", N_cont);
        validate_non_negative_index("sax_pred", "SAX", SAX);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> sax_pred(N_cont, SAX);
        stan::math::initialize(sax_pred, DUMMY_VAR__);
        stan::math::fill(sax_pred, DUMMY_VAR__);
        stan::math::assign(sax_pred,to_matrix(stan::model::rvalue(allcontdata, stan::model::cons_list(stan::model::index_min_max(((((LX * N_cont) + (SRX * N_cont)) + N_cont) + 1), ((((LX * N_cont) + (SRX * N_cont)) + (SAX * N_cont)) + N_cont)), stan::model::nil_index_list()), "allcontdata"), N_cont, SAX));

        current_statement_begin__ = 311;
        validate_non_negative_index("time_ind", "N_cont", N_cont);
        std::vector<local_scalar_t__  > time_ind(N_cont, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(time_ind, DUMMY_VAR__);
        stan::math::fill(time_ind, DUMMY_VAR__);
        stan::math::assign(time_ind,stan::model::rvalue(allcontdata, stan::model::cons_list(stan::model::index_min_max((((((LX * N_cont) + (SRX * N_cont)) + (SAX * N_cont)) + N_cont) + 1), ((((LX * N_cont) + (SRX * N_cont)) + (SAX * N_cont)) + (2 * N_cont))), stan::model::nil_index_list()), "allcontdata"));

        current_statement_begin__ = 312;
        int cont_skip(0);
        (void) cont_skip;  // dummy to suppress unused var warning
        stan::math::fill(cont_skip, std::numeric_limits<int>::min());
        stan::math::assign(cont_skip,((((LX * N_cont) + (SRX * N_cont)) + (SAX * N_cont)) + (2 * N_cont)));

        current_statement_begin__ = 313;
        local_scalar_t__ ar_sd(DUMMY_VAR__);
        (void) ar_sd;  // dummy to suppress unused var warning
        stan::math::initialize(ar_sd, DUMMY_VAR__);
        stan::math::fill(ar_sd, DUMMY_VAR__);
        stan::math::assign(ar_sd,get_base1(allcontdata, (cont_skip + 1), "allcontdata", 1));

        current_statement_begin__ = 314;
        local_scalar_t__ diff_reg_sd(DUMMY_VAR__);
        (void) diff_reg_sd;  // dummy to suppress unused var warning
        stan::math::initialize(diff_reg_sd, DUMMY_VAR__);
        stan::math::fill(diff_reg_sd, DUMMY_VAR__);
        stan::math::assign(diff_reg_sd,get_base1(allcontdata, (cont_skip + 2), "allcontdata", 1));

        current_statement_begin__ = 315;
        local_scalar_t__ diff_abs_sd(DUMMY_VAR__);
        (void) diff_abs_sd;  // dummy to suppress unused var warning
        stan::math::initialize(diff_abs_sd, DUMMY_VAR__);
        stan::math::fill(diff_abs_sd, DUMMY_VAR__);
        stan::math::assign(diff_abs_sd,get_base1(allcontdata, (cont_skip + 3), "allcontdata", 1));

        current_statement_begin__ = 316;
        local_scalar_t__ discrim_reg_sd(DUMMY_VAR__);
        (void) discrim_reg_sd;  // dummy to suppress unused var warning
        stan::math::initialize(discrim_reg_sd, DUMMY_VAR__);
        stan::math::fill(discrim_reg_sd, DUMMY_VAR__);
        stan::math::assign(discrim_reg_sd,get_base1(allcontdata, (cont_skip + 4), "allcontdata", 1));

        current_statement_begin__ = 317;
        local_scalar_t__ discrim_abs_sd(DUMMY_VAR__);
        (void) discrim_abs_sd;  // dummy to suppress unused var warning
        stan::math::initialize(discrim_abs_sd, DUMMY_VAR__);
        stan::math::fill(discrim_abs_sd, DUMMY_VAR__);
        stan::math::assign(discrim_abs_sd,get_base1(allcontdata, (cont_skip + 5), "allcontdata", 1));

        current_statement_begin__ = 318;
        local_scalar_t__ legis_sd(DUMMY_VAR__);
        (void) legis_sd;  // dummy to suppress unused var warning
        stan::math::initialize(legis_sd, DUMMY_VAR__);
        stan::math::fill(legis_sd, DUMMY_VAR__);
        stan::math::assign(legis_sd,get_base1(allcontdata, (cont_skip + 6), "allcontdata", 1));

        current_statement_begin__ = 319;
        local_scalar_t__ restrict_sd(DUMMY_VAR__);
        (void) restrict_sd;  // dummy to suppress unused var warning
        stan::math::initialize(restrict_sd, DUMMY_VAR__);
        stan::math::fill(restrict_sd, DUMMY_VAR__);
        stan::math::assign(restrict_sd,get_base1(allcontdata, (cont_skip + 7), "allcontdata", 1));

        current_statement_begin__ = 320;
        local_scalar_t__ gp_sd_par(DUMMY_VAR__);
        (void) gp_sd_par;  // dummy to suppress unused var warning
        stan::math::initialize(gp_sd_par, DUMMY_VAR__);
        stan::math::fill(gp_sd_par, DUMMY_VAR__);
        stan::math::assign(gp_sd_par,get_base1(allcontdata, (cont_skip + 8), "allcontdata", 1));

        current_statement_begin__ = 321;
        local_scalar_t__ m_sd_par(DUMMY_VAR__);
        (void) m_sd_par;  // dummy to suppress unused var warning
        stan::math::initialize(m_sd_par, DUMMY_VAR__);
        stan::math::fill(m_sd_par, DUMMY_VAR__);
        stan::math::assign(m_sd_par,get_base1(allcontdata, (cont_skip + 9), "allcontdata", 1));

        current_statement_begin__ = 322;
        local_scalar_t__ num_diff(DUMMY_VAR__);
        (void) num_diff;  // dummy to suppress unused var warning
        stan::math::initialize(num_diff, DUMMY_VAR__);
        stan::math::fill(num_diff, DUMMY_VAR__);
        stan::math::assign(num_diff,get_base1(allcontdata, (cont_skip + 10), "allcontdata", 1));

        current_statement_begin__ = 323;
        local_scalar_t__ min_length(DUMMY_VAR__);
        (void) min_length;  // dummy to suppress unused var warning
        stan::math::initialize(min_length, DUMMY_VAR__);
        stan::math::fill(min_length, DUMMY_VAR__);
        stan::math::assign(min_length,get_base1(allcontdata, (cont_skip + 11), "allcontdata", 1));

        current_statement_begin__ = 329;
        local_scalar_t__ log_prob(DUMMY_VAR__);
        (void) log_prob;  // dummy to suppress unused var warning
        stan::math::initialize(log_prob, DUMMY_VAR__);
        stan::math::fill(log_prob, DUMMY_VAR__);
        stan::math::assign(log_prob,0);

        current_statement_begin__ = 331;
        validate_non_negative_index("L_full", "(S_type ? 1 : num_legis )", (S_type ? 1 : num_legis ));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> L_full((S_type ? 1 : num_legis ));
        stan::math::initialize(L_full, DUMMY_VAR__);
        stan::math::fill(L_full, DUMMY_VAR__);

        current_statement_begin__ = 332;
        validate_non_negative_index("L_tp1", "T", T);
        validate_non_negative_index("L_tp1", "(S_type ? 0 : num_legis )", (S_type ? 0 : num_legis ));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_tp1(T, (S_type ? 0 : num_legis ));
        stan::math::initialize(L_tp1, DUMMY_VAR__);
        stan::math::fill(L_tp1, DUMMY_VAR__);

        current_statement_begin__ = 333;
        validate_non_negative_index("L_tp2", "((primitive_value(S_type) && primitive_value(logical_gt(T, 1))) ? T : 0 )", ((primitive_value(S_type) && primitive_value(logical_gt(T, 1))) ? T : 0 ));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> L_tp2(((primitive_value(S_type) && primitive_value(logical_gt(T, 1))) ? T : 0 ));
        stan::math::initialize(L_tp2, DUMMY_VAR__);
        stan::math::fill(L_tp2, DUMMY_VAR__);

        current_statement_begin__ = 334;
        validate_non_negative_index("L_tp1_var", "((primitive_value(S_type) && primitive_value(logical_gt(T, 1))) ? T : 0 )", ((primitive_value(S_type) && primitive_value(logical_gt(T, 1))) ? T : 0 ));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> L_tp1_var(((primitive_value(S_type) && primitive_value(logical_gt(T, 1))) ? T : 0 ));
        stan::math::initialize(L_tp1_var, DUMMY_VAR__);
        stan::math::fill(L_tp1_var, DUMMY_VAR__);

        current_statement_begin__ = 335;
        validate_non_negative_index("sigma_reg_free", "(S_type ? num_bills : 1 )", (S_type ? num_bills : 1 ));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_reg_free((S_type ? num_bills : 1 ));
        stan::math::initialize(sigma_reg_free, DUMMY_VAR__);
        stan::math::fill(sigma_reg_free, DUMMY_VAR__);

        current_statement_begin__ = 336;
        validate_non_negative_index("sigma_abs_free", "(S_type ? num_bills : 1 )", (S_type ? num_bills : 1 ));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_abs_free((S_type ? num_bills : 1 ));
        stan::math::initialize(sigma_abs_free, DUMMY_VAR__);
        stan::math::fill(sigma_abs_free, DUMMY_VAR__);

        current_statement_begin__ = 337;
        validate_non_negative_index("B_int_free", "(S_type ? num_bills : 1 )", (S_type ? num_bills : 1 ));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B_int_free((S_type ? num_bills : 1 ));
        stan::math::initialize(B_int_free, DUMMY_VAR__);
        stan::math::fill(B_int_free, DUMMY_VAR__);

        current_statement_begin__ = 338;
        validate_non_negative_index("A_int_free", "(S_type ? num_bills : 1 )", (S_type ? num_bills : 1 ));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> A_int_free((S_type ? num_bills : 1 ));
        stan::math::initialize(A_int_free, DUMMY_VAR__);
        stan::math::fill(A_int_free, DUMMY_VAR__);

        current_statement_begin__ = 339;
        validate_non_negative_index("legis_x", "LX", LX);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> legis_x(LX);
        stan::math::initialize(legis_x, DUMMY_VAR__);
        stan::math::fill(legis_x, DUMMY_VAR__);

        current_statement_begin__ = 340;
        validate_non_negative_index("sigma_reg_x", "SRX", SRX);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_reg_x(SRX);
        stan::math::initialize(sigma_reg_x, DUMMY_VAR__);
        stan::math::fill(sigma_reg_x, DUMMY_VAR__);

        current_statement_begin__ = 341;
        validate_non_negative_index("sigma_abs_x", "SAX", SAX);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_abs_x(SAX);
        stan::math::initialize(sigma_abs_x, DUMMY_VAR__);
        stan::math::fill(sigma_abs_x, DUMMY_VAR__);

        current_statement_begin__ = 342;
        validate_non_negative_index("ls_int", "(S_type ? 1 : num_ls )", (S_type ? 1 : num_ls ));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ls_int((S_type ? 1 : num_ls ));
        stan::math::initialize(ls_int, DUMMY_VAR__);
        stan::math::fill(ls_int, DUMMY_VAR__);

        current_statement_begin__ = 343;
        local_scalar_t__ time_var_full(DUMMY_VAR__);
        (void) time_var_full;  // dummy to suppress unused var warning
        stan::math::initialize(time_var_full, DUMMY_VAR__);
        stan::math::fill(time_var_full, DUMMY_VAR__);
        stan::math::assign(time_var_full,0);

        current_statement_begin__ = 344;
        local_scalar_t__ L_AR1(DUMMY_VAR__);
        (void) L_AR1;  // dummy to suppress unused var warning
        stan::math::initialize(L_AR1, DUMMY_VAR__);
        stan::math::fill(L_AR1, DUMMY_VAR__);
        stan::math::assign(L_AR1,0);

        current_statement_begin__ = 345;
        local_scalar_t__ m_sd_full(DUMMY_VAR__);
        (void) m_sd_full;  // dummy to suppress unused var warning
        stan::math::initialize(m_sd_full, DUMMY_VAR__);
        stan::math::fill(m_sd_full, DUMMY_VAR__);
        stan::math::assign(m_sd_full,0);

        current_statement_begin__ = 346;
        local_scalar_t__ gp_sd_full(DUMMY_VAR__);
        (void) gp_sd_full;  // dummy to suppress unused var warning
        stan::math::initialize(gp_sd_full, DUMMY_VAR__);
        stan::math::fill(gp_sd_full, DUMMY_VAR__);
        stan::math::assign(gp_sd_full,0);

        current_statement_begin__ = 347;
        local_scalar_t__ time_var_gp_full(DUMMY_VAR__);
        (void) time_var_gp_full;  // dummy to suppress unused var warning
        stan::math::initialize(time_var_gp_full, DUMMY_VAR__);
        stan::math::fill(time_var_gp_full, DUMMY_VAR__);
        stan::math::assign(time_var_gp_full,0);

        current_statement_begin__ = 351;
        validate_non_negative_index("steps_votes3", "(get_base1(n_cats_rat, 1, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 1, "n_cats_rat", 1) - 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> steps_votes3((get_base1(n_cats_rat, 1, "n_cats_rat", 1) - 1));
        stan::math::initialize(steps_votes3, DUMMY_VAR__);
        stan::math::fill(steps_votes3, DUMMY_VAR__);

        current_statement_begin__ = 352;
        validate_non_negative_index("steps_votes4", "(get_base1(n_cats_rat, 2, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> steps_votes4((get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 1));
        stan::math::initialize(steps_votes4, DUMMY_VAR__);
        stan::math::fill(steps_votes4, DUMMY_VAR__);

        current_statement_begin__ = 353;
        validate_non_negative_index("steps_votes5", "(get_base1(n_cats_rat, 3, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 3, "n_cats_rat", 1) - 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> steps_votes5((get_base1(n_cats_rat, 3, "n_cats_rat", 1) - 1));
        stan::math::initialize(steps_votes5, DUMMY_VAR__);
        stan::math::fill(steps_votes5, DUMMY_VAR__);

        current_statement_begin__ = 354;
        validate_non_negative_index("steps_votes6", "(get_base1(n_cats_rat, 4, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 4, "n_cats_rat", 1) - 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> steps_votes6((get_base1(n_cats_rat, 4, "n_cats_rat", 1) - 1));
        stan::math::initialize(steps_votes6, DUMMY_VAR__);
        stan::math::fill(steps_votes6, DUMMY_VAR__);

        current_statement_begin__ = 355;
        validate_non_negative_index("steps_votes7", "(get_base1(n_cats_rat, 5, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 5, "n_cats_rat", 1) - 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> steps_votes7((get_base1(n_cats_rat, 5, "n_cats_rat", 1) - 1));
        stan::math::initialize(steps_votes7, DUMMY_VAR__);
        stan::math::fill(steps_votes7, DUMMY_VAR__);

        current_statement_begin__ = 356;
        validate_non_negative_index("steps_votes8", "(get_base1(n_cats_rat, 6, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 6, "n_cats_rat", 1) - 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> steps_votes8((get_base1(n_cats_rat, 6, "n_cats_rat", 1) - 1));
        stan::math::initialize(steps_votes8, DUMMY_VAR__);
        stan::math::fill(steps_votes8, DUMMY_VAR__);

        current_statement_begin__ = 357;
        validate_non_negative_index("steps_votes9", "(get_base1(n_cats_rat, 7, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 7, "n_cats_rat", 1) - 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> steps_votes9((get_base1(n_cats_rat, 7, "n_cats_rat", 1) - 1));
        stan::math::initialize(steps_votes9, DUMMY_VAR__);
        stan::math::fill(steps_votes9, DUMMY_VAR__);

        current_statement_begin__ = 358;
        validate_non_negative_index("steps_votes10", "(get_base1(n_cats_rat, 8, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 8, "n_cats_rat", 1) - 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> steps_votes10((get_base1(n_cats_rat, 8, "n_cats_rat", 1) - 1));
        stan::math::initialize(steps_votes10, DUMMY_VAR__);
        stan::math::fill(steps_votes10, DUMMY_VAR__);

        current_statement_begin__ = 359;
        validate_non_negative_index("steps_votes_grm3", "(get_base1(n_cats_grm, 1, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 1, "n_cats_grm", 1) - 1));
        validate_non_negative_index("steps_votes_grm3", "num_bills_grm", num_bills_grm);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > steps_votes_grm3(num_bills_grm, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>((get_base1(n_cats_grm, 1, "n_cats_grm", 1) - 1)));
        stan::math::initialize(steps_votes_grm3, DUMMY_VAR__);
        stan::math::fill(steps_votes_grm3, DUMMY_VAR__);

        current_statement_begin__ = 360;
        validate_non_negative_index("steps_votes_grm4", "(get_base1(n_cats_grm, 2, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 2, "n_cats_grm", 1) - 1));
        validate_non_negative_index("steps_votes_grm4", "num_bills_grm", num_bills_grm);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > steps_votes_grm4(num_bills_grm, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>((get_base1(n_cats_grm, 2, "n_cats_grm", 1) - 1)));
        stan::math::initialize(steps_votes_grm4, DUMMY_VAR__);
        stan::math::fill(steps_votes_grm4, DUMMY_VAR__);

        current_statement_begin__ = 361;
        validate_non_negative_index("steps_votes_grm5", "(get_base1(n_cats_grm, 3, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 3, "n_cats_grm", 1) - 1));
        validate_non_negative_index("steps_votes_grm5", "num_bills_grm", num_bills_grm);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > steps_votes_grm5(num_bills_grm, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>((get_base1(n_cats_grm, 3, "n_cats_grm", 1) - 1)));
        stan::math::initialize(steps_votes_grm5, DUMMY_VAR__);
        stan::math::fill(steps_votes_grm5, DUMMY_VAR__);

        current_statement_begin__ = 362;
        validate_non_negative_index("steps_votes_grm6", "(get_base1(n_cats_grm, 4, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 4, "n_cats_grm", 1) - 1));
        validate_non_negative_index("steps_votes_grm6", "num_bills_grm", num_bills_grm);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > steps_votes_grm6(num_bills_grm, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>((get_base1(n_cats_grm, 4, "n_cats_grm", 1) - 1)));
        stan::math::initialize(steps_votes_grm6, DUMMY_VAR__);
        stan::math::fill(steps_votes_grm6, DUMMY_VAR__);

        current_statement_begin__ = 363;
        validate_non_negative_index("steps_votes_grm7", "(get_base1(n_cats_grm, 5, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 5, "n_cats_grm", 1) - 1));
        validate_non_negative_index("steps_votes_grm7", "num_bills_grm", num_bills_grm);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > steps_votes_grm7(num_bills_grm, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>((get_base1(n_cats_grm, 5, "n_cats_grm", 1) - 1)));
        stan::math::initialize(steps_votes_grm7, DUMMY_VAR__);
        stan::math::fill(steps_votes_grm7, DUMMY_VAR__);

        current_statement_begin__ = 364;
        validate_non_negative_index("steps_votes_grm8", "(get_base1(n_cats_grm, 6, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 6, "n_cats_grm", 1) - 1));
        validate_non_negative_index("steps_votes_grm8", "num_bills_grm", num_bills_grm);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > steps_votes_grm8(num_bills_grm, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>((get_base1(n_cats_grm, 6, "n_cats_grm", 1) - 1)));
        stan::math::initialize(steps_votes_grm8, DUMMY_VAR__);
        stan::math::fill(steps_votes_grm8, DUMMY_VAR__);

        current_statement_begin__ = 365;
        validate_non_negative_index("steps_votes_grm9", "(get_base1(n_cats_grm, 7, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 7, "n_cats_grm", 1) - 1));
        validate_non_negative_index("steps_votes_grm9", "num_bills_grm", num_bills_grm);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > steps_votes_grm9(num_bills_grm, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>((get_base1(n_cats_grm, 7, "n_cats_grm", 1) - 1)));
        stan::math::initialize(steps_votes_grm9, DUMMY_VAR__);
        stan::math::fill(steps_votes_grm9, DUMMY_VAR__);

        current_statement_begin__ = 366;
        validate_non_negative_index("steps_votes_grm10", "(get_base1(n_cats_grm, 8, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 8, "n_cats_grm", 1) - 1));
        validate_non_negative_index("steps_votes_grm10", "num_bills_grm", num_bills_grm);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > steps_votes_grm10(num_bills_grm, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>((get_base1(n_cats_grm, 8, "n_cats_grm", 1) - 1)));
        stan::math::initialize(steps_votes_grm10, DUMMY_VAR__);
        stan::math::fill(steps_votes_grm10, DUMMY_VAR__);

        current_statement_begin__ = 368;
        local_scalar_t__ extra_sd(DUMMY_VAR__);
        (void) extra_sd;  // dummy to suppress unused var warning
        stan::math::initialize(extra_sd, DUMMY_VAR__);
        stan::math::fill(extra_sd, DUMMY_VAR__);

        current_statement_begin__ = 370;
        int skip0(0);
        (void) skip0;  // dummy to suppress unused var warning
        stan::math::fill(skip0, std::numeric_limits<int>::min());


        current_statement_begin__ = 372;
        if (as_bool(logical_eq(S_type, 1))) {

            current_statement_begin__ = 374;
            stan::math::assign(bb, stan::model::rvalue(allintdata, stan::model::cons_list(stan::model::index_min_max(((N_int + skip) + 1), ((2 * N_int) + skip)), stan::model::nil_index_list()), "allintdata"));
            current_statement_begin__ = 375;
            stan::model::assign(ll, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        get_base1(allintdata, 30, "allintdata", 1), 
                        "assigning variable ll");
            current_statement_begin__ = 377;
            if (as_bool(logical_gt(num_ls, 0))) {

                current_statement_begin__ = 378;
                stan::math::assign(num_ls, 1);
                current_statement_begin__ = 379;
                stan::model::assign(ls_int, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            get_base1(s_pars, (T + 1), "s_pars", 1), 
                            "assigning variable ls_int");
            }
            current_statement_begin__ = 382;
            if (as_bool(logical_gt(T, 1))) {

                current_statement_begin__ = 383;
                if (as_bool(logical_eq(time_proc, 2))) {

                    current_statement_begin__ = 384;
                    stan::math::assign(L_full, transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(s_pars, 1, "s_pars", 1)).array())));
                    current_statement_begin__ = 385;
                    stan::math::assign(L_tp1_var, stan::model::rvalue(s_pars, stan::model::cons_list(stan::model::index_min_max(2, (T + 1)), stan::model::nil_index_list()), "s_pars"));
                    current_statement_begin__ = 386;
                    stan::math::assign(time_var_full, get_base1(s_pars, ((T + 2) + num_ls), "s_pars", 1));
                } else if (as_bool(logical_eq(time_proc, 3))) {

                    current_statement_begin__ = 388;
                    stan::math::assign(L_full, transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(s_pars, 1, "s_pars", 1)).array())));
                    current_statement_begin__ = 389;
                    stan::math::assign(L_tp1_var, stan::model::rvalue(s_pars, stan::model::cons_list(stan::model::index_min_max(2, (T + 1)), stan::model::nil_index_list()), "s_pars"));
                    current_statement_begin__ = 390;
                    stan::math::assign(L_AR1, get_base1(s_pars, ((T + 2) + num_ls), "s_pars", 1));
                    current_statement_begin__ = 391;
                    stan::math::assign(time_var_full, get_base1(s_pars, ((T + 3) + num_ls), "s_pars", 1));
                } else if (as_bool(logical_eq(time_proc, 4))) {

                    current_statement_begin__ = 393;
                    stan::math::assign(L_tp2, stan::model::rvalue(s_pars, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::nil_index_list()), "s_pars"));
                    current_statement_begin__ = 394;
                    stan::math::assign(m_sd_full, get_base1(s_pars, ((T + 1) + num_ls), "s_pars", 1));
                    current_statement_begin__ = 395;
                    stan::math::assign(gp_sd_full, get_base1(s_pars, ((T + 2) + num_ls), "s_pars", 1));
                    current_statement_begin__ = 396;
                    stan::math::assign(time_var_gp_full, get_base1(s_pars, ((T + 3) + num_ls), "s_pars", 1));
                }
            } else {

                current_statement_begin__ = 399;
                stan::math::assign(L_full, transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(s_pars, T, "s_pars", 1)).array())));
            }
            current_statement_begin__ = 403;
            stan::math::assign(sigma_reg_free, stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max(1, num_bills), stan::model::nil_index_list()), "allparams"));
            current_statement_begin__ = 404;
            stan::math::assign(B_int_free, stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max((num_bills + 1), (2 * num_bills)), stan::model::nil_index_list()), "allparams"));
            current_statement_begin__ = 405;
            stan::math::assign(sigma_abs_free, stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max(((2 * num_bills) + 1), (3 * num_bills)), stan::model::nil_index_list()), "allparams"));
            current_statement_begin__ = 406;
            stan::math::assign(A_int_free, stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max(((3 * num_bills) + 1), (4 * num_bills)), stan::model::nil_index_list()), "allparams"));
            current_statement_begin__ = 408;
            stan::math::assign(skip_param, (4 * num_bills));
        } else {

            current_statement_begin__ = 413;
            stan::model::assign(bb, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        get_base1(allintdata, 30, "allintdata", 1), 
                        "assigning variable bb");
            current_statement_begin__ = 415;
            stan::math::assign(ll, stan::model::rvalue(allintdata, stan::model::cons_list(stan::model::index_min_max(((N_int + skip) + 1), ((2 * N_int) + skip)), stan::model::nil_index_list()), "allintdata"));
            current_statement_begin__ = 418;
            stan::model::assign(sigma_reg_free, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        get_base1(s_pars, 1, "s_pars", 1), 
                        "assigning variable sigma_reg_free");
            current_statement_begin__ = 419;
            stan::model::assign(B_int_free, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        get_base1(s_pars, 2, "s_pars", 1), 
                        "assigning variable B_int_free");
            current_statement_begin__ = 420;
            stan::model::assign(sigma_abs_free, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        get_base1(s_pars, 3, "s_pars", 1), 
                        "assigning variable sigma_abs_free");
            current_statement_begin__ = 421;
            stan::model::assign(A_int_free, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        get_base1(s_pars, 4, "s_pars", 1), 
                        "assigning variable A_int_free");
            current_statement_begin__ = 425;
            stan::math::assign(log_prob, (log_prob + ((normal_log(B_int_free, 0, diff_reg_sd) + normal_log(A_int_free, 0, diff_abs_sd)) + normal_log(sigma_abs_free, 0, discrim_abs_sd))));
            current_statement_begin__ = 430;
            if (as_bool(logical_eq(T, 1))) {

                current_statement_begin__ = 431;
                stan::math::assign(L_full, stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max(((num_elements(allparams) - num_legis) + 1), num_elements(allparams)), stan::model::nil_index_list()), "allparams"));
            } else {

                current_statement_begin__ = 433;
                stan::math::assign(L_tp1, to_matrix(stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max(((num_elements(allparams) - (T * num_legis)) + 1), num_elements(allparams)), stan::model::nil_index_list()), "allparams"), T, num_legis));
            }
            current_statement_begin__ = 438;
            stan::math::assign(skip_param, 0);
            current_statement_begin__ = 440;
            if (as_bool(logical_gt(num_ls, 0))) {

                current_statement_begin__ = 441;
                stan::math::assign(ls_int, stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max((skip_param + 1), (skip_param + num_ls)), stan::model::nil_index_list()), "allparams"));
            }
        }
        current_statement_begin__ = 447;
        stan::math::assign(legis_x, stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max(((((1 + skip_param) + num_ls) + sum(n_cats_rat)) - 8), ((((skip_param + num_ls) + sum(n_cats_rat)) - 8) + LX)), stan::model::nil_index_list()), "allparams"));
        current_statement_begin__ = 448;
        stan::math::assign(sigma_reg_x, stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max((((((1 + skip_param) + num_ls) + sum(n_cats_rat)) - 8) + LX), (((((skip_param + num_ls) + sum(n_cats_rat)) - 8) + LX) + SRX)), stan::model::nil_index_list()), "allparams"));
        current_statement_begin__ = 449;
        stan::math::assign(sigma_abs_x, stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max(((((((1 + skip_param) + num_ls) + sum(n_cats_rat)) - 8) + LX) + SRX), ((((((skip_param + num_ls) + sum(n_cats_rat)) - 8) + LX) + SRX) + SAX)), stan::model::nil_index_list()), "allparams"));
        current_statement_begin__ = 451;
        stan::math::assign(extra_sd, get_base1(allparams, (((((((skip_param + num_ls) + sum(n_cats_rat)) - 8) + LX) + SRX) + SAX) + 1), "allparams", 1));
        current_statement_begin__ = 454;
        if (as_bool(logical_gt(get_base1(n_cats_rat, 1, "n_cats_rat", 1), 1))) {

            current_statement_begin__ = 455;
            stan::math::assign(steps_votes3, stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max(((skip_param + num_ls) + 1), (((skip_param + num_ls) + get_base1(n_cats_rat, 1, "n_cats_rat", 1)) - 1)), stan::model::nil_index_list()), "allparams"));
        }
        current_statement_begin__ = 458;
        if (as_bool(logical_gt(get_base1(n_cats_rat, 2, "n_cats_rat", 1), 1))) {

            current_statement_begin__ = 459;
            stan::math::assign(steps_votes4, stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max(((((skip_param + num_ls) + get_base1(n_cats_rat, 1, "n_cats_rat", 1)) + 1) - 1), (((skip_param + num_ls) + sum(stan::model::rvalue(n_cats_rat, stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list()), "n_cats_rat"))) - 2)), stan::model::nil_index_list()), "allparams"));
        }
        current_statement_begin__ = 462;
        if (as_bool(logical_gt(get_base1(n_cats_rat, 3, "n_cats_rat", 1), 1))) {

            current_statement_begin__ = 463;
            stan::math::assign(steps_votes5, stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max((((skip_param + num_ls) + sum(stan::model::rvalue(n_cats_rat, stan::model::cons_list(stan::model::index_min_max(1, 2), stan::model::nil_index_list()), "n_cats_rat"))) - 1), (((skip_param + num_ls) + sum(stan::model::rvalue(n_cats_rat, stan::model::cons_list(stan::model::index_min_max(1, 3), stan::model::nil_index_list()), "n_cats_rat"))) - 3)), stan::model::nil_index_list()), "allparams"));
        }
        current_statement_begin__ = 466;
        if (as_bool(logical_gt(get_base1(n_cats_rat, 4, "n_cats_rat", 1), 1))) {

            current_statement_begin__ = 467;
            stan::math::assign(steps_votes6, stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max((((skip_param + num_ls) + sum(stan::model::rvalue(n_cats_rat, stan::model::cons_list(stan::model::index_min_max(1, 3), stan::model::nil_index_list()), "n_cats_rat"))) - 2), (((skip_param + num_ls) + sum(stan::model::rvalue(n_cats_rat, stan::model::cons_list(stan::model::index_min_max(1, 4), stan::model::nil_index_list()), "n_cats_rat"))) - 4)), stan::model::nil_index_list()), "allparams"));
        }
        current_statement_begin__ = 470;
        if (as_bool(logical_gt(get_base1(n_cats_rat, 5, "n_cats_rat", 1), 1))) {

            current_statement_begin__ = 471;
            stan::math::assign(steps_votes7, stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max((((skip_param + num_ls) + sum(stan::model::rvalue(n_cats_rat, stan::model::cons_list(stan::model::index_min_max(1, 4), stan::model::nil_index_list()), "n_cats_rat"))) - 3), (((skip_param + num_ls) + sum(stan::model::rvalue(n_cats_rat, stan::model::cons_list(stan::model::index_min_max(1, 5), stan::model::nil_index_list()), "n_cats_rat"))) - 5)), stan::model::nil_index_list()), "allparams"));
        }
        current_statement_begin__ = 474;
        if (as_bool(logical_gt(get_base1(n_cats_rat, 6, "n_cats_rat", 1), 1))) {

            current_statement_begin__ = 475;
            stan::math::assign(steps_votes8, stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max((((skip_param + num_ls) + sum(stan::model::rvalue(n_cats_rat, stan::model::cons_list(stan::model::index_min_max(1, 5), stan::model::nil_index_list()), "n_cats_rat"))) - 4), (((skip_param + num_ls) + sum(stan::model::rvalue(n_cats_rat, stan::model::cons_list(stan::model::index_min_max(1, 6), stan::model::nil_index_list()), "n_cats_rat"))) - 6)), stan::model::nil_index_list()), "allparams"));
        }
        current_statement_begin__ = 478;
        if (as_bool(logical_gt(get_base1(n_cats_rat, 7, "n_cats_rat", 1), 1))) {

            current_statement_begin__ = 479;
            stan::math::assign(steps_votes9, stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max((((skip_param + num_ls) + sum(stan::model::rvalue(n_cats_rat, stan::model::cons_list(stan::model::index_min_max(1, 6), stan::model::nil_index_list()), "n_cats_rat"))) - 5), (((skip_param + num_ls) + sum(stan::model::rvalue(n_cats_rat, stan::model::cons_list(stan::model::index_min_max(1, 7), stan::model::nil_index_list()), "n_cats_rat"))) - 7)), stan::model::nil_index_list()), "allparams"));
        }
        current_statement_begin__ = 482;
        if (as_bool(logical_gt(get_base1(n_cats_rat, 8, "n_cats_rat", 1), 1))) {

            current_statement_begin__ = 483;
            stan::math::assign(steps_votes10, stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max((((skip_param + num_ls) + sum(stan::model::rvalue(n_cats_rat, stan::model::cons_list(stan::model::index_min_max(1, 7), stan::model::nil_index_list()), "n_cats_rat"))) - 6), (((skip_param + num_ls) + sum(n_cats_rat)) - 8)), stan::model::nil_index_list()), "allparams"));
        }
        current_statement_begin__ = 489;
        stan::math::assign(skip0, ((((((skip_param + num_ls) + sum(n_cats_rat)) - 8) + LX) + SRX) + SAX));
        current_statement_begin__ = 491;
        if (as_bool(logical_gt(get_base1(n_cats_grm, 1, "n_cats_grm", 1), 1))) {

            current_statement_begin__ = 492;
            for (int c = 1; c <= (get_base1(n_cats_grm, 1, "n_cats_grm", 1) - 1); ++c) {

                current_statement_begin__ = 493;
                stan::model::assign(steps_votes_grm3, 
                            stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list()), 
                            stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max(((skip0 + 1) + ((c - 1) * num_bills_grm)), (skip0 + (c * num_bills_grm))), stan::model::nil_index_list()), "allparams"), 
                            "assigning variable steps_votes_grm3");
            }
            current_statement_begin__ = 495;
            stan::math::assign(skip0, (skip0 + ((get_base1(n_cats_grm, 1, "n_cats_grm", 1) - 1) * num_bills_grm)));
        }
        current_statement_begin__ = 498;
        if (as_bool(logical_gt(get_base1(n_cats_grm, 2, "n_cats_grm", 1), 1))) {

            current_statement_begin__ = 499;
            for (int c = 1; c <= (get_base1(n_cats_grm, 2, "n_cats_grm", 1) - 1); ++c) {

                current_statement_begin__ = 500;
                stan::model::assign(steps_votes_grm4, 
                            stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list()), 
                            stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max(((skip0 + 1) + ((c - 1) * num_bills_grm)), (skip0 + (c * num_bills_grm))), stan::model::nil_index_list()), "allparams"), 
                            "assigning variable steps_votes_grm4");
            }
            current_statement_begin__ = 502;
            stan::math::assign(skip0, (skip0 + ((get_base1(n_cats_grm, 2, "n_cats_grm", 1) - 1) * num_bills_grm)));
        }
        current_statement_begin__ = 505;
        if (as_bool(logical_gt(get_base1(n_cats_grm, 3, "n_cats_grm", 1), 1))) {

            current_statement_begin__ = 506;
            for (int c = 1; c <= (get_base1(n_cats_grm, 3, "n_cats_grm", 1) - 1); ++c) {

                current_statement_begin__ = 507;
                stan::model::assign(steps_votes_grm5, 
                            stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list()), 
                            stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max(((skip0 + 1) + ((c - 1) * num_bills_grm)), (skip0 + (c * num_bills_grm))), stan::model::nil_index_list()), "allparams"), 
                            "assigning variable steps_votes_grm5");
            }
            current_statement_begin__ = 509;
            stan::math::assign(skip0, (skip0 + ((get_base1(n_cats_grm, 3, "n_cats_grm", 1) - 1) * num_bills_grm)));
        }
        current_statement_begin__ = 512;
        if (as_bool(logical_gt(get_base1(n_cats_grm, 4, "n_cats_grm", 1), 1))) {

            current_statement_begin__ = 513;
            for (int c = 1; c <= (get_base1(n_cats_grm, 4, "n_cats_grm", 1) - 1); ++c) {

                current_statement_begin__ = 514;
                stan::model::assign(steps_votes_grm6, 
                            stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list()), 
                            stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max(((skip0 + 1) + ((c - 1) * num_bills_grm)), (skip0 + (c * num_bills_grm))), stan::model::nil_index_list()), "allparams"), 
                            "assigning variable steps_votes_grm6");
            }
            current_statement_begin__ = 516;
            stan::math::assign(skip0, (skip0 + ((get_base1(n_cats_grm, 4, "n_cats_grm", 1) - 1) * num_bills_grm)));
        }
        current_statement_begin__ = 519;
        if (as_bool(logical_gt(get_base1(n_cats_grm, 5, "n_cats_grm", 1), 1))) {

            current_statement_begin__ = 520;
            for (int c = 1; c <= (get_base1(n_cats_grm, 5, "n_cats_grm", 1) - 1); ++c) {

                current_statement_begin__ = 521;
                stan::model::assign(steps_votes_grm7, 
                            stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list()), 
                            stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max(((skip0 + 1) + ((c - 1) * num_bills_grm)), (skip0 + (c * num_bills_grm))), stan::model::nil_index_list()), "allparams"), 
                            "assigning variable steps_votes_grm7");
            }
            current_statement_begin__ = 523;
            stan::math::assign(skip0, (skip0 + ((get_base1(n_cats_grm, 5, "n_cats_grm", 1) - 1) * num_bills_grm)));
        }
        current_statement_begin__ = 526;
        if (as_bool(logical_gt(get_base1(n_cats_grm, 6, "n_cats_grm", 1), 1))) {

            current_statement_begin__ = 527;
            for (int c = 1; c <= (get_base1(n_cats_grm, 6, "n_cats_grm", 1) - 1); ++c) {

                current_statement_begin__ = 528;
                stan::model::assign(steps_votes_grm8, 
                            stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list()), 
                            stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max(((skip0 + 1) + ((c - 1) * num_bills_grm)), (skip0 + (c * num_bills_grm))), stan::model::nil_index_list()), "allparams"), 
                            "assigning variable steps_votes_grm8");
            }
            current_statement_begin__ = 530;
            stan::math::assign(skip0, (skip0 + ((get_base1(n_cats_grm, 6, "n_cats_grm", 1) - 1) * num_bills_grm)));
        }
        current_statement_begin__ = 533;
        if (as_bool(logical_gt(get_base1(n_cats_grm, 7, "n_cats_grm", 1), 1))) {

            current_statement_begin__ = 534;
            for (int c = 1; c <= (get_base1(n_cats_grm, 7, "n_cats_grm", 1) - 1); ++c) {

                current_statement_begin__ = 535;
                stan::model::assign(steps_votes_grm9, 
                            stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list()), 
                            stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max(((skip0 + 1) + ((c - 1) * num_bills_grm)), (skip0 + (c * num_bills_grm))), stan::model::nil_index_list()), "allparams"), 
                            "assigning variable steps_votes_grm9");
            }
            current_statement_begin__ = 537;
            stan::math::assign(skip0, (skip0 + ((get_base1(n_cats_grm, 7, "n_cats_grm", 1) - 1) * num_bills_grm)));
        }
        current_statement_begin__ = 540;
        if (as_bool(logical_gt(get_base1(n_cats_grm, 8, "n_cats_grm", 1), 1))) {

            current_statement_begin__ = 541;
            for (int c = 1; c <= (get_base1(n_cats_grm, 8, "n_cats_grm", 1) - 1); ++c) {

                current_statement_begin__ = 542;
                stan::model::assign(steps_votes_grm10, 
                            stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list()), 
                            stan::model::rvalue(allparams, stan::model::cons_list(stan::model::index_min_max(((skip0 + 1) + ((c - 1) * num_bills_grm)), (skip0 + (c * num_bills_grm))), stan::model::nil_index_list()), "allparams"), 
                            "assigning variable steps_votes_grm10");
            }
            current_statement_begin__ = 544;
            stan::math::assign(skip0, (skip0 + ((get_base1(n_cats_grm, 8, "n_cats_grm", 1) - 1) * num_bills_grm)));
        }
        current_statement_begin__ = 552;
        if (as_bool(logical_eq(S_type, 1))) {

            current_statement_begin__ = 556;
            if (as_bool(logical_gt(T, 1))) {

                current_statement_begin__ = 557;
                if (as_bool(logical_eq(time_proc, 3))) {

                    current_statement_begin__ = 559;
                    for (int t = 1; t <= T; ++t) {

                        current_statement_begin__ = 561;
                        if (as_bool(logical_eq(t, 1))) {

                            current_statement_begin__ = 562;
                            stan::model::assign(L_tp2, 
                                        stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                        get_base1(L_full, 1, "L_full", 1), 
                                        "assigning variable L_tp2");
                        } else {

                            current_statement_begin__ = 564;
                            stan::model::assign(L_tp2, 
                                        stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                        ((get_base1(L_full, 1, "L_full", 1) + (L_AR1 * get_base1(L_tp2, (t - 1), "L_tp2", 1))) + (time_var_full * get_base1(L_tp1_var, (t - 1), "L_tp1_var", 1))), 
                                        "assigning variable L_tp2");
                        }
                    }
                    current_statement_begin__ = 570;
                    stan::math::assign(log_prob, (log_prob + normal_log(L_AR1, 0, ar_sd)));
                    current_statement_begin__ = 571;
                    stan::math::assign(log_prob, (log_prob + normal_log(L_tp1_var, 0, 1)));
                    current_statement_begin__ = 572;
                    stan::math::assign(log_prob, (log_prob + normal_log(time_var_full, 0, 1)));
                } else if (as_bool(logical_eq(time_proc, 2))) {

                    current_statement_begin__ = 577;
                    for (int t = 1; t <= T; ++t) {

                        current_statement_begin__ = 578;
                        if (as_bool(logical_eq(t, 1))) {

                            current_statement_begin__ = 579;
                            stan::model::assign(L_tp2, 
                                        stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                        get_base1(L_full, 1, "L_full", 1), 
                                        "assigning variable L_tp2");
                        } else {

                            current_statement_begin__ = 581;
                            stan::model::assign(L_tp2, 
                                        stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                        (get_base1(L_tp2, (t - 1), "L_tp2", 1) + (time_var_full * get_base1(L_tp1_var, (t - 1), "L_tp1_var", 1))), 
                                        "assigning variable L_tp2");
                        }
                    }
                    current_statement_begin__ = 587;
                    stan::math::assign(log_prob, (log_prob + normal_log(L_tp1_var, 0, 1)));
                    current_statement_begin__ = 588;
                    stan::math::assign(log_prob, (log_prob + normal_log(time_var_full, 0, 1)));
                } else if (as_bool(logical_eq(time_proc, 4))) {
                    {
                    current_statement_begin__ = 592;
                    validate_non_negative_index("cov", "T", T);
                    validate_non_negative_index("cov", "T", T);
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> cov(T, T);
                    stan::math::initialize(cov, DUMMY_VAR__);
                    stan::math::fill(cov, DUMMY_VAR__);

                    current_statement_begin__ = 593;
                    validate_non_negative_index("L_cov", "T", T);
                    validate_non_negative_index("L_cov", "T", T);
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_cov(T, T);
                    stan::math::initialize(L_cov, DUMMY_VAR__);
                    stan::math::fill(L_cov, DUMMY_VAR__);


                    current_statement_begin__ = 599;
                    stan::math::assign(cov, add(cov_exp_quad(time_ind, m_sd_full, time_var_gp_full), diag_matrix(rep_vector(square(gp_sd_full), T))));
                    current_statement_begin__ = 601;
                    stan::math::assign(L_cov, cholesky_decompose(cov));
                    current_statement_begin__ = 603;
                    stan::math::assign(log_prob, (log_prob + multi_normal_cholesky_log(L_tp2, add(rep_vector(0, T), L_full), L_cov)));
                    current_statement_begin__ = 604;
                    stan::math::assign(log_prob, (log_prob + normal_log(time_var_gp_full, 0, 1)));
                    current_statement_begin__ = 605;
                    stan::math::assign(log_prob, (log_prob + normal_log(gp_sd_full, 0, 2)));
                    current_statement_begin__ = 606;
                    stan::math::assign(log_prob, (log_prob + normal_log(m_sd_full, 0, 2)));
                    }
                }
            }
            current_statement_begin__ = 616;
            if (as_bool((primitive_value(logical_eq(const_type, 1)) && primitive_value(logical_eq(S_type, 1))))) {

                current_statement_begin__ = 619;
                if (as_bool(logical_eq(get_base1(ll, 1, "ll", 1), restrict_high))) {

                    current_statement_begin__ = 620;
                    stan::math::assign(log_prob, (log_prob + normal_log(L_full, fix_high, restrict_sd)));
                } else if (as_bool(logical_eq(get_base1(ll, 1, "ll", 1), restrict_low))) {

                    current_statement_begin__ = 622;
                    stan::math::assign(log_prob, (log_prob + normal_log(L_full, fix_low, restrict_sd)));
                } else {

                    current_statement_begin__ = 624;
                    stan::math::assign(log_prob, (log_prob + normal_log(L_full, 0, legis_sd)));
                }
            } else if (as_bool((primitive_value(logical_eq(S_type, 0)) && primitive_value(logical_eq(const_type, 2))))) {

                current_statement_begin__ = 630;
                if (as_bool(logical_eq(get_base1(bb, 1, "bb", 1), restrict_high))) {

                    current_statement_begin__ = 631;
                    stan::math::assign(log_prob, (log_prob + normal_log(sigma_reg_free, fix_high, restrict_sd)));
                } else if (as_bool(logical_eq(get_base1(bb, 1, "bb", 1), restrict_low))) {

                    current_statement_begin__ = 633;
                    stan::math::assign(log_prob, (log_prob + normal_log(sigma_reg_free, fix_low, restrict_sd)));
                } else {

                    current_statement_begin__ = 635;
                    stan::math::assign(log_prob, (log_prob + normal_log(sigma_reg_free, 0, discrim_reg_sd)));
                }
            }
            current_statement_begin__ = 641;
            if (pstream__) {
                stan_print(pstream__,L_full);
                *pstream__ << std::endl;
            }
            current_statement_begin__ = 642;
            if (pstream__) {
                stan_print(pstream__,log_prob);
                *pstream__ << std::endl;
            }
            current_statement_begin__ = 661;
            for (int n = 1; n <= N_int; ++n) {

                current_statement_begin__ = 664;
                if (as_bool(logical_eq(get_base1(pad_id, n, "pad_id", 1), 1))) {

                    current_statement_begin__ = 666;
                    stan::math::assign(log_prob, (log_prob + 0));
                } else {

                    current_statement_begin__ = 671;
                    if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 1))) {

                        current_statement_begin__ = 674;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 675;
                            if (pstream__) {
                                stan_print(pstream__,sigma_reg_free);
                                *pstream__ << std::endl;
                            }
                            current_statement_begin__ = 676;
                            if (pstream__) {
                                stan_print(pstream__,B_int_free);
                                *pstream__ << std::endl;
                            }
                            current_statement_begin__ = 677;
                            if (pstream__) {
                                stan_print(pstream__,srx_pred);
                                *pstream__ << std::endl;
                            }
                            current_statement_begin__ = 678;
                            if (pstream__) {
                                stan_print(pstream__,legis_pred);
                                *pstream__ << std::endl;
                            }
                            current_statement_begin__ = 679;
                            stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)))));
                        } else {

                            current_statement_begin__ = 681;
                            stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)))));
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 2))) {

                        current_statement_begin__ = 685;
                        if (as_bool(logical_lt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                            current_statement_begin__ = 687;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 688;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)))));
                                current_statement_begin__ = 689;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                            } else {

                                current_statement_begin__ = 692;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)))));
                                current_statement_begin__ = 693;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                            }
                        } else {

                            current_statement_begin__ = 699;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 700;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                            } else {

                                current_statement_begin__ = 703;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 3))) {

                        current_statement_begin__ = 711;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 713;
                            if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 3))) {

                                current_statement_begin__ = 714;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes3)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 4))) {

                                current_statement_begin__ = 717;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes4)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 5))) {

                                current_statement_begin__ = 720;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes5)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 6))) {

                                current_statement_begin__ = 723;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes6)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 7))) {

                                current_statement_begin__ = 726;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes7)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 8))) {

                                current_statement_begin__ = 729;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes8)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 9))) {

                                current_statement_begin__ = 732;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes9)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 10))) {

                                current_statement_begin__ = 735;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes10)));
                            }
                        } else {

                            current_statement_begin__ = 740;
                            if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 3))) {

                                current_statement_begin__ = 741;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes3)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 4))) {

                                current_statement_begin__ = 744;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes4)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 5))) {

                                current_statement_begin__ = 747;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes5)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 6))) {

                                current_statement_begin__ = 750;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes6)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 7))) {

                                current_statement_begin__ = 753;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes7)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 8))) {

                                current_statement_begin__ = 756;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes8)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 9))) {

                                current_statement_begin__ = 759;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes9)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 10))) {

                                current_statement_begin__ = 762;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes10)));
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 4))) {

                        current_statement_begin__ = 768;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 770;
                            if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 3))) {

                                current_statement_begin__ = 771;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 773;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 777;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes3)));
                                    current_statement_begin__ = 779;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 4))) {

                                current_statement_begin__ = 783;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 785;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 789;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes4)));
                                    current_statement_begin__ = 791;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 5))) {

                                current_statement_begin__ = 795;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 797;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 801;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes5)));
                                    current_statement_begin__ = 803;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 6))) {

                                current_statement_begin__ = 807;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 809;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 813;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes6)));
                                    current_statement_begin__ = 815;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 7))) {

                                current_statement_begin__ = 819;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 821;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 825;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes7)));
                                    current_statement_begin__ = 827;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 8))) {

                                current_statement_begin__ = 831;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 833;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 837;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes8)));
                                    current_statement_begin__ = 839;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 9))) {

                                current_statement_begin__ = 843;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 845;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 849;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes9)));
                                    current_statement_begin__ = 851;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 10))) {

                                current_statement_begin__ = 855;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 857;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 861;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes10)));
                                    current_statement_begin__ = 863;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            }
                        } else {

                            current_statement_begin__ = 869;
                            if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 3))) {

                                current_statement_begin__ = 870;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 872;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 876;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes3)));
                                    current_statement_begin__ = 878;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 4))) {

                                current_statement_begin__ = 882;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 884;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 888;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes4)));
                                    current_statement_begin__ = 890;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 5))) {

                                current_statement_begin__ = 894;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 896;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 900;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes5)));
                                    current_statement_begin__ = 902;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 6))) {

                                current_statement_begin__ = 906;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 908;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 912;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes6)));
                                    current_statement_begin__ = 914;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 7))) {

                                current_statement_begin__ = 918;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 920;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 924;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes7)));
                                    current_statement_begin__ = 926;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 8))) {

                                current_statement_begin__ = 930;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 932;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 936;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes8)));
                                    current_statement_begin__ = 938;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 9))) {

                                current_statement_begin__ = 942;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 944;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 948;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes9)));
                                    current_statement_begin__ = 950;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 10))) {

                                current_statement_begin__ = 954;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 956;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 960;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes10)));
                                    current_statement_begin__ = 962;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 5))) {

                        current_statement_begin__ = 971;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 973;
                            if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 3))) {

                                current_statement_begin__ = 974;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm3, get_base1(bb, n, "bb", 1), "steps_votes_grm3", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 4))) {

                                current_statement_begin__ = 977;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm4, get_base1(bb, n, "bb", 1), "steps_votes_grm4", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 5))) {

                                current_statement_begin__ = 980;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm5, get_base1(bb, n, "bb", 1), "steps_votes_grm5", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 6))) {

                                current_statement_begin__ = 983;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm6, get_base1(bb, n, "bb", 1), "steps_votes_grm6", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 7))) {

                                current_statement_begin__ = 986;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm7, get_base1(bb, n, "bb", 1), "steps_votes_grm7", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 8))) {

                                current_statement_begin__ = 989;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm8, get_base1(bb, n, "bb", 1), "steps_votes_grm8", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 9))) {

                                current_statement_begin__ = 992;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm9, get_base1(bb, n, "bb", 1), "steps_votes_grm9", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 10))) {

                                current_statement_begin__ = 995;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm10, get_base1(bb, n, "bb", 1), "steps_votes_grm10", 1))));
                            }
                        } else {

                            current_statement_begin__ = 1000;
                            if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 3))) {

                                current_statement_begin__ = 1001;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm3, get_base1(bb, n, "bb", 1), "steps_votes_grm3", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 4))) {

                                current_statement_begin__ = 1004;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm4, get_base1(bb, n, "bb", 1), "steps_votes_grm4", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 5))) {

                                current_statement_begin__ = 1007;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm5, get_base1(bb, n, "bb", 1), "steps_votes_grm5", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 6))) {

                                current_statement_begin__ = 1010;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm6, get_base1(bb, n, "bb", 1), "steps_votes_grm6", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 7))) {

                                current_statement_begin__ = 1013;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm7, get_base1(bb, n, "bb", 1), "steps_votes_grm7", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 8))) {

                                current_statement_begin__ = 1016;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm8, get_base1(bb, n, "bb", 1), "steps_votes_grm8", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 9))) {

                                current_statement_begin__ = 1019;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm9, get_base1(bb, n, "bb", 1), "steps_votes_grm9", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 10))) {

                                current_statement_begin__ = 1022;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm10, get_base1(bb, n, "bb", 1), "steps_votes_grm10", 1))));
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 6))) {

                        current_statement_begin__ = 1030;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 1032;
                            if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 3))) {

                                current_statement_begin__ = 1033;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                    current_statement_begin__ = 1035;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1039;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm3, get_base1(bb, n, "bb", 1), "steps_votes_grm3", 1))));
                                    current_statement_begin__ = 1041;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 4))) {

                                current_statement_begin__ = 1045;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                    current_statement_begin__ = 1047;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1051;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm4, get_base1(bb, n, "bb", 1), "steps_votes_grm4", 1))));
                                    current_statement_begin__ = 1053;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 5))) {

                                current_statement_begin__ = 1057;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                    current_statement_begin__ = 1059;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1063;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm5, get_base1(bb, n, "bb", 1), "steps_votes_grm5", 1))));
                                    current_statement_begin__ = 1065;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 6))) {

                                current_statement_begin__ = 1069;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                    current_statement_begin__ = 1071;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1075;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm6, get_base1(bb, n, "bb", 1), "steps_votes_grm6", 1))));
                                    current_statement_begin__ = 1077;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 7))) {

                                current_statement_begin__ = 1081;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                    current_statement_begin__ = 1083;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1087;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm7, get_base1(bb, n, "bb", 1), "steps_votes_grm7", 1))));
                                    current_statement_begin__ = 1089;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 8))) {

                                current_statement_begin__ = 1093;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                    current_statement_begin__ = 1095;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1099;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm8, get_base1(bb, n, "bb", 1), "steps_votes_grm8", 1))));
                                    current_statement_begin__ = 1101;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 9))) {

                                current_statement_begin__ = 1105;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                    current_statement_begin__ = 1107;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1111;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm9, get_base1(bb, n, "bb", 1), "steps_votes_grm9", 1))));
                                    current_statement_begin__ = 1113;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 10))) {

                                current_statement_begin__ = 1117;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                    current_statement_begin__ = 1119;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1123;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm10, get_base1(bb, n, "bb", 1), "steps_votes_grm10", 1))));
                                    current_statement_begin__ = 1125;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            }
                        } else {

                            current_statement_begin__ = 1131;
                            if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 3))) {

                                current_statement_begin__ = 1132;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                    current_statement_begin__ = 1134;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1138;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm3, get_base1(bb, n, "bb", 1), "steps_votes_grm3", 1))));
                                    current_statement_begin__ = 1140;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 4))) {

                                current_statement_begin__ = 1144;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                    current_statement_begin__ = 1146;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1150;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm4, get_base1(bb, n, "bb", 1), "steps_votes_grm4", 1))));
                                    current_statement_begin__ = 1152;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 5))) {

                                current_statement_begin__ = 1156;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                    current_statement_begin__ = 1158;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1162;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm5, get_base1(bb, n, "bb", 1), "steps_votes_grm5", 1))));
                                    current_statement_begin__ = 1164;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 6))) {

                                current_statement_begin__ = 1168;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                    current_statement_begin__ = 1170;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1174;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm6, get_base1(bb, n, "bb", 1), "steps_votes_grm6", 1))));
                                    current_statement_begin__ = 1176;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 7))) {

                                current_statement_begin__ = 1180;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                    current_statement_begin__ = 1182;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1186;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm7, get_base1(bb, n, "bb", 1), "steps_votes_grm7", 1))));
                                    current_statement_begin__ = 1188;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 8))) {

                                current_statement_begin__ = 1192;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                    current_statement_begin__ = 1194;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1198;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm8, get_base1(bb, n, "bb", 1), "steps_votes_grm8", 1))));
                                    current_statement_begin__ = 1200;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 9))) {

                                current_statement_begin__ = 1204;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                    current_statement_begin__ = 1206;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1210;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm9, get_base1(bb, n, "bb", 1), "steps_votes_grm9", 1))));
                                    current_statement_begin__ = 1212;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 10))) {

                                current_statement_begin__ = 1216;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                    current_statement_begin__ = 1218;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1222;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm10, get_base1(bb, n, "bb", 1), "steps_votes_grm10", 1))));
                                    current_statement_begin__ = 1224;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                                }
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 7))) {

                        current_statement_begin__ = 1233;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 1234;
                            stan::math::assign(log_prob, (log_prob + poisson_log_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)))));
                        } else {

                            current_statement_begin__ = 1236;
                            stan::math::assign(log_prob, (log_prob + poisson_log_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)))));
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 8))) {

                        current_statement_begin__ = 1245;
                        if (as_bool(logical_lt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                            current_statement_begin__ = 1247;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 1248;
                                stan::math::assign(log_prob, (log_prob + poisson_log_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)))));
                                current_statement_begin__ = 1249;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                            } else {

                                current_statement_begin__ = 1252;
                                stan::math::assign(log_prob, (log_prob + poisson_log_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)))));
                                current_statement_begin__ = 1253;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                            }
                        } else {

                            current_statement_begin__ = 1259;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 1260;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                            } else {

                                current_statement_begin__ = 1263;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 13))) {

                        current_statement_begin__ = 1270;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 1272;
                            stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), ((get_base1(ls_int, get_base1(ll, n, "ll", 1), "ls_int", 1) + get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1)) - stan::math::sqrt(square(((get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)))))))));
                        } else {

                            current_statement_begin__ = 1276;
                            stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), ((get_base1(ls_int, get_base1(ll, n, "ll", 1), "ls_int", 1) + get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1)) - stan::math::sqrt(square(((get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)))))))));
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 14))) {

                        current_statement_begin__ = 1283;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 1284;
                            if (as_bool(logical_lt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                current_statement_begin__ = 1285;
                                stan::math::assign(log_prob, (log_prob + (stan::math::log(2) + bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), -(stan::math::sqrt(square(((get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x))))))))));
                                current_statement_begin__ = 1286;
                                stan::math::assign(log_prob, (log_prob + (stan::math::log(2) + bernoulli_logit_log(0, -(stan::math::sqrt(square(((get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x))))))))));
                            } else {

                                current_statement_begin__ = 1288;
                                stan::math::assign(log_prob, (log_prob + (stan::math::log(2) + bernoulli_logit_log(1, (0 - stan::math::sqrt(square(((get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x))))))))));
                            }
                        } else {

                            current_statement_begin__ = 1292;
                            if (as_bool(logical_lt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                current_statement_begin__ = 1293;
                                stan::math::assign(log_prob, (log_prob + (stan::math::log(2) + bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), (0 - stan::math::sqrt(square(((get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x))))))))));
                                current_statement_begin__ = 1294;
                                stan::math::assign(log_prob, (log_prob + (stan::math::log(2) + bernoulli_logit_log(0, (0 - stan::math::sqrt(square(((get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x))))))))));
                            } else {

                                current_statement_begin__ = 1296;
                                stan::math::assign(log_prob, (log_prob + (stan::math::log(2) + bernoulli_logit_log(1, (0 - stan::math::sqrt(square(((get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x))))))))));
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 9))) {

                        current_statement_begin__ = 1307;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 1308;
                            stan::math::assign(log_prob, (log_prob + normal_log(get_base1(Y_cont, n, "Y_cont", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), extra_sd)));
                        } else {

                            current_statement_begin__ = 1311;
                            stan::math::assign(log_prob, (log_prob + normal_log(get_base1(Y_cont, n, "Y_cont", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), extra_sd)));
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 10))) {

                        current_statement_begin__ = 1320;
                        if (as_bool(logical_lt(get_base1(Y_cont, n, "Y_cont", 1), y_cont_miss))) {

                            current_statement_begin__ = 1322;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 1323;
                                stan::math::assign(log_prob, (log_prob + normal_log(get_base1(Y_cont, n, "Y_cont", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), extra_sd)));
                                current_statement_begin__ = 1325;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                            } else {

                                current_statement_begin__ = 1328;
                                stan::math::assign(log_prob, (log_prob + normal_log(get_base1(Y_cont, n, "Y_cont", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), extra_sd)));
                                current_statement_begin__ = 1330;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                            }
                        } else {

                            current_statement_begin__ = 1336;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 1337;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                            } else {

                                current_statement_begin__ = 1340;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 11))) {

                        current_statement_begin__ = 1348;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 1349;
                            stan::math::assign(log_prob, (log_prob + lognormal_log(get_base1(Y_cont, n, "Y_cont", 1), stan::math::exp((((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1))), extra_sd)));
                        } else {

                            current_statement_begin__ = 1352;
                            stan::math::assign(log_prob, (log_prob + lognormal_log(get_base1(Y_cont, n, "Y_cont", 1), stan::math::exp((((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1))), extra_sd)));
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 12))) {

                        current_statement_begin__ = 1359;
                        if (as_bool(logical_lt(get_base1(Y_cont, n, "Y_cont", 1), y_cont_miss))) {

                            current_statement_begin__ = 1361;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 1362;
                                stan::math::assign(log_prob, (log_prob + lognormal_log(get_base1(Y_cont, n, "Y_cont", 1), stan::math::exp((((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1))), extra_sd)));
                                current_statement_begin__ = 1364;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                            } else {

                                current_statement_begin__ = 1367;
                                stan::math::assign(log_prob, (log_prob + lognormal_log(get_base1(Y_cont, n, "Y_cont", 1), stan::math::exp((((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1))), extra_sd)));
                                current_statement_begin__ = 1369;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                            }
                        } else {

                            current_statement_begin__ = 1375;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 1376;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, 1, "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                            } else {

                                current_statement_begin__ = 1379;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp2, get_base1(time, n, "time", 1), "L_tp2", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1)))));
                            }
                        }
                    }
                }
            }
        } else {

            current_statement_begin__ = 1402;
            for (int n = 1; n <= N_int; ++n) {

                current_statement_begin__ = 1405;
                if (as_bool(logical_eq(get_base1(pad_id, n, "pad_id", 1), 1))) {

                    current_statement_begin__ = 1407;
                    stan::math::assign(log_prob, (log_prob + 0));
                } else {

                    current_statement_begin__ = 1412;
                    if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 1))) {

                        current_statement_begin__ = 1415;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 1416;
                            stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)))));
                        } else {

                            current_statement_begin__ = 1418;
                            stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)))));
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 2))) {

                        current_statement_begin__ = 1422;
                        if (as_bool(logical_lt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                            current_statement_begin__ = 1424;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 1425;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)))));
                                current_statement_begin__ = 1426;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                            } else {

                                current_statement_begin__ = 1429;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)))));
                                current_statement_begin__ = 1430;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                            }
                        } else {

                            current_statement_begin__ = 1436;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 1437;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                            } else {

                                current_statement_begin__ = 1440;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 3))) {

                        current_statement_begin__ = 1448;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 1450;
                            if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 3))) {

                                current_statement_begin__ = 1451;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes3)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 4))) {

                                current_statement_begin__ = 1454;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes4)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 5))) {

                                current_statement_begin__ = 1457;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes5)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 6))) {

                                current_statement_begin__ = 1460;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes6)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 7))) {

                                current_statement_begin__ = 1463;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes7)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 8))) {

                                current_statement_begin__ = 1466;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes8)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 9))) {

                                current_statement_begin__ = 1469;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes9)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 10))) {

                                current_statement_begin__ = 1472;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes10)));
                            }
                        } else {

                            current_statement_begin__ = 1477;
                            if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 3))) {

                                current_statement_begin__ = 1478;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes3)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 4))) {

                                current_statement_begin__ = 1481;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes4)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 5))) {

                                current_statement_begin__ = 1484;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes5)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 6))) {

                                current_statement_begin__ = 1487;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes6)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 7))) {

                                current_statement_begin__ = 1490;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes7)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 8))) {

                                current_statement_begin__ = 1493;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes8)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 9))) {

                                current_statement_begin__ = 1496;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes9)));
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 10))) {

                                current_statement_begin__ = 1499;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes10)));
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 4))) {

                        current_statement_begin__ = 1505;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 1507;
                            if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 3))) {

                                current_statement_begin__ = 1508;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 1510;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1514;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes3)));
                                    current_statement_begin__ = 1516;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 4))) {

                                current_statement_begin__ = 1520;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 1522;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1526;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes4)));
                                    current_statement_begin__ = 1528;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 5))) {

                                current_statement_begin__ = 1532;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 1534;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1538;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes5)));
                                    current_statement_begin__ = 1540;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 6))) {

                                current_statement_begin__ = 1544;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 1546;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1550;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes6)));
                                    current_statement_begin__ = 1552;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 7))) {

                                current_statement_begin__ = 1556;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 1558;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1562;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes7)));
                                    current_statement_begin__ = 1564;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 8))) {

                                current_statement_begin__ = 1568;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 1570;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1574;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes8)));
                                    current_statement_begin__ = 1576;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 9))) {

                                current_statement_begin__ = 1580;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 1582;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1586;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes9)));
                                    current_statement_begin__ = 1588;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 10))) {

                                current_statement_begin__ = 1592;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 1594;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1598;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes10)));
                                    current_statement_begin__ = 1600;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            }
                        } else {

                            current_statement_begin__ = 1606;
                            if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 3))) {

                                current_statement_begin__ = 1607;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 1609;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1613;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes3)));
                                    current_statement_begin__ = 1615;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 4))) {

                                current_statement_begin__ = 1619;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 1621;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1625;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes4)));
                                    current_statement_begin__ = 1627;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 5))) {

                                current_statement_begin__ = 1631;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 1633;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1637;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes5)));
                                    current_statement_begin__ = 1639;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 6))) {

                                current_statement_begin__ = 1643;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 1645;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1649;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes6)));
                                    current_statement_begin__ = 1651;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 7))) {

                                current_statement_begin__ = 1655;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 1657;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1661;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes7)));
                                    current_statement_begin__ = 1663;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 8))) {

                                current_statement_begin__ = 1667;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 1669;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1673;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes8)));
                                    current_statement_begin__ = 1675;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 9))) {

                                current_statement_begin__ = 1679;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 1681;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1685;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes9)));
                                    current_statement_begin__ = 1687;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 10))) {

                                current_statement_begin__ = 1691;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                    current_statement_begin__ = 1693;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1697;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), steps_votes10)));
                                    current_statement_begin__ = 1699;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 5))) {

                        current_statement_begin__ = 1708;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 1710;
                            if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 3))) {

                                current_statement_begin__ = 1711;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm3, get_base1(bb, 1, "bb", 1), "steps_votes_grm3", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 4))) {

                                current_statement_begin__ = 1714;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm4, get_base1(bb, 1, "bb", 1), "steps_votes_grm4", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 5))) {

                                current_statement_begin__ = 1717;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm5, get_base1(bb, 1, "bb", 1), "steps_votes_grm5", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 6))) {

                                current_statement_begin__ = 1720;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm6, get_base1(bb, 1, "bb", 1), "steps_votes_grm6", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 7))) {

                                current_statement_begin__ = 1723;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm7, get_base1(bb, 1, "bb", 1), "steps_votes_grm7", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 8))) {

                                current_statement_begin__ = 1726;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm8, get_base1(bb, 1, "bb", 1), "steps_votes_grm8", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 9))) {

                                current_statement_begin__ = 1729;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm9, get_base1(bb, 1, "bb", 1), "steps_votes_grm9", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 10))) {

                                current_statement_begin__ = 1732;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm10, get_base1(bb, 1, "bb", 1), "steps_votes_grm10", 1))));
                            }
                        } else {

                            current_statement_begin__ = 1737;
                            if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 3))) {

                                current_statement_begin__ = 1738;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm3, get_base1(bb, 1, "bb", 1), "steps_votes_grm3", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 4))) {

                                current_statement_begin__ = 1741;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm4, get_base1(bb, 1, "bb", 1), "steps_votes_grm4", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 5))) {

                                current_statement_begin__ = 1744;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm5, get_base1(bb, 1, "bb", 1), "steps_votes_grm5", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 6))) {

                                current_statement_begin__ = 1747;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm6, get_base1(bb, 1, "bb", 1), "steps_votes_grm6", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 7))) {

                                current_statement_begin__ = 1750;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm7, get_base1(bb, 1, "bb", 1), "steps_votes_grm7", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 8))) {

                                current_statement_begin__ = 1753;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm8, get_base1(bb, 1, "bb", 1), "steps_votes_grm8", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 9))) {

                                current_statement_begin__ = 1756;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm9, get_base1(bb, 1, "bb", 1), "steps_votes_grm9", 1))));
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 10))) {

                                current_statement_begin__ = 1759;
                                stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm10, get_base1(bb, 1, "bb", 1), "steps_votes_grm10", 1))));
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 6))) {

                        current_statement_begin__ = 1767;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 1769;
                            if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 3))) {

                                current_statement_begin__ = 1770;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                    current_statement_begin__ = 1772;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1776;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm3, get_base1(bb, 1, "bb", 1), "steps_votes_grm3", 1))));
                                    current_statement_begin__ = 1778;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 4))) {

                                current_statement_begin__ = 1782;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                    current_statement_begin__ = 1784;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1788;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm4, get_base1(bb, 1, "bb", 1), "steps_votes_grm4", 1))));
                                    current_statement_begin__ = 1790;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 5))) {

                                current_statement_begin__ = 1794;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                    current_statement_begin__ = 1796;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1800;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm5, get_base1(bb, 1, "bb", 1), "steps_votes_grm5", 1))));
                                    current_statement_begin__ = 1802;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 6))) {

                                current_statement_begin__ = 1806;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                    current_statement_begin__ = 1808;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1812;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm6, get_base1(bb, 1, "bb", 1), "steps_votes_grm6", 1))));
                                    current_statement_begin__ = 1814;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 7))) {

                                current_statement_begin__ = 1818;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                    current_statement_begin__ = 1820;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1824;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm7, get_base1(bb, 1, "bb", 1), "steps_votes_grm7", 1))));
                                    current_statement_begin__ = 1826;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 8))) {

                                current_statement_begin__ = 1830;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                    current_statement_begin__ = 1832;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1836;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm8, get_base1(bb, 1, "bb", 1), "steps_votes_grm8", 1))));
                                    current_statement_begin__ = 1838;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 9))) {

                                current_statement_begin__ = 1842;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                    current_statement_begin__ = 1844;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1848;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm9, get_base1(bb, 1, "bb", 1), "steps_votes_grm9", 1))));
                                    current_statement_begin__ = 1850;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 10))) {

                                current_statement_begin__ = 1854;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                    current_statement_begin__ = 1856;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1860;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm10, get_base1(bb, 1, "bb", 1), "steps_votes_grm10", 1))));
                                    current_statement_begin__ = 1862;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            }
                        } else {

                            current_statement_begin__ = 1868;
                            if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 3))) {

                                current_statement_begin__ = 1869;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                    current_statement_begin__ = 1871;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1875;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm3, get_base1(bb, 1, "bb", 1), "steps_votes_grm3", 1))));
                                    current_statement_begin__ = 1877;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 4))) {

                                current_statement_begin__ = 1881;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                    current_statement_begin__ = 1883;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1887;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm4, get_base1(bb, 1, "bb", 1), "steps_votes_grm4", 1))));
                                    current_statement_begin__ = 1889;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 5))) {

                                current_statement_begin__ = 1893;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                    current_statement_begin__ = 1895;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1899;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm5, get_base1(bb, 1, "bb", 1), "steps_votes_grm5", 1))));
                                    current_statement_begin__ = 1901;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 6))) {

                                current_statement_begin__ = 1905;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                    current_statement_begin__ = 1907;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1911;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm6, get_base1(bb, 1, "bb", 1), "steps_votes_grm6", 1))));
                                    current_statement_begin__ = 1913;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 7))) {

                                current_statement_begin__ = 1917;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                    current_statement_begin__ = 1919;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1923;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm7, get_base1(bb, 1, "bb", 1), "steps_votes_grm7", 1))));
                                    current_statement_begin__ = 1925;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 8))) {

                                current_statement_begin__ = 1929;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                    current_statement_begin__ = 1931;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1935;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm8, get_base1(bb, 1, "bb", 1), "steps_votes_grm8", 1))));
                                    current_statement_begin__ = 1937;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 9))) {

                                current_statement_begin__ = 1941;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                    current_statement_begin__ = 1943;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1947;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm9, get_base1(bb, 1, "bb", 1), "steps_votes_grm9", 1))));
                                    current_statement_begin__ = 1949;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 10))) {

                                current_statement_begin__ = 1953;
                                if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                    current_statement_begin__ = 1955;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                } else {

                                    current_statement_begin__ = 1959;
                                    stan::math::assign(log_prob, (log_prob + ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), get_base1(steps_votes_grm10, get_base1(bb, 1, "bb", 1), "steps_votes_grm10", 1))));
                                    current_statement_begin__ = 1961;
                                    stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                                }
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 7))) {

                        current_statement_begin__ = 1970;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 1971;
                            stan::math::assign(log_prob, (log_prob + poisson_log_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)))));
                        } else {

                            current_statement_begin__ = 1973;
                            stan::math::assign(log_prob, (log_prob + poisson_log_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)))));
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 8))) {

                        current_statement_begin__ = 1982;
                        if (as_bool(logical_lt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                            current_statement_begin__ = 1984;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 1985;
                                stan::math::assign(log_prob, (log_prob + poisson_log_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)))));
                                current_statement_begin__ = 1986;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                            } else {

                                current_statement_begin__ = 1989;
                                stan::math::assign(log_prob, (log_prob + poisson_log_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)))));
                                current_statement_begin__ = 1990;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                            }
                        } else {

                            current_statement_begin__ = 1996;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 1997;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                            } else {

                                current_statement_begin__ = 2000;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 13))) {

                        current_statement_begin__ = 2007;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 2009;
                            stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), ((get_base1(ls_int, get_base1(ll, n, "ll", 1), "ls_int", 1) + get_base1(sigma_abs_free, 1, "sigma_abs_free", 1)) - stan::math::sqrt(square(((get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(B_int_free, 1, "B_int_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)))))))));
                        } else {

                            current_statement_begin__ = 2013;
                            stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), ((get_base1(ls_int, get_base1(ll, n, "ll", 1), "ls_int", 1) + get_base1(sigma_abs_free, 1, "sigma_abs_free", 1)) - stan::math::sqrt(square(((get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(B_int_free, 1, "B_int_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)))))))));
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 14))) {

                        current_statement_begin__ = 2020;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 2021;
                            if (as_bool(logical_lt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                current_statement_begin__ = 2022;
                                stan::math::assign(log_prob, (log_prob + (stan::math::log(2) + bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), -(stan::math::sqrt(square(((get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(B_int_free, 1, "B_int_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x))))))))));
                                current_statement_begin__ = 2023;
                                stan::math::assign(log_prob, (log_prob + (stan::math::log(2) + bernoulli_logit_log(0, -(stan::math::sqrt(square(((get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(A_int_free, 1, "A_int_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x))))))))));
                            } else {

                                current_statement_begin__ = 2025;
                                stan::math::assign(log_prob, (log_prob + (stan::math::log(2) + bernoulli_logit_log(1, (0 - stan::math::sqrt(square(((get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(B_int_free, 1, "B_int_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x))))))))));
                            }
                        } else {

                            current_statement_begin__ = 2029;
                            if (as_bool(logical_lt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                current_statement_begin__ = 2030;
                                stan::math::assign(log_prob, (log_prob + (stan::math::log(2) + bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), (0 - stan::math::sqrt(square(((get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(B_int_free, 1, "B_int_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x))))))))));
                                current_statement_begin__ = 2031;
                                stan::math::assign(log_prob, (log_prob + (stan::math::log(2) + bernoulli_logit_log(0, (0 - stan::math::sqrt(square(((get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(A_int_free, 1, "A_int_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x))))))))));
                            } else {

                                current_statement_begin__ = 2033;
                                stan::math::assign(log_prob, (log_prob + (stan::math::log(2) + bernoulli_logit_log(1, (0 - stan::math::sqrt(square(((get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(B_int_free, 1, "B_int_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x))))))))));
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 9))) {

                        current_statement_begin__ = 2044;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 2045;
                            stan::math::assign(log_prob, (log_prob + normal_log(get_base1(Y_cont, n, "Y_cont", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), extra_sd)));
                        } else {

                            current_statement_begin__ = 2048;
                            stan::math::assign(log_prob, (log_prob + normal_log(get_base1(Y_cont, n, "Y_cont", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), extra_sd)));
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 10))) {

                        current_statement_begin__ = 2057;
                        if (as_bool(logical_lt(get_base1(Y_cont, n, "Y_cont", 1), y_cont_miss))) {

                            current_statement_begin__ = 2059;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 2060;
                                stan::math::assign(log_prob, (log_prob + normal_log(get_base1(Y_cont, n, "Y_cont", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), extra_sd)));
                                current_statement_begin__ = 2062;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                            } else {

                                current_statement_begin__ = 2065;
                                stan::math::assign(log_prob, (log_prob + normal_log(get_base1(Y_cont, n, "Y_cont", 1), (((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1)), extra_sd)));
                                current_statement_begin__ = 2067;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                            }
                        } else {

                            current_statement_begin__ = 2073;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 2074;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                            } else {

                                current_statement_begin__ = 2077;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 11))) {

                        current_statement_begin__ = 2085;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 2086;
                            stan::math::assign(log_prob, (log_prob + lognormal_log(get_base1(Y_cont, n, "Y_cont", 1), stan::math::exp((((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1))), extra_sd)));
                        } else {

                            current_statement_begin__ = 2089;
                            stan::math::assign(log_prob, (log_prob + lognormal_log(get_base1(Y_cont, n, "Y_cont", 1), stan::math::exp((((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1))), extra_sd)));
                        }
                    } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 12))) {

                        current_statement_begin__ = 2096;
                        if (as_bool(logical_lt(get_base1(Y_cont, n, "Y_cont", 1), y_cont_miss))) {

                            current_statement_begin__ = 2098;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 2099;
                                stan::math::assign(log_prob, (log_prob + lognormal_log(get_base1(Y_cont, n, "Y_cont", 1), stan::math::exp((((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1))), extra_sd)));
                                current_statement_begin__ = 2101;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                            } else {

                                current_statement_begin__ = 2104;
                                stan::math::assign(log_prob, (log_prob + lognormal_log(get_base1(Y_cont, n, "Y_cont", 1), stan::math::exp((((get_base1(sigma_reg_free, 1, "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, 1, "B_int_free", 1))), extra_sd)));
                                current_statement_begin__ = 2106;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(0, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                            }
                        } else {

                            current_statement_begin__ = 2112;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 2113;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                            } else {

                                current_statement_begin__ = 2116;
                                stan::math::assign(log_prob, (log_prob + bernoulli_logit_log(1, (((get_base1(sigma_abs_free, 1, "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_tp1, get_base1(time, n, "time", 1), get_base1(ll, n, "ll", 1), "L_tp1", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, 1, "A_int_free", 1)))));
                            }
                        }
                    }
                }
            }
        }
        current_statement_begin__ = 2134;
        return stan::math::promote_scalar<fun_return_scalar_t__>(transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(log_prob).array())));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct overT_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& allparams,
          const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& s_pars,
          const std::vector<T2__>& allcontdata,
          const std::vector<int>& allintdata, std::ostream* pstream__) const {
        return overT(allparams, s_pars, allcontdata, allintdata, pstream__);
    }
};

#include <meta_header.hpp>
 class model_irt_standard : public prob_grad {
private:
        int N;
        int N_int;
        int N_cont;
        int T;
        std::vector<int> Y_int;
        int within_chain;
        std::vector<double> Y_cont;
        int y_int_miss;
        double y_cont_miss;
        int S;
        int S_int;
        int S_cont;
        int S_type;
        std::vector<std::vector<int> > int_shards;
        std::vector<std::vector<double> > cont_shards;
        int LX;
        int SRX;
        int SAX;
        int num_legis;
        int num_bills;
        int num_bills_grm;
        int num_ls;
        std::vector<int> ll;
        std::vector<int> bb;
        std::vector<int> time;
        std::vector<int> mm;
        matrix_d legis_pred;
        matrix_d srx_pred;
        matrix_d sax_pred;
        int mod_count;
        int tot_cats;
        std::vector<int> n_cats_rat;
        std::vector<int> n_cats_grm;
        std::vector<int> order_cats_rat;
        std::vector<int> order_cats_grm;
        int const_type;
        int restrict_high;
        int restrict_low;
        double fix_high;
        double fix_low;
        double sd_fix;
        double discrim_reg_sd;
        double discrim_abs_sd;
        double legis_sd;
        double diff_abs_sd;
        double diff_reg_sd;
        double ar_sd;
        double time_sd;
        int time_proc;
        std::vector<double> time_ind;
        int zeroes;
        double gp_sd_par;
        double num_diff;
        double m_sd_par;
        int min_length;
        int m;
        double m_cont;
        int m_step;
        int num_constrain_l;
        double num_legis_real;
        int gp_N;
        int gp_N_fix;
        int gp_1;
        int gp_nT;
        int gp_oT;
        vector_d gp_length;
        int vP;
        int dP;
public:
    model_irt_standard(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_irt_standard(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_irt_standard_namespace::model_irt_standard";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2138;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];

            current_statement_begin__ = 2139;
            context__.validate_dims("data initialization", "N_int", "int", context__.to_vec());
            N_int = int(0);
            vals_i__ = context__.vals_i("N_int");
            pos__ = 0;
            N_int = vals_i__[pos__++];

            current_statement_begin__ = 2140;
            context__.validate_dims("data initialization", "N_cont", "int", context__.to_vec());
            N_cont = int(0);
            vals_i__ = context__.vals_i("N_cont");
            pos__ = 0;
            N_cont = vals_i__[pos__++];

            current_statement_begin__ = 2141;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];

            current_statement_begin__ = 2142;
            validate_non_negative_index("Y_int", "N_int", N_int);
            context__.validate_dims("data initialization", "Y_int", "int", context__.to_vec(N_int));
            Y_int = std::vector<int>(N_int, int(0));
            vals_i__ = context__.vals_i("Y_int");
            pos__ = 0;
            size_t Y_int_k_0_max__ = N_int;
            for (size_t k_0__ = 0; k_0__ < Y_int_k_0_max__; ++k_0__) {
                Y_int[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 2143;
            context__.validate_dims("data initialization", "within_chain", "int", context__.to_vec());
            within_chain = int(0);
            vals_i__ = context__.vals_i("within_chain");
            pos__ = 0;
            within_chain = vals_i__[pos__++];

            current_statement_begin__ = 2144;
            validate_non_negative_index("Y_cont", "N_cont", N_cont);
            context__.validate_dims("data initialization", "Y_cont", "double", context__.to_vec(N_cont));
            Y_cont = std::vector<double>(N_cont, double(0));
            vals_r__ = context__.vals_r("Y_cont");
            pos__ = 0;
            size_t Y_cont_k_0_max__ = N_cont;
            for (size_t k_0__ = 0; k_0__ < Y_cont_k_0_max__; ++k_0__) {
                Y_cont[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 2145;
            context__.validate_dims("data initialization", "y_int_miss", "int", context__.to_vec());
            y_int_miss = int(0);
            vals_i__ = context__.vals_i("y_int_miss");
            pos__ = 0;
            y_int_miss = vals_i__[pos__++];

            current_statement_begin__ = 2146;
            context__.validate_dims("data initialization", "y_cont_miss", "double", context__.to_vec());
            y_cont_miss = double(0);
            vals_r__ = context__.vals_r("y_cont_miss");
            pos__ = 0;
            y_cont_miss = vals_r__[pos__++];

            current_statement_begin__ = 2147;
            context__.validate_dims("data initialization", "S", "int", context__.to_vec());
            S = int(0);
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            S = vals_i__[pos__++];

            current_statement_begin__ = 2148;
            context__.validate_dims("data initialization", "S_int", "int", context__.to_vec());
            S_int = int(0);
            vals_i__ = context__.vals_i("S_int");
            pos__ = 0;
            S_int = vals_i__[pos__++];

            current_statement_begin__ = 2149;
            context__.validate_dims("data initialization", "S_cont", "int", context__.to_vec());
            S_cont = int(0);
            vals_i__ = context__.vals_i("S_cont");
            pos__ = 0;
            S_cont = vals_i__[pos__++];

            current_statement_begin__ = 2150;
            context__.validate_dims("data initialization", "S_type", "int", context__.to_vec());
            S_type = int(0);
            vals_i__ = context__.vals_i("S_type");
            pos__ = 0;
            S_type = vals_i__[pos__++];

            current_statement_begin__ = 2151;
            validate_non_negative_index("int_shards", "S", S);
            validate_non_negative_index("int_shards", "S_int", S_int);
            context__.validate_dims("data initialization", "int_shards", "int", context__.to_vec(S,S_int));
            int_shards = std::vector<std::vector<int> >(S, std::vector<int>(S_int, int(0)));
            vals_i__ = context__.vals_i("int_shards");
            pos__ = 0;
            size_t int_shards_k_0_max__ = S;
            size_t int_shards_k_1_max__ = S_int;
            for (size_t k_1__ = 0; k_1__ < int_shards_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < int_shards_k_0_max__; ++k_0__) {
                    int_shards[k_0__][k_1__] = vals_i__[pos__++];
                }
            }

            current_statement_begin__ = 2152;
            validate_non_negative_index("cont_shards", "S", S);
            validate_non_negative_index("cont_shards", "S_cont", S_cont);
            context__.validate_dims("data initialization", "cont_shards", "double", context__.to_vec(S,S_cont));
            cont_shards = std::vector<std::vector<double> >(S, std::vector<double>(S_cont, double(0)));
            vals_r__ = context__.vals_r("cont_shards");
            pos__ = 0;
            size_t cont_shards_k_0_max__ = S;
            size_t cont_shards_k_1_max__ = S_cont;
            for (size_t k_1__ = 0; k_1__ < cont_shards_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < cont_shards_k_0_max__; ++k_0__) {
                    cont_shards[k_0__][k_1__] = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 2153;
            context__.validate_dims("data initialization", "LX", "int", context__.to_vec());
            LX = int(0);
            vals_i__ = context__.vals_i("LX");
            pos__ = 0;
            LX = vals_i__[pos__++];

            current_statement_begin__ = 2154;
            context__.validate_dims("data initialization", "SRX", "int", context__.to_vec());
            SRX = int(0);
            vals_i__ = context__.vals_i("SRX");
            pos__ = 0;
            SRX = vals_i__[pos__++];

            current_statement_begin__ = 2155;
            context__.validate_dims("data initialization", "SAX", "int", context__.to_vec());
            SAX = int(0);
            vals_i__ = context__.vals_i("SAX");
            pos__ = 0;
            SAX = vals_i__[pos__++];

            current_statement_begin__ = 2156;
            context__.validate_dims("data initialization", "num_legis", "int", context__.to_vec());
            num_legis = int(0);
            vals_i__ = context__.vals_i("num_legis");
            pos__ = 0;
            num_legis = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_legis", num_legis, 1);

            current_statement_begin__ = 2157;
            context__.validate_dims("data initialization", "num_bills", "int", context__.to_vec());
            num_bills = int(0);
            vals_i__ = context__.vals_i("num_bills");
            pos__ = 0;
            num_bills = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_bills", num_bills, 1);

            current_statement_begin__ = 2158;
            context__.validate_dims("data initialization", "num_bills_grm", "int", context__.to_vec());
            num_bills_grm = int(0);
            vals_i__ = context__.vals_i("num_bills_grm");
            pos__ = 0;
            num_bills_grm = vals_i__[pos__++];

            current_statement_begin__ = 2159;
            context__.validate_dims("data initialization", "num_ls", "int", context__.to_vec());
            num_ls = int(0);
            vals_i__ = context__.vals_i("num_ls");
            pos__ = 0;
            num_ls = vals_i__[pos__++];

            current_statement_begin__ = 2160;
            validate_non_negative_index("ll", "N", N);
            context__.validate_dims("data initialization", "ll", "int", context__.to_vec(N));
            ll = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("ll");
            pos__ = 0;
            size_t ll_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < ll_k_0_max__; ++k_0__) {
                ll[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 2161;
            validate_non_negative_index("bb", "N", N);
            context__.validate_dims("data initialization", "bb", "int", context__.to_vec(N));
            bb = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("bb");
            pos__ = 0;
            size_t bb_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < bb_k_0_max__; ++k_0__) {
                bb[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 2162;
            validate_non_negative_index("time", "N", N);
            context__.validate_dims("data initialization", "time", "int", context__.to_vec(N));
            time = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("time");
            pos__ = 0;
            size_t time_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < time_k_0_max__; ++k_0__) {
                time[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 2163;
            validate_non_negative_index("mm", "N", N);
            context__.validate_dims("data initialization", "mm", "int", context__.to_vec(N));
            mm = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("mm");
            pos__ = 0;
            size_t mm_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < mm_k_0_max__; ++k_0__) {
                mm[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 2164;
            validate_non_negative_index("legis_pred", "N", N);
            validate_non_negative_index("legis_pred", "(logical_gt(N, 0) ? LX : 0 )", (logical_gt(N, 0) ? LX : 0 ));
            context__.validate_dims("data initialization", "legis_pred", "matrix_d", context__.to_vec(N,(logical_gt(N, 0) ? LX : 0 )));
            legis_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, (logical_gt(N, 0) ? LX : 0 ));
            vals_r__ = context__.vals_r("legis_pred");
            pos__ = 0;
            size_t legis_pred_j_2_max__ = (logical_gt(N, 0) ? LX : 0 );
            size_t legis_pred_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < legis_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < legis_pred_j_1_max__; ++j_1__) {
                    legis_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 2165;
            validate_non_negative_index("srx_pred", "N", N);
            validate_non_negative_index("srx_pred", "(logical_gt(N, 0) ? SRX : 0 )", (logical_gt(N, 0) ? SRX : 0 ));
            context__.validate_dims("data initialization", "srx_pred", "matrix_d", context__.to_vec(N,(logical_gt(N, 0) ? SRX : 0 )));
            srx_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, (logical_gt(N, 0) ? SRX : 0 ));
            vals_r__ = context__.vals_r("srx_pred");
            pos__ = 0;
            size_t srx_pred_j_2_max__ = (logical_gt(N, 0) ? SRX : 0 );
            size_t srx_pred_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < srx_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < srx_pred_j_1_max__; ++j_1__) {
                    srx_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 2166;
            validate_non_negative_index("sax_pred", "N", N);
            validate_non_negative_index("sax_pred", "(logical_gt(N, 0) ? SAX : 0 )", (logical_gt(N, 0) ? SAX : 0 ));
            context__.validate_dims("data initialization", "sax_pred", "matrix_d", context__.to_vec(N,(logical_gt(N, 0) ? SAX : 0 )));
            sax_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, (logical_gt(N, 0) ? SAX : 0 ));
            vals_r__ = context__.vals_r("sax_pred");
            pos__ = 0;
            size_t sax_pred_j_2_max__ = (logical_gt(N, 0) ? SAX : 0 );
            size_t sax_pred_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < sax_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < sax_pred_j_1_max__; ++j_1__) {
                    sax_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 2167;
            context__.validate_dims("data initialization", "mod_count", "int", context__.to_vec());
            mod_count = int(0);
            vals_i__ = context__.vals_i("mod_count");
            pos__ = 0;
            mod_count = vals_i__[pos__++];

            current_statement_begin__ = 2168;
            context__.validate_dims("data initialization", "tot_cats", "int", context__.to_vec());
            tot_cats = int(0);
            vals_i__ = context__.vals_i("tot_cats");
            pos__ = 0;
            tot_cats = vals_i__[pos__++];

            current_statement_begin__ = 2169;
            validate_non_negative_index("n_cats_rat", "tot_cats", tot_cats);
            context__.validate_dims("data initialization", "n_cats_rat", "int", context__.to_vec(tot_cats));
            n_cats_rat = std::vector<int>(tot_cats, int(0));
            vals_i__ = context__.vals_i("n_cats_rat");
            pos__ = 0;
            size_t n_cats_rat_k_0_max__ = tot_cats;
            for (size_t k_0__ = 0; k_0__ < n_cats_rat_k_0_max__; ++k_0__) {
                n_cats_rat[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 2170;
            validate_non_negative_index("n_cats_grm", "tot_cats", tot_cats);
            context__.validate_dims("data initialization", "n_cats_grm", "int", context__.to_vec(tot_cats));
            n_cats_grm = std::vector<int>(tot_cats, int(0));
            vals_i__ = context__.vals_i("n_cats_grm");
            pos__ = 0;
            size_t n_cats_grm_k_0_max__ = tot_cats;
            for (size_t k_0__ = 0; k_0__ < n_cats_grm_k_0_max__; ++k_0__) {
                n_cats_grm[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 2171;
            validate_non_negative_index("order_cats_rat", "N_int", N_int);
            context__.validate_dims("data initialization", "order_cats_rat", "int", context__.to_vec(N_int));
            order_cats_rat = std::vector<int>(N_int, int(0));
            vals_i__ = context__.vals_i("order_cats_rat");
            pos__ = 0;
            size_t order_cats_rat_k_0_max__ = N_int;
            for (size_t k_0__ = 0; k_0__ < order_cats_rat_k_0_max__; ++k_0__) {
                order_cats_rat[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 2172;
            validate_non_negative_index("order_cats_grm", "N_int", N_int);
            context__.validate_dims("data initialization", "order_cats_grm", "int", context__.to_vec(N_int));
            order_cats_grm = std::vector<int>(N_int, int(0));
            vals_i__ = context__.vals_i("order_cats_grm");
            pos__ = 0;
            size_t order_cats_grm_k_0_max__ = N_int;
            for (size_t k_0__ = 0; k_0__ < order_cats_grm_k_0_max__; ++k_0__) {
                order_cats_grm[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 2173;
            context__.validate_dims("data initialization", "const_type", "int", context__.to_vec());
            const_type = int(0);
            vals_i__ = context__.vals_i("const_type");
            pos__ = 0;
            const_type = vals_i__[pos__++];

            current_statement_begin__ = 2174;
            context__.validate_dims("data initialization", "restrict_high", "int", context__.to_vec());
            restrict_high = int(0);
            vals_i__ = context__.vals_i("restrict_high");
            pos__ = 0;
            restrict_high = vals_i__[pos__++];

            current_statement_begin__ = 2175;
            context__.validate_dims("data initialization", "restrict_low", "int", context__.to_vec());
            restrict_low = int(0);
            vals_i__ = context__.vals_i("restrict_low");
            pos__ = 0;
            restrict_low = vals_i__[pos__++];

            current_statement_begin__ = 2176;
            context__.validate_dims("data initialization", "fix_high", "double", context__.to_vec());
            fix_high = double(0);
            vals_r__ = context__.vals_r("fix_high");
            pos__ = 0;
            fix_high = vals_r__[pos__++];

            current_statement_begin__ = 2177;
            context__.validate_dims("data initialization", "fix_low", "double", context__.to_vec());
            fix_low = double(0);
            vals_r__ = context__.vals_r("fix_low");
            pos__ = 0;
            fix_low = vals_r__[pos__++];

            current_statement_begin__ = 2178;
            context__.validate_dims("data initialization", "sd_fix", "double", context__.to_vec());
            sd_fix = double(0);
            vals_r__ = context__.vals_r("sd_fix");
            pos__ = 0;
            sd_fix = vals_r__[pos__++];

            current_statement_begin__ = 2179;
            context__.validate_dims("data initialization", "discrim_reg_sd", "double", context__.to_vec());
            discrim_reg_sd = double(0);
            vals_r__ = context__.vals_r("discrim_reg_sd");
            pos__ = 0;
            discrim_reg_sd = vals_r__[pos__++];

            current_statement_begin__ = 2180;
            context__.validate_dims("data initialization", "discrim_abs_sd", "double", context__.to_vec());
            discrim_abs_sd = double(0);
            vals_r__ = context__.vals_r("discrim_abs_sd");
            pos__ = 0;
            discrim_abs_sd = vals_r__[pos__++];

            current_statement_begin__ = 2181;
            context__.validate_dims("data initialization", "legis_sd", "double", context__.to_vec());
            legis_sd = double(0);
            vals_r__ = context__.vals_r("legis_sd");
            pos__ = 0;
            legis_sd = vals_r__[pos__++];

            current_statement_begin__ = 2182;
            context__.validate_dims("data initialization", "diff_abs_sd", "double", context__.to_vec());
            diff_abs_sd = double(0);
            vals_r__ = context__.vals_r("diff_abs_sd");
            pos__ = 0;
            diff_abs_sd = vals_r__[pos__++];

            current_statement_begin__ = 2183;
            context__.validate_dims("data initialization", "diff_reg_sd", "double", context__.to_vec());
            diff_reg_sd = double(0);
            vals_r__ = context__.vals_r("diff_reg_sd");
            pos__ = 0;
            diff_reg_sd = vals_r__[pos__++];

            current_statement_begin__ = 2185;
            context__.validate_dims("data initialization", "ar_sd", "double", context__.to_vec());
            ar_sd = double(0);
            vals_r__ = context__.vals_r("ar_sd");
            pos__ = 0;
            ar_sd = vals_r__[pos__++];

            current_statement_begin__ = 2186;
            context__.validate_dims("data initialization", "time_sd", "double", context__.to_vec());
            time_sd = double(0);
            vals_r__ = context__.vals_r("time_sd");
            pos__ = 0;
            time_sd = vals_r__[pos__++];

            current_statement_begin__ = 2192;
            context__.validate_dims("data initialization", "time_proc", "int", context__.to_vec());
            time_proc = int(0);
            vals_i__ = context__.vals_i("time_proc");
            pos__ = 0;
            time_proc = vals_i__[pos__++];

            current_statement_begin__ = 2193;
            validate_non_negative_index("time_ind", "T", T);
            context__.validate_dims("data initialization", "time_ind", "double", context__.to_vec(T));
            time_ind = std::vector<double>(T, double(0));
            vals_r__ = context__.vals_r("time_ind");
            pos__ = 0;
            size_t time_ind_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < time_ind_k_0_max__; ++k_0__) {
                time_ind[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 2194;
            context__.validate_dims("data initialization", "zeroes", "int", context__.to_vec());
            zeroes = int(0);
            vals_i__ = context__.vals_i("zeroes");
            pos__ = 0;
            zeroes = vals_i__[pos__++];

            current_statement_begin__ = 2195;
            context__.validate_dims("data initialization", "gp_sd_par", "double", context__.to_vec());
            gp_sd_par = double(0);
            vals_r__ = context__.vals_r("gp_sd_par");
            pos__ = 0;
            gp_sd_par = vals_r__[pos__++];

            current_statement_begin__ = 2196;
            context__.validate_dims("data initialization", "num_diff", "double", context__.to_vec());
            num_diff = double(0);
            vals_r__ = context__.vals_r("num_diff");
            pos__ = 0;
            num_diff = vals_r__[pos__++];

            current_statement_begin__ = 2197;
            context__.validate_dims("data initialization", "m_sd_par", "double", context__.to_vec());
            m_sd_par = double(0);
            vals_r__ = context__.vals_r("m_sd_par");
            pos__ = 0;
            m_sd_par = vals_r__[pos__++];

            current_statement_begin__ = 2198;
            context__.validate_dims("data initialization", "min_length", "int", context__.to_vec());
            min_length = int(0);
            vals_i__ = context__.vals_i("min_length");
            pos__ = 0;
            min_length = vals_i__[pos__++];


            // initialize transformed data variables
            current_statement_begin__ = 2202;
            m = int(0);
            stan::math::fill(m, std::numeric_limits<int>::min());

            current_statement_begin__ = 2203;
            m_cont = double(0);
            stan::math::fill(m_cont, DUMMY_VAR__);

            current_statement_begin__ = 2204;
            m_step = int(0);
            stan::math::fill(m_step, std::numeric_limits<int>::min());

            current_statement_begin__ = 2205;
            num_constrain_l = int(0);
            stan::math::fill(num_constrain_l, std::numeric_limits<int>::min());

            current_statement_begin__ = 2208;
            num_legis_real = double(0);
            stan::math::fill(num_legis_real, DUMMY_VAR__);

            current_statement_begin__ = 2209;
            gp_N = int(0);
            stan::math::fill(gp_N, std::numeric_limits<int>::min());

            current_statement_begin__ = 2210;
            gp_N_fix = int(0);
            stan::math::fill(gp_N_fix, std::numeric_limits<int>::min());

            current_statement_begin__ = 2211;
            gp_1 = int(0);
            stan::math::fill(gp_1, std::numeric_limits<int>::min());

            current_statement_begin__ = 2212;
            gp_nT = int(0);
            stan::math::fill(gp_nT, std::numeric_limits<int>::min());

            current_statement_begin__ = 2213;
            gp_oT = int(0);
            stan::math::fill(gp_oT, std::numeric_limits<int>::min());

            current_statement_begin__ = 2214;
            validate_non_negative_index("gp_length", "1", 1);
            gp_length = Eigen::Matrix<double, Eigen::Dynamic, 1>(1);
            stan::math::fill(gp_length, DUMMY_VAR__);

            current_statement_begin__ = 2215;
            vP = int(0);
            stan::math::fill(vP, std::numeric_limits<int>::min());

            current_statement_begin__ = 2216;
            dP = int(0);
            stan::math::fill(dP, std::numeric_limits<int>::min());

            // execute transformed data statements
            current_statement_begin__ = 2220;
            if (as_bool(logical_eq(time_proc, 4))) {

                current_statement_begin__ = 2221;
                stan::math::assign(gp_length, gp_prior_mean(time_ind, num_diff, min_length, pstream__));
            } else {

                current_statement_begin__ = 2223;
                stan::math::assign(gp_length, transpose(stan::math::to_row_vector(stan::math::array_builder<double >().add(0.0).array())));
            }
            current_statement_begin__ = 2228;
            if (as_bool(logical_neq(time_proc, 4))) {

                current_statement_begin__ = 2229;
                stan::math::assign(gp_N, 0);
                current_statement_begin__ = 2230;
                stan::math::assign(gp_N_fix, 0);
                current_statement_begin__ = 2231;
                stan::math::assign(gp_1, 0);
                current_statement_begin__ = 2232;
                stan::math::assign(gp_oT, T);
                current_statement_begin__ = 2233;
                stan::math::assign(gp_nT, 0);
            } else {

                current_statement_begin__ = 2236;
                stan::math::assign(gp_N, num_legis);
                current_statement_begin__ = 2237;
                stan::math::assign(gp_N_fix, (num_legis - 1));
                current_statement_begin__ = 2238;
                stan::math::assign(gp_1, 1);
                current_statement_begin__ = 2239;
                stan::math::assign(gp_nT, T);
                current_statement_begin__ = 2240;
                stan::math::assign(gp_oT, 0);
            }
            current_statement_begin__ = 2243;
            if (as_bool(logical_eq(within_chain, 1))) {

                current_statement_begin__ = 2244;
                if (as_bool(logical_eq(S_type, 1))) {

                    current_statement_begin__ = 2246;
                    if (as_bool(logical_eq(time_proc, 4))) {

                        current_statement_begin__ = 2247;
                        stan::math::assign(vP, ((1 * T) + 4));
                    } else if (as_bool(logical_eq(time_proc, 3))) {

                        current_statement_begin__ = 2249;
                        stan::math::assign(vP, ((1 * T) + 3));
                    } else if (as_bool(logical_eq(time_proc, 2))) {

                        current_statement_begin__ = 2251;
                        stan::math::assign(vP, ((1 * T) + 2));
                    } else if (as_bool(logical_eq(T, 1))) {

                        current_statement_begin__ = 2253;
                        stan::math::assign(vP, 2);
                    }
                    current_statement_begin__ = 2257;
                    stan::math::assign(dP, (((((((4 * num_bills) + (sum(n_cats_rat) - 8)) + ((sum(n_cats_grm) - 8) * num_bills_grm)) + LX) + SRX) + SAX) + 1));
                } else {

                    current_statement_begin__ = 2260;
                    stan::math::assign(vP, 4);
                    current_statement_begin__ = 2261;
                    stan::math::assign(dP, ((((((((num_legis * T) + num_ls) + (sum(n_cats_rat) - 8)) + ((sum(n_cats_grm) - 8) * num_bills_grm)) + LX) + SRX) + SAX) + 1));
                }
            } else {

                current_statement_begin__ = 2265;
                stan::math::assign(vP, 0);
                current_statement_begin__ = 2266;
                stan::math::assign(dP, 0);
            }
            current_statement_begin__ = 2281;
            if (as_bool(logical_eq(num_legis, 2))) {

                current_statement_begin__ = 2282;
                stan::math::assign(num_constrain_l, 1);
            } else {

                current_statement_begin__ = 2284;
                if (as_bool(logical_eq(T, 1))) {

                    current_statement_begin__ = 2285;
                    stan::math::assign(num_constrain_l, 2);
                } else {

                    current_statement_begin__ = 2287;
                    if (as_bool(logical_eq(time_proc, 3))) {

                        current_statement_begin__ = 2288;
                        stan::math::assign(num_constrain_l, 2);
                    } else {

                        current_statement_begin__ = 2290;
                        stan::math::assign(num_constrain_l, 2);
                    }
                }
            }
            current_statement_begin__ = 2309;
            stan::math::assign(num_legis_real, num_legis);

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 2315;
            validate_non_negative_index("sigma_abs_free", "num_bills", num_bills);
            num_params_r__ += num_bills;
            current_statement_begin__ = 2316;
            validate_non_negative_index("L_full", "num_legis", num_legis);
            num_params_r__ += num_legis;
            current_statement_begin__ = 2317;
            validate_non_negative_index("m_sd_free", "gp_N_fix", gp_N_fix);
            num_params_r__ += gp_N_fix;
            current_statement_begin__ = 2318;
            validate_non_negative_index("gp_sd_free", "gp_N_fix", gp_N_fix);
            num_params_r__ += gp_N_fix;
            current_statement_begin__ = 2319;
            validate_non_negative_index("L_tp2", "num_legis", num_legis);
            validate_non_negative_index("L_tp2", "gp_nT", gp_nT);
            num_params_r__ += (num_legis * gp_nT);
            current_statement_begin__ = 2320;
            validate_non_negative_index("ls_int", "num_ls", num_ls);
            num_params_r__ += num_ls;
            current_statement_begin__ = 2321;
            validate_non_negative_index("L_tp1_var", "(logical_gt(T, 1) ? num_legis : 0 )", (logical_gt(T, 1) ? num_legis : 0 ));
            validate_non_negative_index("L_tp1_var", "(T - 1)", (T - 1));
            num_params_r__ += ((logical_gt(T, 1) ? num_legis : 0 ) * (T - 1));
            current_statement_begin__ = 2322;
            validate_non_negative_index("L_AR1", "((primitive_value(logical_gt(T, 1)) && primitive_value(logical_eq(time_proc, 3))) ? num_legis : 0 )", ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_eq(time_proc, 3))) ? num_legis : 0 ));
            num_params_r__ += ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_eq(time_proc, 3))) ? num_legis : 0 );
            current_statement_begin__ = 2323;
            validate_non_negative_index("sigma_reg_free", "num_bills", num_bills);
            num_params_r__ += num_bills;
            current_statement_begin__ = 2325;
            validate_non_negative_index("legis_x", "LX", LX);
            num_params_r__ += LX;
            current_statement_begin__ = 2326;
            validate_non_negative_index("sigma_reg_x", "SRX", SRX);
            num_params_r__ += SRX;
            current_statement_begin__ = 2327;
            validate_non_negative_index("sigma_abs_x", "SAX", SAX);
            num_params_r__ += SAX;
            current_statement_begin__ = 2328;
            validate_non_negative_index("B_int_free", "num_bills", num_bills);
            num_params_r__ += num_bills;
            current_statement_begin__ = 2329;
            validate_non_negative_index("A_int_free", "num_bills", num_bills);
            num_params_r__ += num_bills;
            current_statement_begin__ = 2330;
            validate_non_negative_index("steps_votes3", "(get_base1(n_cats_rat, 1, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 1, "n_cats_rat", 1) - 1));
            num_params_r__ += (get_base1(n_cats_rat, 1, "n_cats_rat", 1) - 1);
            current_statement_begin__ = 2331;
            validate_non_negative_index("steps_votes4", "(get_base1(n_cats_rat, 2, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 1));
            num_params_r__ += (get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 1);
            current_statement_begin__ = 2332;
            validate_non_negative_index("steps_votes5", "(get_base1(n_cats_rat, 3, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 3, "n_cats_rat", 1) - 1));
            num_params_r__ += (get_base1(n_cats_rat, 3, "n_cats_rat", 1) - 1);
            current_statement_begin__ = 2333;
            validate_non_negative_index("steps_votes6", "(get_base1(n_cats_rat, 4, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 4, "n_cats_rat", 1) - 1));
            num_params_r__ += (get_base1(n_cats_rat, 4, "n_cats_rat", 1) - 1);
            current_statement_begin__ = 2334;
            validate_non_negative_index("steps_votes7", "(get_base1(n_cats_rat, 5, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 5, "n_cats_rat", 1) - 1));
            num_params_r__ += (get_base1(n_cats_rat, 5, "n_cats_rat", 1) - 1);
            current_statement_begin__ = 2335;
            validate_non_negative_index("steps_votes8", "(get_base1(n_cats_rat, 6, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 6, "n_cats_rat", 1) - 1));
            num_params_r__ += (get_base1(n_cats_rat, 6, "n_cats_rat", 1) - 1);
            current_statement_begin__ = 2336;
            validate_non_negative_index("steps_votes9", "(get_base1(n_cats_rat, 7, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 7, "n_cats_rat", 1) - 1));
            num_params_r__ += (get_base1(n_cats_rat, 7, "n_cats_rat", 1) - 1);
            current_statement_begin__ = 2337;
            validate_non_negative_index("steps_votes10", "(get_base1(n_cats_rat, 8, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 8, "n_cats_rat", 1) - 1));
            num_params_r__ += (get_base1(n_cats_rat, 8, "n_cats_rat", 1) - 1);
            current_statement_begin__ = 2338;
            validate_non_negative_index("steps_votes_grm3", "(get_base1(n_cats_grm, 1, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 1, "n_cats_grm", 1) - 1));
            validate_non_negative_index("steps_votes_grm3", "num_bills_grm", num_bills_grm);
            num_params_r__ += ((get_base1(n_cats_grm, 1, "n_cats_grm", 1) - 1) * num_bills_grm);
            current_statement_begin__ = 2339;
            validate_non_negative_index("steps_votes_grm4", "(get_base1(n_cats_grm, 2, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 2, "n_cats_grm", 1) - 1));
            validate_non_negative_index("steps_votes_grm4", "num_bills_grm", num_bills_grm);
            num_params_r__ += ((get_base1(n_cats_grm, 2, "n_cats_grm", 1) - 1) * num_bills_grm);
            current_statement_begin__ = 2340;
            validate_non_negative_index("steps_votes_grm5", "(get_base1(n_cats_grm, 3, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 3, "n_cats_grm", 1) - 1));
            validate_non_negative_index("steps_votes_grm5", "num_bills_grm", num_bills_grm);
            num_params_r__ += ((get_base1(n_cats_grm, 3, "n_cats_grm", 1) - 1) * num_bills_grm);
            current_statement_begin__ = 2341;
            validate_non_negative_index("steps_votes_grm6", "(get_base1(n_cats_grm, 4, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 4, "n_cats_grm", 1) - 1));
            validate_non_negative_index("steps_votes_grm6", "num_bills_grm", num_bills_grm);
            num_params_r__ += ((get_base1(n_cats_grm, 4, "n_cats_grm", 1) - 1) * num_bills_grm);
            current_statement_begin__ = 2342;
            validate_non_negative_index("steps_votes_grm7", "(get_base1(n_cats_grm, 5, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 5, "n_cats_grm", 1) - 1));
            validate_non_negative_index("steps_votes_grm7", "num_bills_grm", num_bills_grm);
            num_params_r__ += ((get_base1(n_cats_grm, 5, "n_cats_grm", 1) - 1) * num_bills_grm);
            current_statement_begin__ = 2343;
            validate_non_negative_index("steps_votes_grm8", "(get_base1(n_cats_grm, 6, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 6, "n_cats_grm", 1) - 1));
            validate_non_negative_index("steps_votes_grm8", "num_bills_grm", num_bills_grm);
            num_params_r__ += ((get_base1(n_cats_grm, 6, "n_cats_grm", 1) - 1) * num_bills_grm);
            current_statement_begin__ = 2344;
            validate_non_negative_index("steps_votes_grm9", "(get_base1(n_cats_grm, 7, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 7, "n_cats_grm", 1) - 1));
            validate_non_negative_index("steps_votes_grm9", "num_bills_grm", num_bills_grm);
            num_params_r__ += ((get_base1(n_cats_grm, 7, "n_cats_grm", 1) - 1) * num_bills_grm);
            current_statement_begin__ = 2345;
            validate_non_negative_index("steps_votes_grm10", "(get_base1(n_cats_grm, 8, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 8, "n_cats_grm", 1) - 1));
            validate_non_negative_index("steps_votes_grm10", "num_bills_grm", num_bills_grm);
            num_params_r__ += ((get_base1(n_cats_grm, 8, "n_cats_grm", 1) - 1) * num_bills_grm);
            current_statement_begin__ = 2346;
            num_params_r__ += 1;
            current_statement_begin__ = 2348;
            validate_non_negative_index("time_var_gp_free", "gp_N_fix", gp_N_fix);
            num_params_r__ += gp_N_fix;
            current_statement_begin__ = 2349;
            validate_non_negative_index("time_var_free", "((primitive_value(logical_gt(T, 1)) && primitive_value(logical_neq(time_proc, 4))) ? (num_legis - 1) : 0 )", ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_neq(time_proc, 4))) ? (num_legis - 1) : 0 ));
            num_params_r__ += ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_neq(time_proc, 4))) ? (num_legis - 1) : 0 );
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_irt_standard() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 2315;
        if (!(context__.contains_r("sigma_abs_free")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_abs_free missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_abs_free");
        pos__ = 0U;
        validate_non_negative_index("sigma_abs_free", "num_bills", num_bills);
        context__.validate_dims("parameter initialization", "sigma_abs_free", "vector_d", context__.to_vec(num_bills));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_abs_free(num_bills);
        size_t sigma_abs_free_j_1_max__ = num_bills;
        for (size_t j_1__ = 0; j_1__ < sigma_abs_free_j_1_max__; ++j_1__) {
            sigma_abs_free(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(sigma_abs_free);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_abs_free: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2316;
        if (!(context__.contains_r("L_full")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_full missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_full");
        pos__ = 0U;
        validate_non_negative_index("L_full", "num_legis", num_legis);
        context__.validate_dims("parameter initialization", "L_full", "vector_d", context__.to_vec(num_legis));
        Eigen::Matrix<double, Eigen::Dynamic, 1> L_full(num_legis);
        size_t L_full_j_1_max__ = num_legis;
        for (size_t j_1__ = 0; j_1__ < L_full_j_1_max__; ++j_1__) {
            L_full(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(L_full);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_full: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2317;
        if (!(context__.contains_r("m_sd_free")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable m_sd_free missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("m_sd_free");
        pos__ = 0U;
        validate_non_negative_index("m_sd_free", "gp_N_fix", gp_N_fix);
        context__.validate_dims("parameter initialization", "m_sd_free", "vector_d", context__.to_vec(gp_N_fix));
        Eigen::Matrix<double, Eigen::Dynamic, 1> m_sd_free(gp_N_fix);
        size_t m_sd_free_j_1_max__ = gp_N_fix;
        for (size_t j_1__ = 0; j_1__ < m_sd_free_j_1_max__; ++j_1__) {
            m_sd_free(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, m_sd_free);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable m_sd_free: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2318;
        if (!(context__.contains_r("gp_sd_free")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gp_sd_free missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gp_sd_free");
        pos__ = 0U;
        validate_non_negative_index("gp_sd_free", "gp_N_fix", gp_N_fix);
        context__.validate_dims("parameter initialization", "gp_sd_free", "vector_d", context__.to_vec(gp_N_fix));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gp_sd_free(gp_N_fix);
        size_t gp_sd_free_j_1_max__ = gp_N_fix;
        for (size_t j_1__ = 0; j_1__ < gp_sd_free_j_1_max__; ++j_1__) {
            gp_sd_free(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, gp_sd_free);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gp_sd_free: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2319;
        if (!(context__.contains_r("L_tp2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_tp2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_tp2");
        pos__ = 0U;
        validate_non_negative_index("L_tp2", "num_legis", num_legis);
        validate_non_negative_index("L_tp2", "gp_nT", gp_nT);
        context__.validate_dims("parameter initialization", "L_tp2", "vector_d", context__.to_vec(gp_nT,num_legis));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > L_tp2(gp_nT, Eigen::Matrix<double, Eigen::Dynamic, 1>(num_legis));
        size_t L_tp2_j_1_max__ = num_legis;
        size_t L_tp2_k_0_max__ = gp_nT;
        for (size_t j_1__ = 0; j_1__ < L_tp2_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < L_tp2_k_0_max__; ++k_0__) {
                L_tp2[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t L_tp2_i_0_max__ = gp_nT;
        for (size_t i_0__ = 0; i_0__ < L_tp2_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(L_tp2[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_tp2: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 2320;
        if (!(context__.contains_r("ls_int")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ls_int missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ls_int");
        pos__ = 0U;
        validate_non_negative_index("ls_int", "num_ls", num_ls);
        context__.validate_dims("parameter initialization", "ls_int", "vector_d", context__.to_vec(num_ls));
        Eigen::Matrix<double, Eigen::Dynamic, 1> ls_int(num_ls);
        size_t ls_int_j_1_max__ = num_ls;
        for (size_t j_1__ = 0; j_1__ < ls_int_j_1_max__; ++j_1__) {
            ls_int(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(ls_int);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ls_int: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2321;
        if (!(context__.contains_r("L_tp1_var")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_tp1_var missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_tp1_var");
        pos__ = 0U;
        validate_non_negative_index("L_tp1_var", "(logical_gt(T, 1) ? num_legis : 0 )", (logical_gt(T, 1) ? num_legis : 0 ));
        validate_non_negative_index("L_tp1_var", "(T - 1)", (T - 1));
        context__.validate_dims("parameter initialization", "L_tp1_var", "vector_d", context__.to_vec((T - 1),(logical_gt(T, 1) ? num_legis : 0 )));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > L_tp1_var((T - 1), Eigen::Matrix<double, Eigen::Dynamic, 1>((logical_gt(T, 1) ? num_legis : 0 )));
        size_t L_tp1_var_j_1_max__ = (logical_gt(T, 1) ? num_legis : 0 );
        size_t L_tp1_var_k_0_max__ = (T - 1);
        for (size_t j_1__ = 0; j_1__ < L_tp1_var_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < L_tp1_var_k_0_max__; ++k_0__) {
                L_tp1_var[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t L_tp1_var_i_0_max__ = (T - 1);
        for (size_t i_0__ = 0; i_0__ < L_tp1_var_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(L_tp1_var[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_tp1_var: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 2322;
        if (!(context__.contains_r("L_AR1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_AR1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_AR1");
        pos__ = 0U;
        validate_non_negative_index("L_AR1", "((primitive_value(logical_gt(T, 1)) && primitive_value(logical_eq(time_proc, 3))) ? num_legis : 0 )", ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_eq(time_proc, 3))) ? num_legis : 0 ));
        context__.validate_dims("parameter initialization", "L_AR1", "vector_d", context__.to_vec(((primitive_value(logical_gt(T, 1)) && primitive_value(logical_eq(time_proc, 3))) ? num_legis : 0 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> L_AR1(((primitive_value(logical_gt(T, 1)) && primitive_value(logical_eq(time_proc, 3))) ? num_legis : 0 ));
        size_t L_AR1_j_1_max__ = ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_eq(time_proc, 3))) ? num_legis : 0 );
        for (size_t j_1__ = 0; j_1__ < L_AR1_j_1_max__; ++j_1__) {
            L_AR1(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(-(.99), .99, L_AR1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_AR1: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2323;
        if (!(context__.contains_r("sigma_reg_free")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_reg_free missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_reg_free");
        pos__ = 0U;
        validate_non_negative_index("sigma_reg_free", "num_bills", num_bills);
        context__.validate_dims("parameter initialization", "sigma_reg_free", "vector_d", context__.to_vec(num_bills));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_reg_free(num_bills);
        size_t sigma_reg_free_j_1_max__ = num_bills;
        for (size_t j_1__ = 0; j_1__ < sigma_reg_free_j_1_max__; ++j_1__) {
            sigma_reg_free(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(sigma_reg_free);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_reg_free: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2325;
        if (!(context__.contains_r("legis_x")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable legis_x missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("legis_x");
        pos__ = 0U;
        validate_non_negative_index("legis_x", "LX", LX);
        context__.validate_dims("parameter initialization", "legis_x", "vector_d", context__.to_vec(LX));
        Eigen::Matrix<double, Eigen::Dynamic, 1> legis_x(LX);
        size_t legis_x_j_1_max__ = LX;
        for (size_t j_1__ = 0; j_1__ < legis_x_j_1_max__; ++j_1__) {
            legis_x(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(legis_x);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable legis_x: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2326;
        if (!(context__.contains_r("sigma_reg_x")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_reg_x missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_reg_x");
        pos__ = 0U;
        validate_non_negative_index("sigma_reg_x", "SRX", SRX);
        context__.validate_dims("parameter initialization", "sigma_reg_x", "vector_d", context__.to_vec(SRX));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_reg_x(SRX);
        size_t sigma_reg_x_j_1_max__ = SRX;
        for (size_t j_1__ = 0; j_1__ < sigma_reg_x_j_1_max__; ++j_1__) {
            sigma_reg_x(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(sigma_reg_x);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_reg_x: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2327;
        if (!(context__.contains_r("sigma_abs_x")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_abs_x missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_abs_x");
        pos__ = 0U;
        validate_non_negative_index("sigma_abs_x", "SAX", SAX);
        context__.validate_dims("parameter initialization", "sigma_abs_x", "vector_d", context__.to_vec(SAX));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_abs_x(SAX);
        size_t sigma_abs_x_j_1_max__ = SAX;
        for (size_t j_1__ = 0; j_1__ < sigma_abs_x_j_1_max__; ++j_1__) {
            sigma_abs_x(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(sigma_abs_x);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_abs_x: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2328;
        if (!(context__.contains_r("B_int_free")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable B_int_free missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("B_int_free");
        pos__ = 0U;
        validate_non_negative_index("B_int_free", "num_bills", num_bills);
        context__.validate_dims("parameter initialization", "B_int_free", "vector_d", context__.to_vec(num_bills));
        Eigen::Matrix<double, Eigen::Dynamic, 1> B_int_free(num_bills);
        size_t B_int_free_j_1_max__ = num_bills;
        for (size_t j_1__ = 0; j_1__ < B_int_free_j_1_max__; ++j_1__) {
            B_int_free(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(B_int_free);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable B_int_free: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2329;
        if (!(context__.contains_r("A_int_free")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable A_int_free missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("A_int_free");
        pos__ = 0U;
        validate_non_negative_index("A_int_free", "num_bills", num_bills);
        context__.validate_dims("parameter initialization", "A_int_free", "vector_d", context__.to_vec(num_bills));
        Eigen::Matrix<double, Eigen::Dynamic, 1> A_int_free(num_bills);
        size_t A_int_free_j_1_max__ = num_bills;
        for (size_t j_1__ = 0; j_1__ < A_int_free_j_1_max__; ++j_1__) {
            A_int_free(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(A_int_free);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable A_int_free: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2330;
        if (!(context__.contains_r("steps_votes3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable steps_votes3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("steps_votes3");
        pos__ = 0U;
        validate_non_negative_index("steps_votes3", "(get_base1(n_cats_rat, 1, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 1, "n_cats_rat", 1) - 1));
        context__.validate_dims("parameter initialization", "steps_votes3", "vector_d", context__.to_vec((get_base1(n_cats_rat, 1, "n_cats_rat", 1) - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> steps_votes3((get_base1(n_cats_rat, 1, "n_cats_rat", 1) - 1));
        size_t steps_votes3_j_1_max__ = (get_base1(n_cats_rat, 1, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes3_j_1_max__; ++j_1__) {
            steps_votes3(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.ordered_unconstrain(steps_votes3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable steps_votes3: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2331;
        if (!(context__.contains_r("steps_votes4")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable steps_votes4 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("steps_votes4");
        pos__ = 0U;
        validate_non_negative_index("steps_votes4", "(get_base1(n_cats_rat, 2, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 1));
        context__.validate_dims("parameter initialization", "steps_votes4", "vector_d", context__.to_vec((get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> steps_votes4((get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 1));
        size_t steps_votes4_j_1_max__ = (get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes4_j_1_max__; ++j_1__) {
            steps_votes4(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.ordered_unconstrain(steps_votes4);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable steps_votes4: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2332;
        if (!(context__.contains_r("steps_votes5")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable steps_votes5 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("steps_votes5");
        pos__ = 0U;
        validate_non_negative_index("steps_votes5", "(get_base1(n_cats_rat, 3, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 3, "n_cats_rat", 1) - 1));
        context__.validate_dims("parameter initialization", "steps_votes5", "vector_d", context__.to_vec((get_base1(n_cats_rat, 3, "n_cats_rat", 1) - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> steps_votes5((get_base1(n_cats_rat, 3, "n_cats_rat", 1) - 1));
        size_t steps_votes5_j_1_max__ = (get_base1(n_cats_rat, 3, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes5_j_1_max__; ++j_1__) {
            steps_votes5(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.ordered_unconstrain(steps_votes5);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable steps_votes5: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2333;
        if (!(context__.contains_r("steps_votes6")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable steps_votes6 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("steps_votes6");
        pos__ = 0U;
        validate_non_negative_index("steps_votes6", "(get_base1(n_cats_rat, 4, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 4, "n_cats_rat", 1) - 1));
        context__.validate_dims("parameter initialization", "steps_votes6", "vector_d", context__.to_vec((get_base1(n_cats_rat, 4, "n_cats_rat", 1) - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> steps_votes6((get_base1(n_cats_rat, 4, "n_cats_rat", 1) - 1));
        size_t steps_votes6_j_1_max__ = (get_base1(n_cats_rat, 4, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes6_j_1_max__; ++j_1__) {
            steps_votes6(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.ordered_unconstrain(steps_votes6);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable steps_votes6: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2334;
        if (!(context__.contains_r("steps_votes7")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable steps_votes7 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("steps_votes7");
        pos__ = 0U;
        validate_non_negative_index("steps_votes7", "(get_base1(n_cats_rat, 5, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 5, "n_cats_rat", 1) - 1));
        context__.validate_dims("parameter initialization", "steps_votes7", "vector_d", context__.to_vec((get_base1(n_cats_rat, 5, "n_cats_rat", 1) - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> steps_votes7((get_base1(n_cats_rat, 5, "n_cats_rat", 1) - 1));
        size_t steps_votes7_j_1_max__ = (get_base1(n_cats_rat, 5, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes7_j_1_max__; ++j_1__) {
            steps_votes7(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.ordered_unconstrain(steps_votes7);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable steps_votes7: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2335;
        if (!(context__.contains_r("steps_votes8")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable steps_votes8 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("steps_votes8");
        pos__ = 0U;
        validate_non_negative_index("steps_votes8", "(get_base1(n_cats_rat, 6, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 6, "n_cats_rat", 1) - 1));
        context__.validate_dims("parameter initialization", "steps_votes8", "vector_d", context__.to_vec((get_base1(n_cats_rat, 6, "n_cats_rat", 1) - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> steps_votes8((get_base1(n_cats_rat, 6, "n_cats_rat", 1) - 1));
        size_t steps_votes8_j_1_max__ = (get_base1(n_cats_rat, 6, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes8_j_1_max__; ++j_1__) {
            steps_votes8(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.ordered_unconstrain(steps_votes8);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable steps_votes8: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2336;
        if (!(context__.contains_r("steps_votes9")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable steps_votes9 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("steps_votes9");
        pos__ = 0U;
        validate_non_negative_index("steps_votes9", "(get_base1(n_cats_rat, 7, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 7, "n_cats_rat", 1) - 1));
        context__.validate_dims("parameter initialization", "steps_votes9", "vector_d", context__.to_vec((get_base1(n_cats_rat, 7, "n_cats_rat", 1) - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> steps_votes9((get_base1(n_cats_rat, 7, "n_cats_rat", 1) - 1));
        size_t steps_votes9_j_1_max__ = (get_base1(n_cats_rat, 7, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes9_j_1_max__; ++j_1__) {
            steps_votes9(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.ordered_unconstrain(steps_votes9);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable steps_votes9: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2337;
        if (!(context__.contains_r("steps_votes10")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable steps_votes10 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("steps_votes10");
        pos__ = 0U;
        validate_non_negative_index("steps_votes10", "(get_base1(n_cats_rat, 8, \"n_cats_rat\", 1) - 1)", (get_base1(n_cats_rat, 8, "n_cats_rat", 1) - 1));
        context__.validate_dims("parameter initialization", "steps_votes10", "vector_d", context__.to_vec((get_base1(n_cats_rat, 8, "n_cats_rat", 1) - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> steps_votes10((get_base1(n_cats_rat, 8, "n_cats_rat", 1) - 1));
        size_t steps_votes10_j_1_max__ = (get_base1(n_cats_rat, 8, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes10_j_1_max__; ++j_1__) {
            steps_votes10(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.ordered_unconstrain(steps_votes10);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable steps_votes10: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2338;
        if (!(context__.contains_r("steps_votes_grm3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable steps_votes_grm3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("steps_votes_grm3");
        pos__ = 0U;
        validate_non_negative_index("steps_votes_grm3", "(get_base1(n_cats_grm, 1, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 1, "n_cats_grm", 1) - 1));
        validate_non_negative_index("steps_votes_grm3", "num_bills_grm", num_bills_grm);
        context__.validate_dims("parameter initialization", "steps_votes_grm3", "vector_d", context__.to_vec(num_bills_grm,(get_base1(n_cats_grm, 1, "n_cats_grm", 1) - 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > steps_votes_grm3(num_bills_grm, Eigen::Matrix<double, Eigen::Dynamic, 1>((get_base1(n_cats_grm, 1, "n_cats_grm", 1) - 1)));
        size_t steps_votes_grm3_j_1_max__ = (get_base1(n_cats_grm, 1, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm3_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm3_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm3_k_0_max__; ++k_0__) {
                steps_votes_grm3[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t steps_votes_grm3_i_0_max__ = num_bills_grm;
        for (size_t i_0__ = 0; i_0__ < steps_votes_grm3_i_0_max__; ++i_0__) {
            try {
                writer__.ordered_unconstrain(steps_votes_grm3[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable steps_votes_grm3: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 2339;
        if (!(context__.contains_r("steps_votes_grm4")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable steps_votes_grm4 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("steps_votes_grm4");
        pos__ = 0U;
        validate_non_negative_index("steps_votes_grm4", "(get_base1(n_cats_grm, 2, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 2, "n_cats_grm", 1) - 1));
        validate_non_negative_index("steps_votes_grm4", "num_bills_grm", num_bills_grm);
        context__.validate_dims("parameter initialization", "steps_votes_grm4", "vector_d", context__.to_vec(num_bills_grm,(get_base1(n_cats_grm, 2, "n_cats_grm", 1) - 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > steps_votes_grm4(num_bills_grm, Eigen::Matrix<double, Eigen::Dynamic, 1>((get_base1(n_cats_grm, 2, "n_cats_grm", 1) - 1)));
        size_t steps_votes_grm4_j_1_max__ = (get_base1(n_cats_grm, 2, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm4_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm4_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm4_k_0_max__; ++k_0__) {
                steps_votes_grm4[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t steps_votes_grm4_i_0_max__ = num_bills_grm;
        for (size_t i_0__ = 0; i_0__ < steps_votes_grm4_i_0_max__; ++i_0__) {
            try {
                writer__.ordered_unconstrain(steps_votes_grm4[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable steps_votes_grm4: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 2340;
        if (!(context__.contains_r("steps_votes_grm5")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable steps_votes_grm5 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("steps_votes_grm5");
        pos__ = 0U;
        validate_non_negative_index("steps_votes_grm5", "(get_base1(n_cats_grm, 3, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 3, "n_cats_grm", 1) - 1));
        validate_non_negative_index("steps_votes_grm5", "num_bills_grm", num_bills_grm);
        context__.validate_dims("parameter initialization", "steps_votes_grm5", "vector_d", context__.to_vec(num_bills_grm,(get_base1(n_cats_grm, 3, "n_cats_grm", 1) - 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > steps_votes_grm5(num_bills_grm, Eigen::Matrix<double, Eigen::Dynamic, 1>((get_base1(n_cats_grm, 3, "n_cats_grm", 1) - 1)));
        size_t steps_votes_grm5_j_1_max__ = (get_base1(n_cats_grm, 3, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm5_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm5_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm5_k_0_max__; ++k_0__) {
                steps_votes_grm5[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t steps_votes_grm5_i_0_max__ = num_bills_grm;
        for (size_t i_0__ = 0; i_0__ < steps_votes_grm5_i_0_max__; ++i_0__) {
            try {
                writer__.ordered_unconstrain(steps_votes_grm5[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable steps_votes_grm5: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 2341;
        if (!(context__.contains_r("steps_votes_grm6")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable steps_votes_grm6 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("steps_votes_grm6");
        pos__ = 0U;
        validate_non_negative_index("steps_votes_grm6", "(get_base1(n_cats_grm, 4, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 4, "n_cats_grm", 1) - 1));
        validate_non_negative_index("steps_votes_grm6", "num_bills_grm", num_bills_grm);
        context__.validate_dims("parameter initialization", "steps_votes_grm6", "vector_d", context__.to_vec(num_bills_grm,(get_base1(n_cats_grm, 4, "n_cats_grm", 1) - 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > steps_votes_grm6(num_bills_grm, Eigen::Matrix<double, Eigen::Dynamic, 1>((get_base1(n_cats_grm, 4, "n_cats_grm", 1) - 1)));
        size_t steps_votes_grm6_j_1_max__ = (get_base1(n_cats_grm, 4, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm6_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm6_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm6_k_0_max__; ++k_0__) {
                steps_votes_grm6[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t steps_votes_grm6_i_0_max__ = num_bills_grm;
        for (size_t i_0__ = 0; i_0__ < steps_votes_grm6_i_0_max__; ++i_0__) {
            try {
                writer__.ordered_unconstrain(steps_votes_grm6[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable steps_votes_grm6: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 2342;
        if (!(context__.contains_r("steps_votes_grm7")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable steps_votes_grm7 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("steps_votes_grm7");
        pos__ = 0U;
        validate_non_negative_index("steps_votes_grm7", "(get_base1(n_cats_grm, 5, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 5, "n_cats_grm", 1) - 1));
        validate_non_negative_index("steps_votes_grm7", "num_bills_grm", num_bills_grm);
        context__.validate_dims("parameter initialization", "steps_votes_grm7", "vector_d", context__.to_vec(num_bills_grm,(get_base1(n_cats_grm, 5, "n_cats_grm", 1) - 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > steps_votes_grm7(num_bills_grm, Eigen::Matrix<double, Eigen::Dynamic, 1>((get_base1(n_cats_grm, 5, "n_cats_grm", 1) - 1)));
        size_t steps_votes_grm7_j_1_max__ = (get_base1(n_cats_grm, 5, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm7_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm7_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm7_k_0_max__; ++k_0__) {
                steps_votes_grm7[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t steps_votes_grm7_i_0_max__ = num_bills_grm;
        for (size_t i_0__ = 0; i_0__ < steps_votes_grm7_i_0_max__; ++i_0__) {
            try {
                writer__.ordered_unconstrain(steps_votes_grm7[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable steps_votes_grm7: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 2343;
        if (!(context__.contains_r("steps_votes_grm8")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable steps_votes_grm8 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("steps_votes_grm8");
        pos__ = 0U;
        validate_non_negative_index("steps_votes_grm8", "(get_base1(n_cats_grm, 6, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 6, "n_cats_grm", 1) - 1));
        validate_non_negative_index("steps_votes_grm8", "num_bills_grm", num_bills_grm);
        context__.validate_dims("parameter initialization", "steps_votes_grm8", "vector_d", context__.to_vec(num_bills_grm,(get_base1(n_cats_grm, 6, "n_cats_grm", 1) - 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > steps_votes_grm8(num_bills_grm, Eigen::Matrix<double, Eigen::Dynamic, 1>((get_base1(n_cats_grm, 6, "n_cats_grm", 1) - 1)));
        size_t steps_votes_grm8_j_1_max__ = (get_base1(n_cats_grm, 6, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm8_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm8_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm8_k_0_max__; ++k_0__) {
                steps_votes_grm8[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t steps_votes_grm8_i_0_max__ = num_bills_grm;
        for (size_t i_0__ = 0; i_0__ < steps_votes_grm8_i_0_max__; ++i_0__) {
            try {
                writer__.ordered_unconstrain(steps_votes_grm8[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable steps_votes_grm8: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 2344;
        if (!(context__.contains_r("steps_votes_grm9")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable steps_votes_grm9 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("steps_votes_grm9");
        pos__ = 0U;
        validate_non_negative_index("steps_votes_grm9", "(get_base1(n_cats_grm, 7, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 7, "n_cats_grm", 1) - 1));
        validate_non_negative_index("steps_votes_grm9", "num_bills_grm", num_bills_grm);
        context__.validate_dims("parameter initialization", "steps_votes_grm9", "vector_d", context__.to_vec(num_bills_grm,(get_base1(n_cats_grm, 7, "n_cats_grm", 1) - 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > steps_votes_grm9(num_bills_grm, Eigen::Matrix<double, Eigen::Dynamic, 1>((get_base1(n_cats_grm, 7, "n_cats_grm", 1) - 1)));
        size_t steps_votes_grm9_j_1_max__ = (get_base1(n_cats_grm, 7, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm9_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm9_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm9_k_0_max__; ++k_0__) {
                steps_votes_grm9[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t steps_votes_grm9_i_0_max__ = num_bills_grm;
        for (size_t i_0__ = 0; i_0__ < steps_votes_grm9_i_0_max__; ++i_0__) {
            try {
                writer__.ordered_unconstrain(steps_votes_grm9[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable steps_votes_grm9: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 2345;
        if (!(context__.contains_r("steps_votes_grm10")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable steps_votes_grm10 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("steps_votes_grm10");
        pos__ = 0U;
        validate_non_negative_index("steps_votes_grm10", "(get_base1(n_cats_grm, 8, \"n_cats_grm\", 1) - 1)", (get_base1(n_cats_grm, 8, "n_cats_grm", 1) - 1));
        validate_non_negative_index("steps_votes_grm10", "num_bills_grm", num_bills_grm);
        context__.validate_dims("parameter initialization", "steps_votes_grm10", "vector_d", context__.to_vec(num_bills_grm,(get_base1(n_cats_grm, 8, "n_cats_grm", 1) - 1)));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > steps_votes_grm10(num_bills_grm, Eigen::Matrix<double, Eigen::Dynamic, 1>((get_base1(n_cats_grm, 8, "n_cats_grm", 1) - 1)));
        size_t steps_votes_grm10_j_1_max__ = (get_base1(n_cats_grm, 8, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm10_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm10_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm10_k_0_max__; ++k_0__) {
                steps_votes_grm10[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t steps_votes_grm10_i_0_max__ = num_bills_grm;
        for (size_t i_0__ = 0; i_0__ < steps_votes_grm10_i_0_max__; ++i_0__) {
            try {
                writer__.ordered_unconstrain(steps_votes_grm10[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable steps_votes_grm10: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 2346;
        if (!(context__.contains_r("extra_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable extra_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("extra_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "extra_sd", "double", context__.to_vec());
        double extra_sd(0);
        extra_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, extra_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable extra_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2348;
        if (!(context__.contains_r("time_var_gp_free")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable time_var_gp_free missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("time_var_gp_free");
        pos__ = 0U;
        validate_non_negative_index("time_var_gp_free", "gp_N_fix", gp_N_fix);
        context__.validate_dims("parameter initialization", "time_var_gp_free", "vector_d", context__.to_vec(gp_N_fix));
        Eigen::Matrix<double, Eigen::Dynamic, 1> time_var_gp_free(gp_N_fix);
        size_t time_var_gp_free_j_1_max__ = gp_N_fix;
        for (size_t j_1__ = 0; j_1__ < time_var_gp_free_j_1_max__; ++j_1__) {
            time_var_gp_free(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(time_var_gp_free);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable time_var_gp_free: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 2349;
        if (!(context__.contains_r("time_var_free")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable time_var_free missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("time_var_free");
        pos__ = 0U;
        validate_non_negative_index("time_var_free", "((primitive_value(logical_gt(T, 1)) && primitive_value(logical_neq(time_proc, 4))) ? (num_legis - 1) : 0 )", ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_neq(time_proc, 4))) ? (num_legis - 1) : 0 ));
        context__.validate_dims("parameter initialization", "time_var_free", "vector_d", context__.to_vec(((primitive_value(logical_gt(T, 1)) && primitive_value(logical_neq(time_proc, 4))) ? (num_legis - 1) : 0 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> time_var_free(((primitive_value(logical_gt(T, 1)) && primitive_value(logical_neq(time_proc, 4))) ? (num_legis - 1) : 0 ));
        size_t time_var_free_j_1_max__ = ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_neq(time_proc, 4))) ? (num_legis - 1) : 0 );
        for (size_t j_1__ = 0; j_1__ < time_var_free_j_1_max__; ++j_1__) {
            time_var_free(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, time_var_free);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable time_var_free: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 2315;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_abs_free;
            (void) sigma_abs_free;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_abs_free = in__.vector_constrain(num_bills, lp__);
            else
                sigma_abs_free = in__.vector_constrain(num_bills);

            current_statement_begin__ = 2316;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> L_full;
            (void) L_full;  // dummy to suppress unused var warning
            if (jacobian__)
                L_full = in__.vector_constrain(num_legis, lp__);
            else
                L_full = in__.vector_constrain(num_legis);

            current_statement_begin__ = 2317;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> m_sd_free;
            (void) m_sd_free;  // dummy to suppress unused var warning
            if (jacobian__)
                m_sd_free = in__.vector_lb_constrain(0, gp_N_fix, lp__);
            else
                m_sd_free = in__.vector_lb_constrain(0, gp_N_fix);

            current_statement_begin__ = 2318;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gp_sd_free;
            (void) gp_sd_free;  // dummy to suppress unused var warning
            if (jacobian__)
                gp_sd_free = in__.vector_lb_constrain(0, gp_N_fix, lp__);
            else
                gp_sd_free = in__.vector_lb_constrain(0, gp_N_fix);

            current_statement_begin__ = 2319;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > L_tp2;
            size_t L_tp2_d_0_max__ = gp_nT;
            L_tp2.reserve(L_tp2_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < L_tp2_d_0_max__; ++d_0__) {
                if (jacobian__)
                    L_tp2.push_back(in__.vector_constrain(num_legis, lp__));
                else
                    L_tp2.push_back(in__.vector_constrain(num_legis));
            }

            current_statement_begin__ = 2320;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ls_int;
            (void) ls_int;  // dummy to suppress unused var warning
            if (jacobian__)
                ls_int = in__.vector_constrain(num_ls, lp__);
            else
                ls_int = in__.vector_constrain(num_ls);

            current_statement_begin__ = 2321;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > L_tp1_var;
            size_t L_tp1_var_d_0_max__ = (T - 1);
            L_tp1_var.reserve(L_tp1_var_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < L_tp1_var_d_0_max__; ++d_0__) {
                if (jacobian__)
                    L_tp1_var.push_back(in__.vector_constrain((logical_gt(T, 1) ? num_legis : 0 ), lp__));
                else
                    L_tp1_var.push_back(in__.vector_constrain((logical_gt(T, 1) ? num_legis : 0 )));
            }

            current_statement_begin__ = 2322;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> L_AR1;
            (void) L_AR1;  // dummy to suppress unused var warning
            if (jacobian__)
                L_AR1 = in__.vector_lub_constrain(-(.99), .99, ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_eq(time_proc, 3))) ? num_legis : 0 ), lp__);
            else
                L_AR1 = in__.vector_lub_constrain(-(.99), .99, ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_eq(time_proc, 3))) ? num_legis : 0 ));

            current_statement_begin__ = 2323;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_reg_free;
            (void) sigma_reg_free;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_reg_free = in__.vector_constrain(num_bills, lp__);
            else
                sigma_reg_free = in__.vector_constrain(num_bills);

            current_statement_begin__ = 2325;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> legis_x;
            (void) legis_x;  // dummy to suppress unused var warning
            if (jacobian__)
                legis_x = in__.vector_constrain(LX, lp__);
            else
                legis_x = in__.vector_constrain(LX);

            current_statement_begin__ = 2326;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_reg_x;
            (void) sigma_reg_x;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_reg_x = in__.vector_constrain(SRX, lp__);
            else
                sigma_reg_x = in__.vector_constrain(SRX);

            current_statement_begin__ = 2327;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_abs_x;
            (void) sigma_abs_x;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_abs_x = in__.vector_constrain(SAX, lp__);
            else
                sigma_abs_x = in__.vector_constrain(SAX);

            current_statement_begin__ = 2328;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B_int_free;
            (void) B_int_free;  // dummy to suppress unused var warning
            if (jacobian__)
                B_int_free = in__.vector_constrain(num_bills, lp__);
            else
                B_int_free = in__.vector_constrain(num_bills);

            current_statement_begin__ = 2329;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> A_int_free;
            (void) A_int_free;  // dummy to suppress unused var warning
            if (jacobian__)
                A_int_free = in__.vector_constrain(num_bills, lp__);
            else
                A_int_free = in__.vector_constrain(num_bills);

            current_statement_begin__ = 2330;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> steps_votes3;
            (void) steps_votes3;  // dummy to suppress unused var warning
            if (jacobian__)
                steps_votes3 = in__.ordered_constrain((get_base1(n_cats_rat, 1, "n_cats_rat", 1) - 1), lp__);
            else
                steps_votes3 = in__.ordered_constrain((get_base1(n_cats_rat, 1, "n_cats_rat", 1) - 1));

            current_statement_begin__ = 2331;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> steps_votes4;
            (void) steps_votes4;  // dummy to suppress unused var warning
            if (jacobian__)
                steps_votes4 = in__.ordered_constrain((get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 1), lp__);
            else
                steps_votes4 = in__.ordered_constrain((get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 1));

            current_statement_begin__ = 2332;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> steps_votes5;
            (void) steps_votes5;  // dummy to suppress unused var warning
            if (jacobian__)
                steps_votes5 = in__.ordered_constrain((get_base1(n_cats_rat, 3, "n_cats_rat", 1) - 1), lp__);
            else
                steps_votes5 = in__.ordered_constrain((get_base1(n_cats_rat, 3, "n_cats_rat", 1) - 1));

            current_statement_begin__ = 2333;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> steps_votes6;
            (void) steps_votes6;  // dummy to suppress unused var warning
            if (jacobian__)
                steps_votes6 = in__.ordered_constrain((get_base1(n_cats_rat, 4, "n_cats_rat", 1) - 1), lp__);
            else
                steps_votes6 = in__.ordered_constrain((get_base1(n_cats_rat, 4, "n_cats_rat", 1) - 1));

            current_statement_begin__ = 2334;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> steps_votes7;
            (void) steps_votes7;  // dummy to suppress unused var warning
            if (jacobian__)
                steps_votes7 = in__.ordered_constrain((get_base1(n_cats_rat, 5, "n_cats_rat", 1) - 1), lp__);
            else
                steps_votes7 = in__.ordered_constrain((get_base1(n_cats_rat, 5, "n_cats_rat", 1) - 1));

            current_statement_begin__ = 2335;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> steps_votes8;
            (void) steps_votes8;  // dummy to suppress unused var warning
            if (jacobian__)
                steps_votes8 = in__.ordered_constrain((get_base1(n_cats_rat, 6, "n_cats_rat", 1) - 1), lp__);
            else
                steps_votes8 = in__.ordered_constrain((get_base1(n_cats_rat, 6, "n_cats_rat", 1) - 1));

            current_statement_begin__ = 2336;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> steps_votes9;
            (void) steps_votes9;  // dummy to suppress unused var warning
            if (jacobian__)
                steps_votes9 = in__.ordered_constrain((get_base1(n_cats_rat, 7, "n_cats_rat", 1) - 1), lp__);
            else
                steps_votes9 = in__.ordered_constrain((get_base1(n_cats_rat, 7, "n_cats_rat", 1) - 1));

            current_statement_begin__ = 2337;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> steps_votes10;
            (void) steps_votes10;  // dummy to suppress unused var warning
            if (jacobian__)
                steps_votes10 = in__.ordered_constrain((get_base1(n_cats_rat, 8, "n_cats_rat", 1) - 1), lp__);
            else
                steps_votes10 = in__.ordered_constrain((get_base1(n_cats_rat, 8, "n_cats_rat", 1) - 1));

            current_statement_begin__ = 2338;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > steps_votes_grm3;
            size_t steps_votes_grm3_d_0_max__ = num_bills_grm;
            steps_votes_grm3.reserve(steps_votes_grm3_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < steps_votes_grm3_d_0_max__; ++d_0__) {
                if (jacobian__)
                    steps_votes_grm3.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 1, "n_cats_grm", 1) - 1), lp__));
                else
                    steps_votes_grm3.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 1, "n_cats_grm", 1) - 1)));
            }

            current_statement_begin__ = 2339;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > steps_votes_grm4;
            size_t steps_votes_grm4_d_0_max__ = num_bills_grm;
            steps_votes_grm4.reserve(steps_votes_grm4_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < steps_votes_grm4_d_0_max__; ++d_0__) {
                if (jacobian__)
                    steps_votes_grm4.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 2, "n_cats_grm", 1) - 1), lp__));
                else
                    steps_votes_grm4.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 2, "n_cats_grm", 1) - 1)));
            }

            current_statement_begin__ = 2340;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > steps_votes_grm5;
            size_t steps_votes_grm5_d_0_max__ = num_bills_grm;
            steps_votes_grm5.reserve(steps_votes_grm5_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < steps_votes_grm5_d_0_max__; ++d_0__) {
                if (jacobian__)
                    steps_votes_grm5.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 3, "n_cats_grm", 1) - 1), lp__));
                else
                    steps_votes_grm5.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 3, "n_cats_grm", 1) - 1)));
            }

            current_statement_begin__ = 2341;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > steps_votes_grm6;
            size_t steps_votes_grm6_d_0_max__ = num_bills_grm;
            steps_votes_grm6.reserve(steps_votes_grm6_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < steps_votes_grm6_d_0_max__; ++d_0__) {
                if (jacobian__)
                    steps_votes_grm6.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 4, "n_cats_grm", 1) - 1), lp__));
                else
                    steps_votes_grm6.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 4, "n_cats_grm", 1) - 1)));
            }

            current_statement_begin__ = 2342;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > steps_votes_grm7;
            size_t steps_votes_grm7_d_0_max__ = num_bills_grm;
            steps_votes_grm7.reserve(steps_votes_grm7_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < steps_votes_grm7_d_0_max__; ++d_0__) {
                if (jacobian__)
                    steps_votes_grm7.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 5, "n_cats_grm", 1) - 1), lp__));
                else
                    steps_votes_grm7.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 5, "n_cats_grm", 1) - 1)));
            }

            current_statement_begin__ = 2343;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > steps_votes_grm8;
            size_t steps_votes_grm8_d_0_max__ = num_bills_grm;
            steps_votes_grm8.reserve(steps_votes_grm8_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < steps_votes_grm8_d_0_max__; ++d_0__) {
                if (jacobian__)
                    steps_votes_grm8.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 6, "n_cats_grm", 1) - 1), lp__));
                else
                    steps_votes_grm8.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 6, "n_cats_grm", 1) - 1)));
            }

            current_statement_begin__ = 2344;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > steps_votes_grm9;
            size_t steps_votes_grm9_d_0_max__ = num_bills_grm;
            steps_votes_grm9.reserve(steps_votes_grm9_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < steps_votes_grm9_d_0_max__; ++d_0__) {
                if (jacobian__)
                    steps_votes_grm9.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 7, "n_cats_grm", 1) - 1), lp__));
                else
                    steps_votes_grm9.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 7, "n_cats_grm", 1) - 1)));
            }

            current_statement_begin__ = 2345;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > steps_votes_grm10;
            size_t steps_votes_grm10_d_0_max__ = num_bills_grm;
            steps_votes_grm10.reserve(steps_votes_grm10_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < steps_votes_grm10_d_0_max__; ++d_0__) {
                if (jacobian__)
                    steps_votes_grm10.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 8, "n_cats_grm", 1) - 1), lp__));
                else
                    steps_votes_grm10.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 8, "n_cats_grm", 1) - 1)));
            }

            current_statement_begin__ = 2346;
            local_scalar_t__ extra_sd;
            (void) extra_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                extra_sd = in__.scalar_lb_constrain(0, lp__);
            else
                extra_sd = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 2348;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> time_var_gp_free;
            (void) time_var_gp_free;  // dummy to suppress unused var warning
            if (jacobian__)
                time_var_gp_free = in__.vector_constrain(gp_N_fix, lp__);
            else
                time_var_gp_free = in__.vector_constrain(gp_N_fix);

            current_statement_begin__ = 2349;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> time_var_free;
            (void) time_var_free;  // dummy to suppress unused var warning
            if (jacobian__)
                time_var_free = in__.vector_lb_constrain(0, ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_neq(time_proc, 4))) ? (num_legis - 1) : 0 ), lp__);
            else
                time_var_free = in__.vector_lb_constrain(0, ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_neq(time_proc, 4))) ? (num_legis - 1) : 0 ));

            // transformed parameters
            current_statement_begin__ = 2355;
            validate_non_negative_index("L_tp1", "(logical_gt(T, 1) ? num_legis : 0 )", (logical_gt(T, 1) ? num_legis : 0 ));
            validate_non_negative_index("L_tp1", "T", T);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > L_tp1(T, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>((logical_gt(T, 1) ? num_legis : 0 )));
            stan::math::initialize(L_tp1, DUMMY_VAR__);
            stan::math::fill(L_tp1, DUMMY_VAR__);

            current_statement_begin__ = 2356;
            validate_non_negative_index("time_var_full", "num_legis", num_legis);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> time_var_full(num_legis);
            stan::math::initialize(time_var_full, DUMMY_VAR__);
            stan::math::fill(time_var_full, DUMMY_VAR__);

            current_statement_begin__ = 2357;
            validate_non_negative_index("time_var_gp_full", "gp_N", gp_N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> time_var_gp_full(gp_N);
            stan::math::initialize(time_var_gp_full, DUMMY_VAR__);
            stan::math::fill(time_var_gp_full, DUMMY_VAR__);

            current_statement_begin__ = 2358;
            validate_non_negative_index("m_sd_full", "gp_N", gp_N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> m_sd_full(gp_N);
            stan::math::initialize(m_sd_full, DUMMY_VAR__);
            stan::math::fill(m_sd_full, DUMMY_VAR__);

            current_statement_begin__ = 2359;
            validate_non_negative_index("gp_sd_full", "gp_N", gp_N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gp_sd_full(gp_N);
            stan::math::initialize(gp_sd_full, DUMMY_VAR__);
            stan::math::fill(gp_sd_full, DUMMY_VAR__);

            current_statement_begin__ = 2360;
            validate_non_negative_index("varparams", "vP", vP);
            validate_non_negative_index("varparams", "S", S);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > varparams(S, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(vP));
            stan::math::initialize(varparams, DUMMY_VAR__);
            stan::math::fill(varparams, DUMMY_VAR__);

            current_statement_begin__ = 2361;
            validate_non_negative_index("dparams", "dP", dP);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> dparams(dP);
            stan::math::initialize(dparams, DUMMY_VAR__);
            stan::math::fill(dparams, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 2363;
            if (as_bool(logical_gt(T, 1))) {

                current_statement_begin__ = 2364;
                stan::math::assign(time_var_full, append_row(transpose(stan::math::to_row_vector(stan::math::array_builder<double >().add(time_sd).array())), time_var_free));
            }
            current_statement_begin__ = 2370;
            if (as_bool((primitive_value(logical_eq(within_chain, 0)) || primitive_value((primitive_value(logical_eq(within_chain, 1)) && primitive_value(logical_eq(S_type, 0))))))) {

                current_statement_begin__ = 2371;
                if (as_bool(logical_gt(T, 1))) {

                    current_statement_begin__ = 2372;
                    if (as_bool(logical_eq(time_proc, 3))) {

                        current_statement_begin__ = 2377;
                        for (int t = 1; t <= T; ++t) {

                            current_statement_begin__ = 2379;
                            if (as_bool(logical_eq(t, 1))) {

                                current_statement_begin__ = 2380;
                                stan::model::assign(L_tp1, 
                                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                            L_full, 
                                            "assigning variable L_tp1");
                            } else {

                                current_statement_begin__ = 2382;
                                stan::model::assign(L_tp1, 
                                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                            add(add(L_full, elt_multiply(L_AR1, get_base1(L_tp1, (t - 1), "L_tp1", 1))), elt_multiply(time_var_full, get_base1(L_tp1_var, (t - 1), "L_tp1_var", 1))), 
                                            "assigning variable L_tp1");
                            }
                        }
                    } else if (as_bool(logical_eq(time_proc, 2))) {

                        current_statement_begin__ = 2392;
                        for (int t = 1; t <= T; ++t) {

                            current_statement_begin__ = 2393;
                            if (as_bool(logical_eq(t, 1))) {

                                current_statement_begin__ = 2394;
                                stan::model::assign(L_tp1, 
                                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                            L_full, 
                                            "assigning variable L_tp1");
                            } else {

                                current_statement_begin__ = 2396;
                                stan::model::assign(L_tp1, 
                                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                            add(get_base1(L_tp1, (t - 1), "L_tp1", 1), elt_multiply(time_var_full, get_base1(L_tp1_var, (t - 1), "L_tp1_var", 1))), 
                                            "assigning variable L_tp1");
                            }
                        }
                    } else if (as_bool(logical_eq(time_proc, 4))) {

                        current_statement_begin__ = 2402;
                        stan::math::assign(L_tp1, L_tp2);
                        current_statement_begin__ = 2404;
                        stan::math::assign(m_sd_full, append_row(transpose(stan::math::to_row_vector(stan::math::array_builder<double >().add(m_sd_par).array())), m_sd_free));
                        current_statement_begin__ = 2406;
                        stan::math::assign(gp_sd_full, append_row(transpose(stan::math::to_row_vector(stan::math::array_builder<double >().add(gp_sd_par).array())), gp_sd_free));
                        current_statement_begin__ = 2408;
                        stan::math::assign(time_var_gp_full, append_row(gp_length, time_var_gp_free));
                    }
                }
            }
            current_statement_begin__ = 2417;
            if (as_bool(logical_gt(S, 0))) {

                current_statement_begin__ = 2418;
                if (as_bool(logical_eq(S_type, 1))) {

                    current_statement_begin__ = 2421;
                    for (int s = 1; s <= S; ++s) {

                        current_statement_begin__ = 2422;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 2424;
                            if (as_bool(logical_gt(num_ls, 0))) {

                                current_statement_begin__ = 2425;
                                stan::model::assign(varparams, 
                                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                            transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(L_full, s, "L_full", 1)).add(get_base1(ls_int, s, "ls_int", 1)).array())), 
                                            "assigning variable varparams");
                            } else {

                                current_statement_begin__ = 2427;
                                stan::model::assign(varparams, 
                                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                            transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(L_full, s, "L_full", 1)).array())), 
                                            "assigning variable varparams");
                            }
                        } else {

                            current_statement_begin__ = 2432;
                            if (as_bool(logical_eq(time_proc, 4))) {

                                current_statement_begin__ = 2433;
                                if (as_bool(logical_eq(s, 1))) {

                                    current_statement_begin__ = 2434;
                                    if (as_bool(logical_gt(num_ls, 0))) {

                                        current_statement_begin__ = 2435;
                                        stan::model::assign(varparams, 
                                                    stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                    append_row(to_vector(stan::model::rvalue(L_tp2, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "L_tp2")), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(ls_int, s, "ls_int", 1)).add(m_sd_par).add(gp_sd_par).add(get_base1(gp_length, 1, "gp_length", 1)).array()))), 
                                                    "assigning variable varparams");
                                    } else {

                                        current_statement_begin__ = 2438;
                                        stan::model::assign(varparams, 
                                                    stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                    append_row(to_vector(stan::model::rvalue(L_tp2, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "L_tp2")), transpose(stan::math::to_row_vector(stan::math::array_builder<double >().add(m_sd_par).add(gp_sd_par).add(get_base1(gp_length, 1, "gp_length", 1)).array()))), 
                                                    "assigning variable varparams");
                                    }
                                } else {

                                    current_statement_begin__ = 2443;
                                    if (as_bool(logical_gt(num_ls, 0))) {

                                        current_statement_begin__ = 2444;
                                        stan::model::assign(varparams, 
                                                    stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                    append_row(to_vector(stan::model::rvalue(L_tp2, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "L_tp2")), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(ls_int, s, "ls_int", 1)).add(get_base1(m_sd_free, (s - 1), "m_sd_free", 1)).add(get_base1(gp_sd_free, s, "gp_sd_free", 1)).add(get_base1(time_var_gp_free, s, "time_var_gp_free", 1)).array()))), 
                                                    "assigning variable varparams");
                                    } else {

                                        current_statement_begin__ = 2447;
                                        stan::model::assign(varparams, 
                                                    stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                    append_row(to_vector(stan::model::rvalue(L_tp2, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "L_tp2")), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(m_sd_free, (s - 1), "m_sd_free", 1)).add(get_base1(gp_sd_free, s, "gp_sd_free", 1)).add(get_base1(time_var_gp_free, s, "time_var_gp_free", 1)).array()))), 
                                                    "assigning variable varparams");
                                    }
                                }
                            } else {

                                current_statement_begin__ = 2454;
                                if (as_bool(logical_eq(time_proc, 3))) {

                                    current_statement_begin__ = 2456;
                                    if (as_bool(logical_eq(s, 1))) {

                                        current_statement_begin__ = 2457;
                                        if (as_bool(logical_gt(num_ls, 0))) {

                                            current_statement_begin__ = 2458;
                                            stan::model::assign(varparams, 
                                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                        append_row(get_base1(L_full, s, "L_full", 1), append_row(rep_vector(0, T), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(ls_int, s, "ls_int", 1)).add(get_base1(L_AR1, s, "L_AR1", 1)).add(time_sd).array())))), 
                                                        "assigning variable varparams");
                                        } else {

                                            current_statement_begin__ = 2461;
                                            stan::model::assign(varparams, 
                                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                        append_row(get_base1(L_full, s, "L_full", 1), append_row(rep_vector(0, T), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(L_AR1, s, "L_AR1", 1)).add(time_sd).array())))), 
                                                        "assigning variable varparams");
                                        }
                                    } else {

                                        current_statement_begin__ = 2466;
                                        if (as_bool(logical_gt(num_ls, 0))) {

                                            current_statement_begin__ = 2467;
                                            stan::model::assign(varparams, 
                                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                        append_row(get_base1(L_full, s, "L_full", 1), append_row(to_vector(stan::model::rvalue(L_tp1_var, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::cons_list(stan::model::index_uni((s - 1)), stan::model::nil_index_list())), "L_tp1_var")), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(ls_int, s, "ls_int", 1)).add(get_base1(L_AR1, s, "L_AR1", 1)).add(get_base1(time_var_free, (s - 1), "time_var_free", 1)).array())))), 
                                                        "assigning variable varparams");
                                        } else {

                                            current_statement_begin__ = 2470;
                                            stan::model::assign(varparams, 
                                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                        append_row(get_base1(L_full, s, "L_full", 1), append_row(to_vector(stan::model::rvalue(L_tp1_var, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::cons_list(stan::model::index_uni((s - 1)), stan::model::nil_index_list())), "L_tp1_var")), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(L_AR1, s, "L_AR1", 1)).add(get_base1(time_var_free, (s - 1), "time_var_free", 1)).array())))), 
                                                        "assigning variable varparams");
                                        }
                                    }
                                } else {

                                    current_statement_begin__ = 2478;
                                    if (as_bool(logical_eq(s, 1))) {

                                        current_statement_begin__ = 2479;
                                        if (as_bool(logical_gt(num_ls, 0))) {

                                            current_statement_begin__ = 2480;
                                            stan::model::assign(varparams, 
                                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                        append_row(get_base1(L_full, s, "L_full", 1), append_row(rep_vector(0, T), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(ls_int, s, "ls_int", 1)).add(time_sd).array())))), 
                                                        "assigning variable varparams");
                                        } else {

                                            current_statement_begin__ = 2483;
                                            stan::model::assign(varparams, 
                                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                        append_row(get_base1(L_full, s, "L_full", 1), append_row(rep_vector(0, T), transpose(stan::math::to_row_vector(stan::math::array_builder<double >().add(time_sd).array())))), 
                                                        "assigning variable varparams");
                                        }
                                    } else {

                                        current_statement_begin__ = 2488;
                                        if (as_bool(logical_gt(num_ls, 0))) {

                                            current_statement_begin__ = 2489;
                                            stan::model::assign(varparams, 
                                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                        append_row(get_base1(L_full, s, "L_full", 1), append_row(to_vector(stan::model::rvalue(L_tp1_var, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::cons_list(stan::model::index_uni((s - 1)), stan::model::nil_index_list())), "L_tp1_var")), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(ls_int, s, "ls_int", 1)).add(get_base1(time_var_free, (s - 1), "time_var_free", 1)).array())))), 
                                                        "assigning variable varparams");
                                        } else {

                                            current_statement_begin__ = 2492;
                                            stan::model::assign(varparams, 
                                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                        append_row(get_base1(L_full, s, "L_full", 1), append_row(to_vector(stan::model::rvalue(L_tp1_var, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::cons_list(stan::model::index_uni((s - 1)), stan::model::nil_index_list())), "L_tp1_var")), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(time_var_free, (s - 1), "time_var_free", 1)).array())))), 
                                                        "assigning variable varparams");
                                        }
                                    }
                                }
                            }
                        }
                    }
                    current_statement_begin__ = 2504;
                    stan::model::assign(dparams, 
                                stan::model::cons_list(stan::model::index_min_max(1, (dP - ((sum(n_cats_grm) - 8) * num_bills_grm))), stan::model::nil_index_list()), 
                                append_row(sigma_reg_free, append_row(B_int_free, append_row(sigma_abs_free, append_row(A_int_free, append_row(steps_votes3, append_row(steps_votes4, append_row(steps_votes5, append_row(steps_votes6, append_row(steps_votes7, append_row(steps_votes8, append_row(steps_votes9, append_row(steps_votes10, append_row(legis_x, append_row(sigma_reg_x, append_row(sigma_abs_x, extra_sd))))))))))))))), 
                                "assigning variable dparams");
                } else {

                    current_statement_begin__ = 2522;
                    for (int s = 1; s <= S; ++s) {

                        current_statement_begin__ = 2524;
                        stan::model::assign(varparams, 
                                    stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                    transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(sigma_reg_free, s, "sigma_reg_free", 1)).add(get_base1(B_int_free, s, "B_int_free", 1)).add(get_base1(sigma_abs_free, s, "sigma_abs_free", 1)).add(get_base1(A_int_free, s, "A_int_free", 1)).array())), 
                                    "assigning variable varparams");
                    }
                    current_statement_begin__ = 2528;
                    stan::model::assign(dparams, 
                                stan::model::cons_list(stan::model::index_min_max(1, ((dP - ((sum(n_cats_grm) - 8) * num_bills_grm)) - (num_legis * T))), stan::model::nil_index_list()), 
                                append_row(ls_int, append_row(steps_votes3, append_row(steps_votes4, append_row(steps_votes5, append_row(steps_votes6, append_row(steps_votes7, append_row(steps_votes8, append_row(steps_votes9, append_row(steps_votes10, append_row(legis_x, append_row(sigma_reg_x, append_row(sigma_abs_x, extra_sd)))))))))))), 
                                "assigning variable dparams");
                }
                {
                current_statement_begin__ = 2545;
                int skip(0);
                (void) skip;  // dummy to suppress unused var warning
                stan::math::fill(skip, std::numeric_limits<int>::min());


                current_statement_begin__ = 2546;
                if (as_bool(logical_eq(S_type, 1))) {

                    current_statement_begin__ = 2547;
                    stan::math::assign(skip, (dP - ((sum(n_cats_grm) - 8) * num_bills_grm)));
                } else {

                    current_statement_begin__ = 2549;
                    stan::math::assign(skip, ((dP - ((sum(n_cats_grm) - 8) * num_bills_grm)) - (num_legis * T)));
                }
                current_statement_begin__ = 2552;
                if (as_bool(logical_gt((get_base1(n_cats_grm, 1, "n_cats_grm", 1) - 1), 0))) {

                    current_statement_begin__ = 2553;
                    for (int c = 1; c <= 3; ++c) {

                        current_statement_begin__ = 2554;
                        stan::model::assign(dparams, 
                                    stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + num_bills_grm)), stan::model::nil_index_list()), 
                                    stan::model::rvalue(steps_votes_grm3, stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_min_max(1, num_bills_grm), stan::model::nil_index_list())), "steps_votes_grm3"), 
                                    "assigning variable dparams");
                        current_statement_begin__ = 2555;
                        stan::math::assign(skip, (skip + num_bills_grm));
                    }
                }
                current_statement_begin__ = 2559;
                if (as_bool(logical_gt((get_base1(n_cats_grm, 2, "n_cats_grm", 1) - 1), 0))) {

                    current_statement_begin__ = 2560;
                    for (int c = 1; c <= 4; ++c) {

                        current_statement_begin__ = 2561;
                        stan::model::assign(dparams, 
                                    stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + num_bills_grm)), stan::model::nil_index_list()), 
                                    stan::model::rvalue(steps_votes_grm4, stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_min_max(1, num_bills_grm), stan::model::nil_index_list())), "steps_votes_grm4"), 
                                    "assigning variable dparams");
                        current_statement_begin__ = 2562;
                        stan::math::assign(skip, (skip + num_bills_grm));
                    }
                }
                current_statement_begin__ = 2566;
                if (as_bool(logical_gt((get_base1(n_cats_grm, 3, "n_cats_grm", 1) - 1), 0))) {

                    current_statement_begin__ = 2567;
                    for (int c = 1; c <= 5; ++c) {

                        current_statement_begin__ = 2568;
                        stan::model::assign(dparams, 
                                    stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + num_bills_grm)), stan::model::nil_index_list()), 
                                    stan::model::rvalue(steps_votes_grm5, stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_min_max(1, num_bills_grm), stan::model::nil_index_list())), "steps_votes_grm5"), 
                                    "assigning variable dparams");
                        current_statement_begin__ = 2569;
                        stan::math::assign(skip, (skip + num_bills_grm));
                    }
                }
                current_statement_begin__ = 2573;
                if (as_bool(logical_gt((get_base1(n_cats_grm, 4, "n_cats_grm", 1) - 1), 0))) {

                    current_statement_begin__ = 2574;
                    for (int c = 1; c <= 6; ++c) {

                        current_statement_begin__ = 2575;
                        stan::model::assign(dparams, 
                                    stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + num_bills_grm)), stan::model::nil_index_list()), 
                                    stan::model::rvalue(steps_votes_grm6, stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_min_max(1, num_bills_grm), stan::model::nil_index_list())), "steps_votes_grm6"), 
                                    "assigning variable dparams");
                        current_statement_begin__ = 2576;
                        stan::math::assign(skip, (skip + num_bills_grm));
                    }
                }
                current_statement_begin__ = 2580;
                if (as_bool(logical_gt((get_base1(n_cats_grm, 5, "n_cats_grm", 1) - 1), 0))) {

                    current_statement_begin__ = 2581;
                    for (int c = 1; c <= 7; ++c) {

                        current_statement_begin__ = 2582;
                        stan::model::assign(dparams, 
                                    stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + num_bills_grm)), stan::model::nil_index_list()), 
                                    stan::model::rvalue(steps_votes_grm7, stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_min_max(1, num_bills_grm), stan::model::nil_index_list())), "steps_votes_grm7"), 
                                    "assigning variable dparams");
                        current_statement_begin__ = 2583;
                        stan::math::assign(skip, (skip + num_bills_grm));
                    }
                }
                current_statement_begin__ = 2587;
                if (as_bool(logical_gt((get_base1(n_cats_grm, 6, "n_cats_grm", 1) - 1), 0))) {

                    current_statement_begin__ = 2588;
                    for (int c = 1; c <= 8; ++c) {

                        current_statement_begin__ = 2589;
                        stan::model::assign(dparams, 
                                    stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + num_bills_grm)), stan::model::nil_index_list()), 
                                    stan::model::rvalue(steps_votes_grm8, stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_min_max(1, num_bills_grm), stan::model::nil_index_list())), "steps_votes_grm8"), 
                                    "assigning variable dparams");
                        current_statement_begin__ = 2590;
                        stan::math::assign(skip, (skip + num_bills_grm));
                    }
                }
                current_statement_begin__ = 2594;
                if (as_bool(logical_gt((get_base1(n_cats_grm, 7, "n_cats_grm", 1) - 1), 0))) {

                    current_statement_begin__ = 2595;
                    for (int c = 1; c <= 9; ++c) {

                        current_statement_begin__ = 2596;
                        stan::model::assign(dparams, 
                                    stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + num_bills_grm)), stan::model::nil_index_list()), 
                                    stan::model::rvalue(steps_votes_grm9, stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_min_max(1, num_bills_grm), stan::model::nil_index_list())), "steps_votes_grm9"), 
                                    "assigning variable dparams");
                        current_statement_begin__ = 2597;
                        stan::math::assign(skip, (skip + num_bills_grm));
                    }
                }
                current_statement_begin__ = 2601;
                if (as_bool(logical_gt((get_base1(n_cats_grm, 8, "n_cats_grm", 1) - 1), 0))) {

                    current_statement_begin__ = 2602;
                    for (int c = 1; c <= 10; ++c) {

                        current_statement_begin__ = 2603;
                        stan::model::assign(dparams, 
                                    stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + num_bills_grm)), stan::model::nil_index_list()), 
                                    stan::model::rvalue(steps_votes_grm10, stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_min_max(1, num_bills_grm), stan::model::nil_index_list())), "steps_votes_grm10"), 
                                    "assigning variable dparams");
                        current_statement_begin__ = 2604;
                        stan::math::assign(skip, (skip + num_bills_grm));
                    }
                }
                current_statement_begin__ = 2611;
                if (as_bool(logical_eq(S_type, 0))) {

                    current_statement_begin__ = 2612;
                    if (as_bool(logical_gt(T, 1))) {

                        current_statement_begin__ = 2613;
                        for (int l = 1; l <= num_legis; ++l) {

                            current_statement_begin__ = 2614;
                            stan::model::assign(dparams, 
                                        stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + T)), stan::model::nil_index_list()), 
                                        to_vector(stan::model::rvalue(L_tp1, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::cons_list(stan::model::index_uni(l), stan::model::nil_index_list())), "L_tp1")), 
                                        "assigning variable dparams");
                            current_statement_begin__ = 2615;
                            stan::math::assign(skip, (skip + T));
                        }
                    } else {

                        current_statement_begin__ = 2618;
                        stan::model::assign(dparams, 
                                    stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + num_legis)), stan::model::nil_index_list()), 
                                    L_full, 
                                    "assigning variable dparams");
                    }
                }
                }
            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 2355;
            size_t L_tp1_k_0_max__ = T;
            size_t L_tp1_j_1_max__ = (logical_gt(T, 1) ? num_legis : 0 );
            for (size_t k_0__ = 0; k_0__ < L_tp1_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < L_tp1_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(L_tp1[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: L_tp1" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable L_tp1: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 2356;
            size_t time_var_full_j_1_max__ = num_legis;
            for (size_t j_1__ = 0; j_1__ < time_var_full_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(time_var_full(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: time_var_full" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable time_var_full: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 2357;
            size_t time_var_gp_full_j_1_max__ = gp_N;
            for (size_t j_1__ = 0; j_1__ < time_var_gp_full_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(time_var_gp_full(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: time_var_gp_full" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable time_var_gp_full: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 2358;
            size_t m_sd_full_j_1_max__ = gp_N;
            for (size_t j_1__ = 0; j_1__ < m_sd_full_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(m_sd_full(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: m_sd_full" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable m_sd_full: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 2359;
            size_t gp_sd_full_j_1_max__ = gp_N;
            for (size_t j_1__ = 0; j_1__ < gp_sd_full_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(gp_sd_full(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: gp_sd_full" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable gp_sd_full: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 2360;
            size_t varparams_k_0_max__ = S;
            size_t varparams_j_1_max__ = vP;
            for (size_t k_0__ = 0; k_0__ < varparams_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < varparams_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(varparams[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: varparams" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable varparams: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 2361;
            size_t dparams_j_1_max__ = dP;
            for (size_t j_1__ = 0; j_1__ < dparams_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(dparams(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: dparams" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable dparams: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }

            // model body

            current_statement_begin__ = 2630;
            lp_accum__.add(normal_log<propto__>(legis_x, 0, 5));
            current_statement_begin__ = 2631;
            lp_accum__.add(normal_log<propto__>(sigma_abs_x, 0, 5));
            current_statement_begin__ = 2632;
            lp_accum__.add(normal_log<propto__>(sigma_reg_x, 0, 5));
            current_statement_begin__ = 2633;
            lp_accum__.add(exponential_log<propto__>(extra_sd, 1));
            current_statement_begin__ = 2635;
            if (as_bool((primitive_value((primitive_value(logical_eq(time_proc, 3)) && primitive_value((primitive_value(logical_eq(within_chain, 0)) || primitive_value((primitive_value(logical_eq(within_chain, 1)) && primitive_value(logical_eq(S_type, 0)))))))) && primitive_value(logical_gt(T, 1))))) {

                current_statement_begin__ = 2636;
                lp_accum__.add(normal_log<propto__>(L_AR1, 0, ar_sd));
            }
            current_statement_begin__ = 2642;
            if (as_bool(logical_gt(get_base1(n_cats_rat, 1, "n_cats_rat", 1), 1))) {

                current_statement_begin__ = 2643;
                for (int i = 1; i <= (get_base1(n_cats_rat, 1, "n_cats_rat", 1) - 2); ++i) {

                    current_statement_begin__ = 2644;
                    lp_accum__.add(normal_log<propto__>((get_base1(steps_votes3, (i + 1), "steps_votes3", 1) - get_base1(steps_votes3, i, "steps_votes3", 1)), 0, 5));
                }
            } else if (as_bool(logical_gt(get_base1(n_cats_rat, 2, "n_cats_rat", 1), 1))) {

                current_statement_begin__ = 2647;
                for (int i = 1; i <= (get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 2); ++i) {

                    current_statement_begin__ = 2648;
                    lp_accum__.add(normal_log<propto__>((get_base1(steps_votes4, (i + 1), "steps_votes4", 1) - get_base1(steps_votes4, i, "steps_votes4", 1)), 0, 5));
                }
            } else if (as_bool(logical_gt(get_base1(n_cats_rat, 3, "n_cats_rat", 1), 1))) {

                current_statement_begin__ = 2651;
                for (int i = 1; i <= (get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 2); ++i) {

                    current_statement_begin__ = 2652;
                    lp_accum__.add(normal_log<propto__>((get_base1(steps_votes5, (i + 1), "steps_votes5", 1) - get_base1(steps_votes5, i, "steps_votes5", 1)), 0, 5));
                }
            } else if (as_bool(logical_gt(get_base1(n_cats_rat, 4, "n_cats_rat", 1), 1))) {

                current_statement_begin__ = 2655;
                for (int i = 1; i <= (get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 2); ++i) {

                    current_statement_begin__ = 2656;
                    lp_accum__.add(normal_log<propto__>((get_base1(steps_votes6, (i + 1), "steps_votes6", 1) - get_base1(steps_votes6, i, "steps_votes6", 1)), 0, 5));
                }
            } else if (as_bool(logical_gt(get_base1(n_cats_rat, 5, "n_cats_rat", 1), 1))) {

                current_statement_begin__ = 2659;
                for (int i = 1; i <= (get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 2); ++i) {

                    current_statement_begin__ = 2660;
                    lp_accum__.add(normal_log<propto__>((get_base1(steps_votes7, (i + 1), "steps_votes7", 1) - get_base1(steps_votes7, i, "steps_votes7", 1)), 0, 5));
                }
            } else if (as_bool(logical_gt(get_base1(n_cats_rat, 6, "n_cats_rat", 1), 1))) {

                current_statement_begin__ = 2663;
                for (int i = 1; i <= (get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 2); ++i) {

                    current_statement_begin__ = 2664;
                    lp_accum__.add(normal_log<propto__>((get_base1(steps_votes8, (i + 1), "steps_votes8", 1) - get_base1(steps_votes8, i, "steps_votes8", 1)), 0, 5));
                }
            } else if (as_bool(logical_gt(get_base1(n_cats_rat, 7, "n_cats_rat", 1), 1))) {

                current_statement_begin__ = 2667;
                for (int i = 1; i <= (get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 2); ++i) {

                    current_statement_begin__ = 2668;
                    lp_accum__.add(normal_log<propto__>((get_base1(steps_votes9, (i + 1), "steps_votes9", 1) - get_base1(steps_votes9, i, "steps_votes9", 1)), 0, 5));
                }
            } else if (as_bool(logical_gt(get_base1(n_cats_rat, 8, "n_cats_rat", 1), 1))) {

                current_statement_begin__ = 2671;
                for (int i = 1; i <= (get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 2); ++i) {

                    current_statement_begin__ = 2672;
                    lp_accum__.add(normal_log<propto__>((get_base1(steps_votes10, (i + 1), "steps_votes10", 1) - get_base1(steps_votes10, i, "steps_votes10", 1)), 0, 5));
                }
            }
            current_statement_begin__ = 2675;
            if (as_bool(logical_gt(num_bills_grm, 1))) {

                current_statement_begin__ = 2676;
                if (as_bool(logical_gt(get_base1(n_cats_grm, 1, "n_cats_grm", 1), 1))) {

                    current_statement_begin__ = 2677;
                    for (int b = 1; b <= num_bills; ++b) {

                        current_statement_begin__ = 2678;
                        lp_accum__.add(normal_log<propto__>(get_base1(steps_votes_grm3, b, "steps_votes_grm3", 1), 0, 5));
                    }
                } else if (as_bool(logical_gt(get_base1(n_cats_grm, 2, "n_cats_grm", 1), 1))) {

                    current_statement_begin__ = 2681;
                    for (int b = 1; b <= num_bills; ++b) {

                        current_statement_begin__ = 2682;
                        lp_accum__.add(normal_log<propto__>(get_base1(steps_votes_grm4, b, "steps_votes_grm4", 1), 0, 5));
                    }
                } else if (as_bool(logical_gt(get_base1(n_cats_grm, 3, "n_cats_grm", 1), 1))) {

                    current_statement_begin__ = 2685;
                    for (int b = 1; b <= num_bills; ++b) {

                        current_statement_begin__ = 2686;
                        lp_accum__.add(normal_log<propto__>(get_base1(steps_votes_grm5, b, "steps_votes_grm5", 1), 0, 5));
                    }
                } else if (as_bool(logical_gt(get_base1(n_cats_grm, 4, "n_cats_grm", 1), 1))) {

                    current_statement_begin__ = 2689;
                    for (int b = 1; b <= num_bills; ++b) {

                        current_statement_begin__ = 2690;
                        lp_accum__.add(normal_log<propto__>(get_base1(steps_votes_grm6, b, "steps_votes_grm6", 1), 0, 5));
                    }
                } else if (as_bool(logical_gt(get_base1(n_cats_grm, 5, "n_cats_grm", 1), 1))) {

                    current_statement_begin__ = 2693;
                    for (int b = 1; b <= num_bills; ++b) {

                        current_statement_begin__ = 2694;
                        lp_accum__.add(normal_log<propto__>(get_base1(steps_votes_grm7, b, "steps_votes_grm7", 1), 0, 5));
                    }
                } else if (as_bool(logical_gt(get_base1(n_cats_grm, 6, "n_cats_grm", 1), 1))) {

                    current_statement_begin__ = 2697;
                    for (int b = 1; b <= num_bills; ++b) {

                        current_statement_begin__ = 2698;
                        lp_accum__.add(normal_log<propto__>(get_base1(steps_votes_grm8, b, "steps_votes_grm8", 1), 0, 5));
                    }
                } else if (as_bool(logical_gt(get_base1(n_cats_grm, 7, "n_cats_grm", 1), 1))) {

                    current_statement_begin__ = 2701;
                    for (int b = 1; b <= num_bills; ++b) {

                        current_statement_begin__ = 2702;
                        lp_accum__.add(normal_log<propto__>(get_base1(steps_votes_grm9, b, "steps_votes_grm9", 1), 0, 5));
                    }
                } else if (as_bool(logical_gt(get_base1(n_cats_grm, 8, "n_cats_grm", 1), 1))) {

                    current_statement_begin__ = 2705;
                    for (int b = 1; b <= num_bills; ++b) {

                        current_statement_begin__ = 2706;
                        lp_accum__.add(normal_log<propto__>(get_base1(steps_votes_grm10, b, "steps_votes_grm10", 1), 0, 5));
                    }
                }
            }
            current_statement_begin__ = 2712;
            if (as_bool((primitive_value((primitive_value(logical_eq(time_proc, 4)) && primitive_value((primitive_value(logical_eq(within_chain, 0)) || primitive_value((primitive_value(logical_eq(within_chain, 1)) && primitive_value(logical_eq(S_type, 0)))))))) && primitive_value(logical_gt(T, 1))))) {

                {
                current_statement_begin__ = 2714;
                validate_non_negative_index("cov", "T", T);
                validate_non_negative_index("cov", "T", T);
                validate_non_negative_index("cov", "gp_N", gp_N);
                std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > cov(gp_N, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(T, T));
                stan::math::initialize(cov, DUMMY_VAR__);
                stan::math::fill(cov, DUMMY_VAR__);

                current_statement_begin__ = 2715;
                validate_non_negative_index("L_cov", "T", T);
                validate_non_negative_index("L_cov", "T", T);
                validate_non_negative_index("L_cov", "gp_N", gp_N);
                std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > L_cov(gp_N, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(T, T));
                stan::math::initialize(L_cov, DUMMY_VAR__);
                stan::math::fill(L_cov, DUMMY_VAR__);


                current_statement_begin__ = 2718;
                for (int n = 1; n <= num_legis; ++n) {

                    current_statement_begin__ = 2722;
                    stan::model::assign(cov, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                add(cov_exp_quad(time_ind, get_base1(m_sd_full, n, "m_sd_full", 1), get_base1(time_var_full, n, "time_var_full", 1)), diag_matrix(rep_vector(square(get_base1(gp_sd_full, n, "gp_sd_full", 1)), T))), 
                                "assigning variable cov");
                    current_statement_begin__ = 2724;
                    stan::model::assign(L_cov, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                cholesky_decompose(get_base1(cov, n, "cov", 1)), 
                                "assigning variable L_cov");
                    current_statement_begin__ = 2726;
                    lp_accum__.add(multi_normal_cholesky_log<propto__>(to_vector(stan::model::rvalue(L_tp2, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "L_tp2")), add(rep_vector(0, T), get_base1(L_full, n, "L_full", 1)), get_base1(L_cov, n, "L_cov", 1)));
                }
                }
            }
            current_statement_begin__ = 2732;
            if (as_bool((primitive_value((primitive_value(logical_gt(T, 1)) && primitive_value(logical_neq(time_proc, 4)))) && primitive_value((primitive_value(logical_eq(within_chain, 1)) && primitive_value(logical_eq(S_type, 0))))))) {

                current_statement_begin__ = 2733;
                for (int t = 1; t <= (T - 1); ++t) {

                    current_statement_begin__ = 2734;
                    lp_accum__.add(normal_log<propto__>(get_base1(L_tp1_var, t, "L_tp1_var", 1), 0, 1));
                }
            }
            current_statement_begin__ = 2738;
            if (as_bool((primitive_value(logical_eq(within_chain, 0)) || primitive_value((primitive_value(logical_eq(within_chain, 1)) && primitive_value(logical_eq(S_type, 0))))))) {

                current_statement_begin__ = 2739;
                lp_accum__.add(normal_log<propto__>(ls_int, 0, legis_sd));
            }
            current_statement_begin__ = 2743;
            lp_accum__.add(normal_log<propto__>(B_int_free, 0, diff_reg_sd));
            current_statement_begin__ = 2744;
            lp_accum__.add(normal_log<propto__>(A_int_free, 0, diff_abs_sd));
            current_statement_begin__ = 2747;
            if (as_bool((primitive_value(logical_gt(T, 1)) && primitive_value((primitive_value(logical_eq(within_chain, 0)) || primitive_value((primitive_value(logical_eq(within_chain, 1)) && primitive_value(logical_eq(S_type, 0))))))))) {

                current_statement_begin__ = 2748;
                lp_accum__.add(normal_log<propto__>(time_var_free, 0, 1));
                current_statement_begin__ = 2749;
                lp_accum__.add(normal_log<propto__>(time_var_gp_free, 0, 1));
                current_statement_begin__ = 2750;
                lp_accum__.add(normal_log<propto__>(gp_sd_free, 0, 2));
                current_statement_begin__ = 2751;
                lp_accum__.add(normal_log<propto__>(m_sd_free, 0, 2));
            }
            current_statement_begin__ = 2760;
            if (as_bool((primitive_value(logical_eq(within_chain, 1)) && primitive_value(logical_eq(S_type, 1))))) {

                current_statement_begin__ = 2762;
                lp_accum__.add(normal_log<propto__>(sigma_reg_free, 0, discrim_reg_sd));
            } else {

                current_statement_begin__ = 2766;
                if (as_bool(logical_eq(const_type, 1))) {

                    current_statement_begin__ = 2767;
                    lp_accum__.add(id_params(L_full, restrict_high, restrict_low, fix_high, fix_low, sd_fix, 0, legis_sd, pstream__));
                    current_statement_begin__ = 2776;
                    lp_accum__.add(normal_log<propto__>(sigma_reg_free, 0, discrim_reg_sd));
                } else {

                    current_statement_begin__ = 2779;
                    lp_accum__.add(id_params(sigma_reg_free, restrict_high, restrict_low, fix_high, fix_low, sd_fix, 0, discrim_reg_sd, pstream__));
                    current_statement_begin__ = 2788;
                    lp_accum__.add(normal_log<propto__>(L_full, 0, legis_sd));
                }
                current_statement_begin__ = 2792;
                lp_accum__.add(normal_log<propto__>(sigma_abs_free, 0, discrim_abs_sd));
            }
            current_statement_begin__ = 2809;
            if (as_bool(logical_eq(within_chain, 1))) {

                current_statement_begin__ = 2810;
                lp_accum__.add(sum(map_rect<1, overT_functor__>(dparams, varparams, cont_shards, int_shards, pstream__)));
            } else {

                current_statement_begin__ = 2814;
                if (as_bool(logical_gt(N_int, 0))) {

                    current_statement_begin__ = 2815;
                    for (int n = 1; n <= N_int; ++n) {

                        current_statement_begin__ = 2818;
                        if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 1))) {

                            current_statement_begin__ = 2821;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 2822;
                                lp_accum__.add(bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1))));
                            } else {

                                current_statement_begin__ = 2824;
                                lp_accum__.add(bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1))));
                            }
                        } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 2))) {

                            current_statement_begin__ = 2828;
                            if (as_bool(logical_lt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                current_statement_begin__ = 2830;
                                if (as_bool(logical_eq(T, 1))) {

                                    current_statement_begin__ = 2831;
                                    lp_accum__.add(bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1))));
                                    current_statement_begin__ = 2832;
                                    lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                } else {

                                    current_statement_begin__ = 2835;
                                    lp_accum__.add(bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1))));
                                    current_statement_begin__ = 2836;
                                    lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                }
                            } else {

                                current_statement_begin__ = 2842;
                                if (as_bool(logical_eq(T, 1))) {

                                    current_statement_begin__ = 2843;
                                    lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                } else {

                                    current_statement_begin__ = 2846;
                                    lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                }
                            }
                        } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 3))) {

                            current_statement_begin__ = 2854;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 2856;
                                if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 3))) {

                                    current_statement_begin__ = 2857;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes3));
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 4))) {

                                    current_statement_begin__ = 2860;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes4));
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 5))) {

                                    current_statement_begin__ = 2863;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes5));
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 6))) {

                                    current_statement_begin__ = 2866;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes6));
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 7))) {

                                    current_statement_begin__ = 2869;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes7));
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 8))) {

                                    current_statement_begin__ = 2872;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes8));
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 9))) {

                                    current_statement_begin__ = 2875;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes9));
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 10))) {

                                    current_statement_begin__ = 2878;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes10));
                                }
                            } else {

                                current_statement_begin__ = 2883;
                                if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 3))) {

                                    current_statement_begin__ = 2884;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes3));
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 4))) {

                                    current_statement_begin__ = 2887;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes4));
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 5))) {

                                    current_statement_begin__ = 2890;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes5));
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 6))) {

                                    current_statement_begin__ = 2893;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes6));
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 7))) {

                                    current_statement_begin__ = 2896;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes7));
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 8))) {

                                    current_statement_begin__ = 2899;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes8));
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 9))) {

                                    current_statement_begin__ = 2902;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes9));
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 10))) {

                                    current_statement_begin__ = 2905;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes10));
                                }
                            }
                        } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 4))) {

                            current_statement_begin__ = 2911;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 2913;
                                if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 3))) {

                                    current_statement_begin__ = 2914;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                        current_statement_begin__ = 2916;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 2920;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes3));
                                        current_statement_begin__ = 2922;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 4))) {

                                    current_statement_begin__ = 2926;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                        current_statement_begin__ = 2928;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 2932;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes4));
                                        current_statement_begin__ = 2934;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 5))) {

                                    current_statement_begin__ = 2938;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                        current_statement_begin__ = 2940;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 2944;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes5));
                                        current_statement_begin__ = 2946;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 6))) {

                                    current_statement_begin__ = 2950;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                        current_statement_begin__ = 2952;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 2956;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes6));
                                        current_statement_begin__ = 2958;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 7))) {

                                    current_statement_begin__ = 2962;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                        current_statement_begin__ = 2964;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 2968;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes7));
                                        current_statement_begin__ = 2970;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 8))) {

                                    current_statement_begin__ = 2974;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                        current_statement_begin__ = 2976;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 2980;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes8));
                                        current_statement_begin__ = 2982;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 9))) {

                                    current_statement_begin__ = 2986;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                        current_statement_begin__ = 2988;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 2992;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes9));
                                        current_statement_begin__ = 2994;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 10))) {

                                    current_statement_begin__ = 2998;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                        current_statement_begin__ = 3000;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3004;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes10));
                                        current_statement_begin__ = 3006;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                }
                            } else {

                                current_statement_begin__ = 3012;
                                if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 3))) {

                                    current_statement_begin__ = 3013;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                        current_statement_begin__ = 3015;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3019;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes3));
                                        current_statement_begin__ = 3021;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 4))) {

                                    current_statement_begin__ = 3025;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                        current_statement_begin__ = 3027;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3031;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes4));
                                        current_statement_begin__ = 3033;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 5))) {

                                    current_statement_begin__ = 3037;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                        current_statement_begin__ = 3039;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3043;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes5));
                                        current_statement_begin__ = 3045;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 6))) {

                                    current_statement_begin__ = 3049;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                        current_statement_begin__ = 3051;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3055;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes6));
                                        current_statement_begin__ = 3057;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 7))) {

                                    current_statement_begin__ = 3061;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                        current_statement_begin__ = 3063;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3067;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes7));
                                        current_statement_begin__ = 3069;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 8))) {

                                    current_statement_begin__ = 3073;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                        current_statement_begin__ = 3075;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3079;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes8));
                                        current_statement_begin__ = 3081;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 9))) {

                                    current_statement_begin__ = 3085;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                        current_statement_begin__ = 3087;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3091;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes9));
                                        current_statement_begin__ = 3093;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_rat, n, "order_cats_rat", 1), 10))) {

                                    current_statement_begin__ = 3097;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_rat, n, "order_cats_rat", 1)))) {

                                        current_statement_begin__ = 3099;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3103;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), steps_votes10));
                                        current_statement_begin__ = 3105;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                }
                            }
                        } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 5))) {

                            current_statement_begin__ = 3114;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 3116;
                                if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 3))) {

                                    current_statement_begin__ = 3117;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm3, get_base1(bb, n, "bb", 1), "steps_votes_grm3", 1)));
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 4))) {

                                    current_statement_begin__ = 3120;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm4, get_base1(bb, n, "bb", 1), "steps_votes_grm4", 1)));
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 5))) {

                                    current_statement_begin__ = 3123;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm5, get_base1(bb, n, "bb", 1), "steps_votes_grm5", 1)));
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 6))) {

                                    current_statement_begin__ = 3126;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm6, get_base1(bb, n, "bb", 1), "steps_votes_grm6", 1)));
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 7))) {

                                    current_statement_begin__ = 3129;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm7, get_base1(bb, n, "bb", 1), "steps_votes_grm7", 1)));
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 8))) {

                                    current_statement_begin__ = 3132;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm8, get_base1(bb, n, "bb", 1), "steps_votes_grm8", 1)));
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 9))) {

                                    current_statement_begin__ = 3135;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm9, get_base1(bb, n, "bb", 1), "steps_votes_grm9", 1)));
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 10))) {

                                    current_statement_begin__ = 3138;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm10, get_base1(bb, n, "bb", 1), "steps_votes_grm10", 1)));
                                }
                            } else {

                                current_statement_begin__ = 3143;
                                if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 3))) {

                                    current_statement_begin__ = 3144;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm3, get_base1(bb, n, "bb", 1), "steps_votes_grm3", 1)));
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 4))) {

                                    current_statement_begin__ = 3147;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm4, get_base1(bb, n, "bb", 1), "steps_votes_grm4", 1)));
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 5))) {

                                    current_statement_begin__ = 3150;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm5, get_base1(bb, n, "bb", 1), "steps_votes_grm5", 1)));
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 6))) {

                                    current_statement_begin__ = 3153;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm6, get_base1(bb, n, "bb", 1), "steps_votes_grm6", 1)));
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 7))) {

                                    current_statement_begin__ = 3156;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm7, get_base1(bb, n, "bb", 1), "steps_votes_grm7", 1)));
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 8))) {

                                    current_statement_begin__ = 3159;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm8, get_base1(bb, n, "bb", 1), "steps_votes_grm8", 1)));
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 9))) {

                                    current_statement_begin__ = 3162;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm9, get_base1(bb, n, "bb", 1), "steps_votes_grm9", 1)));
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 10))) {

                                    current_statement_begin__ = 3165;
                                    lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm10, get_base1(bb, n, "bb", 1), "steps_votes_grm10", 1)));
                                }
                            }
                        } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 6))) {

                            current_statement_begin__ = 3173;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 3175;
                                if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 3))) {

                                    current_statement_begin__ = 3176;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                        current_statement_begin__ = 3178;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3182;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm3, get_base1(bb, n, "bb", 1), "steps_votes_grm3", 1)));
                                        current_statement_begin__ = 3184;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 4))) {

                                    current_statement_begin__ = 3188;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                        current_statement_begin__ = 3190;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3194;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm4, get_base1(bb, n, "bb", 1), "steps_votes_grm4", 1)));
                                        current_statement_begin__ = 3196;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 5))) {

                                    current_statement_begin__ = 3200;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                        current_statement_begin__ = 3202;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3206;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm5, get_base1(bb, n, "bb", 1), "steps_votes_grm5", 1)));
                                        current_statement_begin__ = 3208;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 6))) {

                                    current_statement_begin__ = 3212;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                        current_statement_begin__ = 3214;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3218;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm6, get_base1(bb, n, "bb", 1), "steps_votes_grm6", 1)));
                                        current_statement_begin__ = 3220;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 7))) {

                                    current_statement_begin__ = 3224;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                        current_statement_begin__ = 3226;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3230;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm7, get_base1(bb, n, "bb", 1), "steps_votes_grm7", 1)));
                                        current_statement_begin__ = 3232;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 8))) {

                                    current_statement_begin__ = 3236;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                        current_statement_begin__ = 3238;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3242;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm8, get_base1(bb, n, "bb", 1), "steps_votes_grm8", 1)));
                                        current_statement_begin__ = 3244;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 9))) {

                                    current_statement_begin__ = 3248;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                        current_statement_begin__ = 3250;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3254;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm9, get_base1(bb, n, "bb", 1), "steps_votes_grm9", 1)));
                                        current_statement_begin__ = 3256;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 10))) {

                                    current_statement_begin__ = 3260;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), get_base1(order_cats_grm, n, "order_cats_grm", 1)))) {

                                        current_statement_begin__ = 3262;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3266;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm10, get_base1(bb, n, "bb", 1), "steps_votes_grm10", 1)));
                                        current_statement_begin__ = 3268;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                }
                            } else {

                                current_statement_begin__ = 3274;
                                if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 3))) {

                                    current_statement_begin__ = 3275;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                        current_statement_begin__ = 3277;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3281;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm3, get_base1(bb, n, "bb", 1), "steps_votes_grm3", 1)));
                                        current_statement_begin__ = 3283;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 4))) {

                                    current_statement_begin__ = 3287;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                        current_statement_begin__ = 3289;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3293;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm4, get_base1(bb, n, "bb", 1), "steps_votes_grm4", 1)));
                                        current_statement_begin__ = 3295;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 5))) {

                                    current_statement_begin__ = 3299;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                        current_statement_begin__ = 3301;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3305;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm5, get_base1(bb, n, "bb", 1), "steps_votes_grm5", 1)));
                                        current_statement_begin__ = 3307;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 6))) {

                                    current_statement_begin__ = 3311;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                        current_statement_begin__ = 3313;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3317;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm6, get_base1(bb, n, "bb", 1), "steps_votes_grm6", 1)));
                                        current_statement_begin__ = 3319;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 7))) {

                                    current_statement_begin__ = 3323;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                        current_statement_begin__ = 3325;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3329;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm7, get_base1(bb, n, "bb", 1), "steps_votes_grm7", 1)));
                                        current_statement_begin__ = 3331;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 8))) {

                                    current_statement_begin__ = 3335;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                        current_statement_begin__ = 3337;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3341;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm8, get_base1(bb, n, "bb", 1), "steps_votes_grm8", 1)));
                                        current_statement_begin__ = 3343;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 9))) {

                                    current_statement_begin__ = 3347;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                        current_statement_begin__ = 3349;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3353;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm9, get_base1(bb, n, "bb", 1), "steps_votes_grm9", 1)));
                                        current_statement_begin__ = 3355;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                } else if (as_bool(logical_eq(get_base1(order_cats_grm, n, "order_cats_grm", 1), 10))) {

                                    current_statement_begin__ = 3359;
                                    if (as_bool(logical_gt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                        current_statement_begin__ = 3361;
                                        lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    } else {

                                        current_statement_begin__ = 3365;
                                        lp_accum__.add(ordered_logistic_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), get_base1(steps_votes_grm10, get_base1(bb, n, "bb", 1), "steps_votes_grm10", 1)));
                                        current_statement_begin__ = 3367;
                                        lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                    }
                                }
                            }
                        } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 7))) {

                            current_statement_begin__ = 3376;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 3377;
                                lp_accum__.add(poisson_log_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1))));
                            } else {

                                current_statement_begin__ = 3379;
                                lp_accum__.add(poisson_log_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1))));
                            }
                        } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 8))) {

                            current_statement_begin__ = 3388;
                            if (as_bool(logical_lt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                current_statement_begin__ = 3390;
                                if (as_bool(logical_eq(T, 1))) {

                                    current_statement_begin__ = 3391;
                                    lp_accum__.add(poisson_log_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1))));
                                    current_statement_begin__ = 3392;
                                    lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                } else {

                                    current_statement_begin__ = 3395;
                                    lp_accum__.add(poisson_log_log(get_base1(Y_int, n, "Y_int", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1))));
                                    current_statement_begin__ = 3396;
                                    lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                }
                            } else {

                                current_statement_begin__ = 3402;
                                if (as_bool(logical_eq(T, 1))) {

                                    current_statement_begin__ = 3403;
                                    lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                } else {

                                    current_statement_begin__ = 3406;
                                    lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                }
                            }
                        } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 13))) {

                            current_statement_begin__ = 3413;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 3415;
                                lp_accum__.add(bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), ((get_base1(ls_int, get_base1(ll, n, "ll", 1), "ls_int", 1) + get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1)) - stan::math::sqrt(square(((get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x))))))));
                            } else {

                                current_statement_begin__ = 3419;
                                lp_accum__.add(bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), ((get_base1(ls_int, get_base1(ll, n, "ll", 1), "ls_int", 1) + get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1)) - stan::math::sqrt(square(((get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x))))))));
                            }
                        } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 14))) {

                            current_statement_begin__ = 3426;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 3427;
                                if (as_bool(logical_lt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                    current_statement_begin__ = 3428;
                                    lp_accum__.add((stan::math::log(2) + bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), -(stan::math::sqrt(square(((get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)))))))));
                                    current_statement_begin__ = 3429;
                                    lp_accum__.add((stan::math::log(2) + bernoulli_logit_log(0, -(stan::math::sqrt(square(((get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)))))))));
                                } else {

                                    current_statement_begin__ = 3431;
                                    lp_accum__.add((stan::math::log(2) + bernoulli_logit_log(1, (0 - stan::math::sqrt(square(((get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)))))))));
                                }
                            } else {

                                current_statement_begin__ = 3435;
                                if (as_bool(logical_lt(get_base1(Y_int, n, "Y_int", 1), y_int_miss))) {

                                    current_statement_begin__ = 3436;
                                    lp_accum__.add((stan::math::log(2) + bernoulli_logit_log(get_base1(Y_int, n, "Y_int", 1), (0 - stan::math::sqrt(square(((get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)))))))));
                                    current_statement_begin__ = 3437;
                                    lp_accum__.add((stan::math::log(2) + bernoulli_logit_log(0, (0 - stan::math::sqrt(square(((get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)))))))));
                                } else {

                                    current_statement_begin__ = 3439;
                                    lp_accum__.add((stan::math::log(2) + bernoulli_logit_log(1, (0 - stan::math::sqrt(square(((get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x)) - (get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)))))))));
                                }
                            }
                        }
                    }
                }
                current_statement_begin__ = 3447;
                if (as_bool(logical_gt(N_cont, 0))) {

                    current_statement_begin__ = 3449;
                    for (int n = (N_int + 1); n <= N; ++n) {

                        current_statement_begin__ = 3450;
                        if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 9))) {

                            current_statement_begin__ = 3453;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 3454;
                                lp_accum__.add(normal_log(get_base1(Y_cont, (n - N_int), "Y_cont", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), extra_sd));
                            } else {

                                current_statement_begin__ = 3457;
                                lp_accum__.add(normal_log(get_base1(Y_cont, (n - N_int), "Y_cont", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), extra_sd));
                            }
                        } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 10))) {

                            current_statement_begin__ = 3466;
                            if (as_bool(logical_lt(get_base1(Y_cont, (n - N_int), "Y_cont", 1), y_cont_miss))) {

                                current_statement_begin__ = 3468;
                                if (as_bool(logical_eq(T, 1))) {

                                    current_statement_begin__ = 3469;
                                    lp_accum__.add(normal_log(get_base1(Y_cont, (n - N_int), "Y_cont", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), extra_sd));
                                    current_statement_begin__ = 3471;
                                    lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                } else {

                                    current_statement_begin__ = 3474;
                                    lp_accum__.add(normal_log(get_base1(Y_cont, (n - N_int), "Y_cont", 1), (((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1)), extra_sd));
                                    current_statement_begin__ = 3476;
                                    lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                }
                            } else {

                                current_statement_begin__ = 3482;
                                if (as_bool(logical_eq(T, 1))) {

                                    current_statement_begin__ = 3483;
                                    lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                } else {

                                    current_statement_begin__ = 3486;
                                    lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                }
                            }
                        } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 11))) {

                            current_statement_begin__ = 3494;
                            if (as_bool(logical_eq(T, 1))) {

                                current_statement_begin__ = 3495;
                                lp_accum__.add(lognormal_log(get_base1(Y_cont, (n - N_int), "Y_cont", 1), stan::math::exp((((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1))), extra_sd));
                            } else {

                                current_statement_begin__ = 3498;
                                lp_accum__.add(lognormal_log(get_base1(Y_cont, (n - N_int), "Y_cont", 1), stan::math::exp((((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1))), extra_sd));
                            }
                        } else if (as_bool(logical_eq(get_base1(mm, n, "mm", 1), 12))) {

                            current_statement_begin__ = 3505;
                            if (as_bool(logical_lt(get_base1(Y_cont, (n - N_int), "Y_cont", 1), y_cont_miss))) {

                                current_statement_begin__ = 3507;
                                if (as_bool(logical_eq(T, 1))) {

                                    current_statement_begin__ = 3508;
                                    lp_accum__.add(lognormal_log(get_base1(Y_cont, (n - N_int), "Y_cont", 1), stan::math::exp((((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1))), extra_sd));
                                    current_statement_begin__ = 3510;
                                    lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                } else {

                                    current_statement_begin__ = 3513;
                                    lp_accum__.add(lognormal_log(get_base1(Y_cont, (n - N_int), "Y_cont", 1), stan::math::exp((((get_base1(sigma_reg_free, get_base1(bb, n, "bb", 1), "sigma_reg_free", 1) + multiply(stan::model::rvalue(srx_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "srx_pred"), sigma_reg_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(B_int_free, get_base1(bb, n, "bb", 1), "B_int_free", 1))), extra_sd));
                                    current_statement_begin__ = 3515;
                                    lp_accum__.add(bernoulli_logit_log(0, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                }
                            } else {

                                current_statement_begin__ = 3521;
                                if (as_bool(logical_eq(T, 1))) {

                                    current_statement_begin__ = 3522;
                                    lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(L_full, get_base1(ll, n, "ll", 1), "L_full", 1) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                } else {

                                    current_statement_begin__ = 3525;
                                    lp_accum__.add(bernoulli_logit_log(1, (((get_base1(sigma_abs_free, get_base1(bb, n, "bb", 1), "sigma_abs_free", 1) + multiply(stan::model::rvalue(sax_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "sax_pred"), sigma_abs_x)) * (get_base1(get_base1(L_tp1, get_base1(time, n, "time", 1), "L_tp1", 1), get_base1(ll, n, "ll", 1), "L_tp1", 2) + multiply(stan::model::rvalue(legis_pred, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "legis_pred"), legis_x))) - get_base1(A_int_free, get_base1(bb, n, "bb", 1), "A_int_free", 1))));
                                }
                            }
                        }
                    }
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma_abs_free");
        names__.push_back("L_full");
        names__.push_back("m_sd_free");
        names__.push_back("gp_sd_free");
        names__.push_back("L_tp2");
        names__.push_back("ls_int");
        names__.push_back("L_tp1_var");
        names__.push_back("L_AR1");
        names__.push_back("sigma_reg_free");
        names__.push_back("legis_x");
        names__.push_back("sigma_reg_x");
        names__.push_back("sigma_abs_x");
        names__.push_back("B_int_free");
        names__.push_back("A_int_free");
        names__.push_back("steps_votes3");
        names__.push_back("steps_votes4");
        names__.push_back("steps_votes5");
        names__.push_back("steps_votes6");
        names__.push_back("steps_votes7");
        names__.push_back("steps_votes8");
        names__.push_back("steps_votes9");
        names__.push_back("steps_votes10");
        names__.push_back("steps_votes_grm3");
        names__.push_back("steps_votes_grm4");
        names__.push_back("steps_votes_grm5");
        names__.push_back("steps_votes_grm6");
        names__.push_back("steps_votes_grm7");
        names__.push_back("steps_votes_grm8");
        names__.push_back("steps_votes_grm9");
        names__.push_back("steps_votes_grm10");
        names__.push_back("extra_sd");
        names__.push_back("time_var_gp_free");
        names__.push_back("time_var_free");
        names__.push_back("L_tp1");
        names__.push_back("time_var_full");
        names__.push_back("time_var_gp_full");
        names__.push_back("m_sd_full");
        names__.push_back("gp_sd_full");
        names__.push_back("varparams");
        names__.push_back("dparams");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(num_bills);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_legis);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(gp_N_fix);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(gp_N_fix);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(gp_nT);
        dims__.push_back(num_legis);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_ls);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((T - 1));
        dims__.push_back((logical_gt(T, 1) ? num_legis : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((primitive_value(logical_gt(T, 1)) && primitive_value(logical_eq(time_proc, 3))) ? num_legis : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_bills);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(LX);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(SRX);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(SAX);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_bills);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_bills);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((get_base1(n_cats_rat, 1, "n_cats_rat", 1) - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((get_base1(n_cats_rat, 3, "n_cats_rat", 1) - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((get_base1(n_cats_rat, 4, "n_cats_rat", 1) - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((get_base1(n_cats_rat, 5, "n_cats_rat", 1) - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((get_base1(n_cats_rat, 6, "n_cats_rat", 1) - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((get_base1(n_cats_rat, 7, "n_cats_rat", 1) - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((get_base1(n_cats_rat, 8, "n_cats_rat", 1) - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_bills_grm);
        dims__.push_back((get_base1(n_cats_grm, 1, "n_cats_grm", 1) - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_bills_grm);
        dims__.push_back((get_base1(n_cats_grm, 2, "n_cats_grm", 1) - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_bills_grm);
        dims__.push_back((get_base1(n_cats_grm, 3, "n_cats_grm", 1) - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_bills_grm);
        dims__.push_back((get_base1(n_cats_grm, 4, "n_cats_grm", 1) - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_bills_grm);
        dims__.push_back((get_base1(n_cats_grm, 5, "n_cats_grm", 1) - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_bills_grm);
        dims__.push_back((get_base1(n_cats_grm, 6, "n_cats_grm", 1) - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_bills_grm);
        dims__.push_back((get_base1(n_cats_grm, 7, "n_cats_grm", 1) - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_bills_grm);
        dims__.push_back((get_base1(n_cats_grm, 8, "n_cats_grm", 1) - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(gp_N_fix);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((primitive_value(logical_gt(T, 1)) && primitive_value(logical_neq(time_proc, 4))) ? (num_legis - 1) : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back((logical_gt(T, 1) ? num_legis : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_legis);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(gp_N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(gp_N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(gp_N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dims__.push_back(vP);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(dP);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_irt_standard_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_abs_free = in__.vector_constrain(num_bills);
        size_t sigma_abs_free_j_1_max__ = num_bills;
        for (size_t j_1__ = 0; j_1__ < sigma_abs_free_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_abs_free(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> L_full = in__.vector_constrain(num_legis);
        size_t L_full_j_1_max__ = num_legis;
        for (size_t j_1__ = 0; j_1__ < L_full_j_1_max__; ++j_1__) {
            vars__.push_back(L_full(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> m_sd_free = in__.vector_lb_constrain(0, gp_N_fix);
        size_t m_sd_free_j_1_max__ = gp_N_fix;
        for (size_t j_1__ = 0; j_1__ < m_sd_free_j_1_max__; ++j_1__) {
            vars__.push_back(m_sd_free(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> gp_sd_free = in__.vector_lb_constrain(0, gp_N_fix);
        size_t gp_sd_free_j_1_max__ = gp_N_fix;
        for (size_t j_1__ = 0; j_1__ < gp_sd_free_j_1_max__; ++j_1__) {
            vars__.push_back(gp_sd_free(j_1__));
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > L_tp2;
        size_t L_tp2_d_0_max__ = gp_nT;
        L_tp2.reserve(L_tp2_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < L_tp2_d_0_max__; ++d_0__) {
            L_tp2.push_back(in__.vector_constrain(num_legis));
        }
        size_t L_tp2_j_1_max__ = num_legis;
        size_t L_tp2_k_0_max__ = gp_nT;
        for (size_t j_1__ = 0; j_1__ < L_tp2_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < L_tp2_k_0_max__; ++k_0__) {
                vars__.push_back(L_tp2[k_0__](j_1__));
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> ls_int = in__.vector_constrain(num_ls);
        size_t ls_int_j_1_max__ = num_ls;
        for (size_t j_1__ = 0; j_1__ < ls_int_j_1_max__; ++j_1__) {
            vars__.push_back(ls_int(j_1__));
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > L_tp1_var;
        size_t L_tp1_var_d_0_max__ = (T - 1);
        L_tp1_var.reserve(L_tp1_var_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < L_tp1_var_d_0_max__; ++d_0__) {
            L_tp1_var.push_back(in__.vector_constrain((logical_gt(T, 1) ? num_legis : 0 )));
        }
        size_t L_tp1_var_j_1_max__ = (logical_gt(T, 1) ? num_legis : 0 );
        size_t L_tp1_var_k_0_max__ = (T - 1);
        for (size_t j_1__ = 0; j_1__ < L_tp1_var_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < L_tp1_var_k_0_max__; ++k_0__) {
                vars__.push_back(L_tp1_var[k_0__](j_1__));
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> L_AR1 = in__.vector_lub_constrain(-(.99), .99, ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_eq(time_proc, 3))) ? num_legis : 0 ));
        size_t L_AR1_j_1_max__ = ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_eq(time_proc, 3))) ? num_legis : 0 );
        for (size_t j_1__ = 0; j_1__ < L_AR1_j_1_max__; ++j_1__) {
            vars__.push_back(L_AR1(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_reg_free = in__.vector_constrain(num_bills);
        size_t sigma_reg_free_j_1_max__ = num_bills;
        for (size_t j_1__ = 0; j_1__ < sigma_reg_free_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_reg_free(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> legis_x = in__.vector_constrain(LX);
        size_t legis_x_j_1_max__ = LX;
        for (size_t j_1__ = 0; j_1__ < legis_x_j_1_max__; ++j_1__) {
            vars__.push_back(legis_x(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_reg_x = in__.vector_constrain(SRX);
        size_t sigma_reg_x_j_1_max__ = SRX;
        for (size_t j_1__ = 0; j_1__ < sigma_reg_x_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_reg_x(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_abs_x = in__.vector_constrain(SAX);
        size_t sigma_abs_x_j_1_max__ = SAX;
        for (size_t j_1__ = 0; j_1__ < sigma_abs_x_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_abs_x(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> B_int_free = in__.vector_constrain(num_bills);
        size_t B_int_free_j_1_max__ = num_bills;
        for (size_t j_1__ = 0; j_1__ < B_int_free_j_1_max__; ++j_1__) {
            vars__.push_back(B_int_free(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> A_int_free = in__.vector_constrain(num_bills);
        size_t A_int_free_j_1_max__ = num_bills;
        for (size_t j_1__ = 0; j_1__ < A_int_free_j_1_max__; ++j_1__) {
            vars__.push_back(A_int_free(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> steps_votes3 = in__.ordered_constrain((get_base1(n_cats_rat, 1, "n_cats_rat", 1) - 1));
        size_t steps_votes3_j_1_max__ = (get_base1(n_cats_rat, 1, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes3_j_1_max__; ++j_1__) {
            vars__.push_back(steps_votes3(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> steps_votes4 = in__.ordered_constrain((get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 1));
        size_t steps_votes4_j_1_max__ = (get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes4_j_1_max__; ++j_1__) {
            vars__.push_back(steps_votes4(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> steps_votes5 = in__.ordered_constrain((get_base1(n_cats_rat, 3, "n_cats_rat", 1) - 1));
        size_t steps_votes5_j_1_max__ = (get_base1(n_cats_rat, 3, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes5_j_1_max__; ++j_1__) {
            vars__.push_back(steps_votes5(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> steps_votes6 = in__.ordered_constrain((get_base1(n_cats_rat, 4, "n_cats_rat", 1) - 1));
        size_t steps_votes6_j_1_max__ = (get_base1(n_cats_rat, 4, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes6_j_1_max__; ++j_1__) {
            vars__.push_back(steps_votes6(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> steps_votes7 = in__.ordered_constrain((get_base1(n_cats_rat, 5, "n_cats_rat", 1) - 1));
        size_t steps_votes7_j_1_max__ = (get_base1(n_cats_rat, 5, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes7_j_1_max__; ++j_1__) {
            vars__.push_back(steps_votes7(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> steps_votes8 = in__.ordered_constrain((get_base1(n_cats_rat, 6, "n_cats_rat", 1) - 1));
        size_t steps_votes8_j_1_max__ = (get_base1(n_cats_rat, 6, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes8_j_1_max__; ++j_1__) {
            vars__.push_back(steps_votes8(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> steps_votes9 = in__.ordered_constrain((get_base1(n_cats_rat, 7, "n_cats_rat", 1) - 1));
        size_t steps_votes9_j_1_max__ = (get_base1(n_cats_rat, 7, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes9_j_1_max__; ++j_1__) {
            vars__.push_back(steps_votes9(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> steps_votes10 = in__.ordered_constrain((get_base1(n_cats_rat, 8, "n_cats_rat", 1) - 1));
        size_t steps_votes10_j_1_max__ = (get_base1(n_cats_rat, 8, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes10_j_1_max__; ++j_1__) {
            vars__.push_back(steps_votes10(j_1__));
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > steps_votes_grm3;
        size_t steps_votes_grm3_d_0_max__ = num_bills_grm;
        steps_votes_grm3.reserve(steps_votes_grm3_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < steps_votes_grm3_d_0_max__; ++d_0__) {
            steps_votes_grm3.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 1, "n_cats_grm", 1) - 1)));
        }
        size_t steps_votes_grm3_j_1_max__ = (get_base1(n_cats_grm, 1, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm3_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm3_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm3_k_0_max__; ++k_0__) {
                vars__.push_back(steps_votes_grm3[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > steps_votes_grm4;
        size_t steps_votes_grm4_d_0_max__ = num_bills_grm;
        steps_votes_grm4.reserve(steps_votes_grm4_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < steps_votes_grm4_d_0_max__; ++d_0__) {
            steps_votes_grm4.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 2, "n_cats_grm", 1) - 1)));
        }
        size_t steps_votes_grm4_j_1_max__ = (get_base1(n_cats_grm, 2, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm4_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm4_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm4_k_0_max__; ++k_0__) {
                vars__.push_back(steps_votes_grm4[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > steps_votes_grm5;
        size_t steps_votes_grm5_d_0_max__ = num_bills_grm;
        steps_votes_grm5.reserve(steps_votes_grm5_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < steps_votes_grm5_d_0_max__; ++d_0__) {
            steps_votes_grm5.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 3, "n_cats_grm", 1) - 1)));
        }
        size_t steps_votes_grm5_j_1_max__ = (get_base1(n_cats_grm, 3, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm5_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm5_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm5_k_0_max__; ++k_0__) {
                vars__.push_back(steps_votes_grm5[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > steps_votes_grm6;
        size_t steps_votes_grm6_d_0_max__ = num_bills_grm;
        steps_votes_grm6.reserve(steps_votes_grm6_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < steps_votes_grm6_d_0_max__; ++d_0__) {
            steps_votes_grm6.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 4, "n_cats_grm", 1) - 1)));
        }
        size_t steps_votes_grm6_j_1_max__ = (get_base1(n_cats_grm, 4, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm6_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm6_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm6_k_0_max__; ++k_0__) {
                vars__.push_back(steps_votes_grm6[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > steps_votes_grm7;
        size_t steps_votes_grm7_d_0_max__ = num_bills_grm;
        steps_votes_grm7.reserve(steps_votes_grm7_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < steps_votes_grm7_d_0_max__; ++d_0__) {
            steps_votes_grm7.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 5, "n_cats_grm", 1) - 1)));
        }
        size_t steps_votes_grm7_j_1_max__ = (get_base1(n_cats_grm, 5, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm7_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm7_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm7_k_0_max__; ++k_0__) {
                vars__.push_back(steps_votes_grm7[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > steps_votes_grm8;
        size_t steps_votes_grm8_d_0_max__ = num_bills_grm;
        steps_votes_grm8.reserve(steps_votes_grm8_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < steps_votes_grm8_d_0_max__; ++d_0__) {
            steps_votes_grm8.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 6, "n_cats_grm", 1) - 1)));
        }
        size_t steps_votes_grm8_j_1_max__ = (get_base1(n_cats_grm, 6, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm8_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm8_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm8_k_0_max__; ++k_0__) {
                vars__.push_back(steps_votes_grm8[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > steps_votes_grm9;
        size_t steps_votes_grm9_d_0_max__ = num_bills_grm;
        steps_votes_grm9.reserve(steps_votes_grm9_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < steps_votes_grm9_d_0_max__; ++d_0__) {
            steps_votes_grm9.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 7, "n_cats_grm", 1) - 1)));
        }
        size_t steps_votes_grm9_j_1_max__ = (get_base1(n_cats_grm, 7, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm9_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm9_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm9_k_0_max__; ++k_0__) {
                vars__.push_back(steps_votes_grm9[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > steps_votes_grm10;
        size_t steps_votes_grm10_d_0_max__ = num_bills_grm;
        steps_votes_grm10.reserve(steps_votes_grm10_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < steps_votes_grm10_d_0_max__; ++d_0__) {
            steps_votes_grm10.push_back(in__.ordered_constrain((get_base1(n_cats_grm, 8, "n_cats_grm", 1) - 1)));
        }
        size_t steps_votes_grm10_j_1_max__ = (get_base1(n_cats_grm, 8, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm10_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm10_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm10_k_0_max__; ++k_0__) {
                vars__.push_back(steps_votes_grm10[k_0__](j_1__));
            }
        }

        double extra_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(extra_sd);

        Eigen::Matrix<double, Eigen::Dynamic, 1> time_var_gp_free = in__.vector_constrain(gp_N_fix);
        size_t time_var_gp_free_j_1_max__ = gp_N_fix;
        for (size_t j_1__ = 0; j_1__ < time_var_gp_free_j_1_max__; ++j_1__) {
            vars__.push_back(time_var_gp_free(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> time_var_free = in__.vector_lb_constrain(0, ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_neq(time_proc, 4))) ? (num_legis - 1) : 0 ));
        size_t time_var_free_j_1_max__ = ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_neq(time_proc, 4))) ? (num_legis - 1) : 0 );
        for (size_t j_1__ = 0; j_1__ < time_var_free_j_1_max__; ++j_1__) {
            vars__.push_back(time_var_free(j_1__));
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 2355;
            validate_non_negative_index("L_tp1", "(logical_gt(T, 1) ? num_legis : 0 )", (logical_gt(T, 1) ? num_legis : 0 ));
            validate_non_negative_index("L_tp1", "T", T);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > L_tp1(T, Eigen::Matrix<double, Eigen::Dynamic, 1>((logical_gt(T, 1) ? num_legis : 0 )));
            stan::math::initialize(L_tp1, DUMMY_VAR__);
            stan::math::fill(L_tp1, DUMMY_VAR__);

            current_statement_begin__ = 2356;
            validate_non_negative_index("time_var_full", "num_legis", num_legis);
            Eigen::Matrix<double, Eigen::Dynamic, 1> time_var_full(num_legis);
            stan::math::initialize(time_var_full, DUMMY_VAR__);
            stan::math::fill(time_var_full, DUMMY_VAR__);

            current_statement_begin__ = 2357;
            validate_non_negative_index("time_var_gp_full", "gp_N", gp_N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> time_var_gp_full(gp_N);
            stan::math::initialize(time_var_gp_full, DUMMY_VAR__);
            stan::math::fill(time_var_gp_full, DUMMY_VAR__);

            current_statement_begin__ = 2358;
            validate_non_negative_index("m_sd_full", "gp_N", gp_N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> m_sd_full(gp_N);
            stan::math::initialize(m_sd_full, DUMMY_VAR__);
            stan::math::fill(m_sd_full, DUMMY_VAR__);

            current_statement_begin__ = 2359;
            validate_non_negative_index("gp_sd_full", "gp_N", gp_N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> gp_sd_full(gp_N);
            stan::math::initialize(gp_sd_full, DUMMY_VAR__);
            stan::math::fill(gp_sd_full, DUMMY_VAR__);

            current_statement_begin__ = 2360;
            validate_non_negative_index("varparams", "vP", vP);
            validate_non_negative_index("varparams", "S", S);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > varparams(S, Eigen::Matrix<double, Eigen::Dynamic, 1>(vP));
            stan::math::initialize(varparams, DUMMY_VAR__);
            stan::math::fill(varparams, DUMMY_VAR__);

            current_statement_begin__ = 2361;
            validate_non_negative_index("dparams", "dP", dP);
            Eigen::Matrix<double, Eigen::Dynamic, 1> dparams(dP);
            stan::math::initialize(dparams, DUMMY_VAR__);
            stan::math::fill(dparams, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 2363;
            if (as_bool(logical_gt(T, 1))) {

                current_statement_begin__ = 2364;
                stan::math::assign(time_var_full, append_row(transpose(stan::math::to_row_vector(stan::math::array_builder<double >().add(time_sd).array())), time_var_free));
            }
            current_statement_begin__ = 2370;
            if (as_bool((primitive_value(logical_eq(within_chain, 0)) || primitive_value((primitive_value(logical_eq(within_chain, 1)) && primitive_value(logical_eq(S_type, 0))))))) {

                current_statement_begin__ = 2371;
                if (as_bool(logical_gt(T, 1))) {

                    current_statement_begin__ = 2372;
                    if (as_bool(logical_eq(time_proc, 3))) {

                        current_statement_begin__ = 2377;
                        for (int t = 1; t <= T; ++t) {

                            current_statement_begin__ = 2379;
                            if (as_bool(logical_eq(t, 1))) {

                                current_statement_begin__ = 2380;
                                stan::model::assign(L_tp1, 
                                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                            L_full, 
                                            "assigning variable L_tp1");
                            } else {

                                current_statement_begin__ = 2382;
                                stan::model::assign(L_tp1, 
                                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                            add(add(L_full, elt_multiply(L_AR1, get_base1(L_tp1, (t - 1), "L_tp1", 1))), elt_multiply(time_var_full, get_base1(L_tp1_var, (t - 1), "L_tp1_var", 1))), 
                                            "assigning variable L_tp1");
                            }
                        }
                    } else if (as_bool(logical_eq(time_proc, 2))) {

                        current_statement_begin__ = 2392;
                        for (int t = 1; t <= T; ++t) {

                            current_statement_begin__ = 2393;
                            if (as_bool(logical_eq(t, 1))) {

                                current_statement_begin__ = 2394;
                                stan::model::assign(L_tp1, 
                                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                            L_full, 
                                            "assigning variable L_tp1");
                            } else {

                                current_statement_begin__ = 2396;
                                stan::model::assign(L_tp1, 
                                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                            add(get_base1(L_tp1, (t - 1), "L_tp1", 1), elt_multiply(time_var_full, get_base1(L_tp1_var, (t - 1), "L_tp1_var", 1))), 
                                            "assigning variable L_tp1");
                            }
                        }
                    } else if (as_bool(logical_eq(time_proc, 4))) {

                        current_statement_begin__ = 2402;
                        stan::math::assign(L_tp1, L_tp2);
                        current_statement_begin__ = 2404;
                        stan::math::assign(m_sd_full, append_row(transpose(stan::math::to_row_vector(stan::math::array_builder<double >().add(m_sd_par).array())), m_sd_free));
                        current_statement_begin__ = 2406;
                        stan::math::assign(gp_sd_full, append_row(transpose(stan::math::to_row_vector(stan::math::array_builder<double >().add(gp_sd_par).array())), gp_sd_free));
                        current_statement_begin__ = 2408;
                        stan::math::assign(time_var_gp_full, append_row(gp_length, time_var_gp_free));
                    }
                }
            }
            current_statement_begin__ = 2417;
            if (as_bool(logical_gt(S, 0))) {

                current_statement_begin__ = 2418;
                if (as_bool(logical_eq(S_type, 1))) {

                    current_statement_begin__ = 2421;
                    for (int s = 1; s <= S; ++s) {

                        current_statement_begin__ = 2422;
                        if (as_bool(logical_eq(T, 1))) {

                            current_statement_begin__ = 2424;
                            if (as_bool(logical_gt(num_ls, 0))) {

                                current_statement_begin__ = 2425;
                                stan::model::assign(varparams, 
                                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                            transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(L_full, s, "L_full", 1)).add(get_base1(ls_int, s, "ls_int", 1)).array())), 
                                            "assigning variable varparams");
                            } else {

                                current_statement_begin__ = 2427;
                                stan::model::assign(varparams, 
                                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                            transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(L_full, s, "L_full", 1)).array())), 
                                            "assigning variable varparams");
                            }
                        } else {

                            current_statement_begin__ = 2432;
                            if (as_bool(logical_eq(time_proc, 4))) {

                                current_statement_begin__ = 2433;
                                if (as_bool(logical_eq(s, 1))) {

                                    current_statement_begin__ = 2434;
                                    if (as_bool(logical_gt(num_ls, 0))) {

                                        current_statement_begin__ = 2435;
                                        stan::model::assign(varparams, 
                                                    stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                    append_row(to_vector(stan::model::rvalue(L_tp2, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "L_tp2")), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(ls_int, s, "ls_int", 1)).add(m_sd_par).add(gp_sd_par).add(get_base1(gp_length, 1, "gp_length", 1)).array()))), 
                                                    "assigning variable varparams");
                                    } else {

                                        current_statement_begin__ = 2438;
                                        stan::model::assign(varparams, 
                                                    stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                    append_row(to_vector(stan::model::rvalue(L_tp2, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "L_tp2")), transpose(stan::math::to_row_vector(stan::math::array_builder<double >().add(m_sd_par).add(gp_sd_par).add(get_base1(gp_length, 1, "gp_length", 1)).array()))), 
                                                    "assigning variable varparams");
                                    }
                                } else {

                                    current_statement_begin__ = 2443;
                                    if (as_bool(logical_gt(num_ls, 0))) {

                                        current_statement_begin__ = 2444;
                                        stan::model::assign(varparams, 
                                                    stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                    append_row(to_vector(stan::model::rvalue(L_tp2, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "L_tp2")), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(ls_int, s, "ls_int", 1)).add(get_base1(m_sd_free, (s - 1), "m_sd_free", 1)).add(get_base1(gp_sd_free, s, "gp_sd_free", 1)).add(get_base1(time_var_gp_free, s, "time_var_gp_free", 1)).array()))), 
                                                    "assigning variable varparams");
                                    } else {

                                        current_statement_begin__ = 2447;
                                        stan::model::assign(varparams, 
                                                    stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                    append_row(to_vector(stan::model::rvalue(L_tp2, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "L_tp2")), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(m_sd_free, (s - 1), "m_sd_free", 1)).add(get_base1(gp_sd_free, s, "gp_sd_free", 1)).add(get_base1(time_var_gp_free, s, "time_var_gp_free", 1)).array()))), 
                                                    "assigning variable varparams");
                                    }
                                }
                            } else {

                                current_statement_begin__ = 2454;
                                if (as_bool(logical_eq(time_proc, 3))) {

                                    current_statement_begin__ = 2456;
                                    if (as_bool(logical_eq(s, 1))) {

                                        current_statement_begin__ = 2457;
                                        if (as_bool(logical_gt(num_ls, 0))) {

                                            current_statement_begin__ = 2458;
                                            stan::model::assign(varparams, 
                                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                        append_row(get_base1(L_full, s, "L_full", 1), append_row(rep_vector(0, T), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(ls_int, s, "ls_int", 1)).add(get_base1(L_AR1, s, "L_AR1", 1)).add(time_sd).array())))), 
                                                        "assigning variable varparams");
                                        } else {

                                            current_statement_begin__ = 2461;
                                            stan::model::assign(varparams, 
                                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                        append_row(get_base1(L_full, s, "L_full", 1), append_row(rep_vector(0, T), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(L_AR1, s, "L_AR1", 1)).add(time_sd).array())))), 
                                                        "assigning variable varparams");
                                        }
                                    } else {

                                        current_statement_begin__ = 2466;
                                        if (as_bool(logical_gt(num_ls, 0))) {

                                            current_statement_begin__ = 2467;
                                            stan::model::assign(varparams, 
                                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                        append_row(get_base1(L_full, s, "L_full", 1), append_row(to_vector(stan::model::rvalue(L_tp1_var, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::cons_list(stan::model::index_uni((s - 1)), stan::model::nil_index_list())), "L_tp1_var")), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(ls_int, s, "ls_int", 1)).add(get_base1(L_AR1, s, "L_AR1", 1)).add(get_base1(time_var_free, (s - 1), "time_var_free", 1)).array())))), 
                                                        "assigning variable varparams");
                                        } else {

                                            current_statement_begin__ = 2470;
                                            stan::model::assign(varparams, 
                                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                        append_row(get_base1(L_full, s, "L_full", 1), append_row(to_vector(stan::model::rvalue(L_tp1_var, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::cons_list(stan::model::index_uni((s - 1)), stan::model::nil_index_list())), "L_tp1_var")), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(L_AR1, s, "L_AR1", 1)).add(get_base1(time_var_free, (s - 1), "time_var_free", 1)).array())))), 
                                                        "assigning variable varparams");
                                        }
                                    }
                                } else {

                                    current_statement_begin__ = 2478;
                                    if (as_bool(logical_eq(s, 1))) {

                                        current_statement_begin__ = 2479;
                                        if (as_bool(logical_gt(num_ls, 0))) {

                                            current_statement_begin__ = 2480;
                                            stan::model::assign(varparams, 
                                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                        append_row(get_base1(L_full, s, "L_full", 1), append_row(rep_vector(0, T), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(ls_int, s, "ls_int", 1)).add(time_sd).array())))), 
                                                        "assigning variable varparams");
                                        } else {

                                            current_statement_begin__ = 2483;
                                            stan::model::assign(varparams, 
                                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                        append_row(get_base1(L_full, s, "L_full", 1), append_row(rep_vector(0, T), transpose(stan::math::to_row_vector(stan::math::array_builder<double >().add(time_sd).array())))), 
                                                        "assigning variable varparams");
                                        }
                                    } else {

                                        current_statement_begin__ = 2488;
                                        if (as_bool(logical_gt(num_ls, 0))) {

                                            current_statement_begin__ = 2489;
                                            stan::model::assign(varparams, 
                                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                        append_row(get_base1(L_full, s, "L_full", 1), append_row(to_vector(stan::model::rvalue(L_tp1_var, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::cons_list(stan::model::index_uni((s - 1)), stan::model::nil_index_list())), "L_tp1_var")), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(ls_int, s, "ls_int", 1)).add(get_base1(time_var_free, (s - 1), "time_var_free", 1)).array())))), 
                                                        "assigning variable varparams");
                                        } else {

                                            current_statement_begin__ = 2492;
                                            stan::model::assign(varparams, 
                                                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                                        append_row(get_base1(L_full, s, "L_full", 1), append_row(to_vector(stan::model::rvalue(L_tp1_var, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::cons_list(stan::model::index_uni((s - 1)), stan::model::nil_index_list())), "L_tp1_var")), transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(time_var_free, (s - 1), "time_var_free", 1)).array())))), 
                                                        "assigning variable varparams");
                                        }
                                    }
                                }
                            }
                        }
                    }
                    current_statement_begin__ = 2504;
                    stan::model::assign(dparams, 
                                stan::model::cons_list(stan::model::index_min_max(1, (dP - ((sum(n_cats_grm) - 8) * num_bills_grm))), stan::model::nil_index_list()), 
                                append_row(sigma_reg_free, append_row(B_int_free, append_row(sigma_abs_free, append_row(A_int_free, append_row(steps_votes3, append_row(steps_votes4, append_row(steps_votes5, append_row(steps_votes6, append_row(steps_votes7, append_row(steps_votes8, append_row(steps_votes9, append_row(steps_votes10, append_row(legis_x, append_row(sigma_reg_x, append_row(sigma_abs_x, extra_sd))))))))))))))), 
                                "assigning variable dparams");
                } else {

                    current_statement_begin__ = 2522;
                    for (int s = 1; s <= S; ++s) {

                        current_statement_begin__ = 2524;
                        stan::model::assign(varparams, 
                                    stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                    transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(get_base1(sigma_reg_free, s, "sigma_reg_free", 1)).add(get_base1(B_int_free, s, "B_int_free", 1)).add(get_base1(sigma_abs_free, s, "sigma_abs_free", 1)).add(get_base1(A_int_free, s, "A_int_free", 1)).array())), 
                                    "assigning variable varparams");
                    }
                    current_statement_begin__ = 2528;
                    stan::model::assign(dparams, 
                                stan::model::cons_list(stan::model::index_min_max(1, ((dP - ((sum(n_cats_grm) - 8) * num_bills_grm)) - (num_legis * T))), stan::model::nil_index_list()), 
                                append_row(ls_int, append_row(steps_votes3, append_row(steps_votes4, append_row(steps_votes5, append_row(steps_votes6, append_row(steps_votes7, append_row(steps_votes8, append_row(steps_votes9, append_row(steps_votes10, append_row(legis_x, append_row(sigma_reg_x, append_row(sigma_abs_x, extra_sd)))))))))))), 
                                "assigning variable dparams");
                }
                {
                current_statement_begin__ = 2545;
                int skip(0);
                (void) skip;  // dummy to suppress unused var warning
                stan::math::fill(skip, std::numeric_limits<int>::min());


                current_statement_begin__ = 2546;
                if (as_bool(logical_eq(S_type, 1))) {

                    current_statement_begin__ = 2547;
                    stan::math::assign(skip, (dP - ((sum(n_cats_grm) - 8) * num_bills_grm)));
                } else {

                    current_statement_begin__ = 2549;
                    stan::math::assign(skip, ((dP - ((sum(n_cats_grm) - 8) * num_bills_grm)) - (num_legis * T)));
                }
                current_statement_begin__ = 2552;
                if (as_bool(logical_gt((get_base1(n_cats_grm, 1, "n_cats_grm", 1) - 1), 0))) {

                    current_statement_begin__ = 2553;
                    for (int c = 1; c <= 3; ++c) {

                        current_statement_begin__ = 2554;
                        stan::model::assign(dparams, 
                                    stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + num_bills_grm)), stan::model::nil_index_list()), 
                                    stan::model::rvalue(steps_votes_grm3, stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_min_max(1, num_bills_grm), stan::model::nil_index_list())), "steps_votes_grm3"), 
                                    "assigning variable dparams");
                        current_statement_begin__ = 2555;
                        stan::math::assign(skip, (skip + num_bills_grm));
                    }
                }
                current_statement_begin__ = 2559;
                if (as_bool(logical_gt((get_base1(n_cats_grm, 2, "n_cats_grm", 1) - 1), 0))) {

                    current_statement_begin__ = 2560;
                    for (int c = 1; c <= 4; ++c) {

                        current_statement_begin__ = 2561;
                        stan::model::assign(dparams, 
                                    stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + num_bills_grm)), stan::model::nil_index_list()), 
                                    stan::model::rvalue(steps_votes_grm4, stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_min_max(1, num_bills_grm), stan::model::nil_index_list())), "steps_votes_grm4"), 
                                    "assigning variable dparams");
                        current_statement_begin__ = 2562;
                        stan::math::assign(skip, (skip + num_bills_grm));
                    }
                }
                current_statement_begin__ = 2566;
                if (as_bool(logical_gt((get_base1(n_cats_grm, 3, "n_cats_grm", 1) - 1), 0))) {

                    current_statement_begin__ = 2567;
                    for (int c = 1; c <= 5; ++c) {

                        current_statement_begin__ = 2568;
                        stan::model::assign(dparams, 
                                    stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + num_bills_grm)), stan::model::nil_index_list()), 
                                    stan::model::rvalue(steps_votes_grm5, stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_min_max(1, num_bills_grm), stan::model::nil_index_list())), "steps_votes_grm5"), 
                                    "assigning variable dparams");
                        current_statement_begin__ = 2569;
                        stan::math::assign(skip, (skip + num_bills_grm));
                    }
                }
                current_statement_begin__ = 2573;
                if (as_bool(logical_gt((get_base1(n_cats_grm, 4, "n_cats_grm", 1) - 1), 0))) {

                    current_statement_begin__ = 2574;
                    for (int c = 1; c <= 6; ++c) {

                        current_statement_begin__ = 2575;
                        stan::model::assign(dparams, 
                                    stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + num_bills_grm)), stan::model::nil_index_list()), 
                                    stan::model::rvalue(steps_votes_grm6, stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_min_max(1, num_bills_grm), stan::model::nil_index_list())), "steps_votes_grm6"), 
                                    "assigning variable dparams");
                        current_statement_begin__ = 2576;
                        stan::math::assign(skip, (skip + num_bills_grm));
                    }
                }
                current_statement_begin__ = 2580;
                if (as_bool(logical_gt((get_base1(n_cats_grm, 5, "n_cats_grm", 1) - 1), 0))) {

                    current_statement_begin__ = 2581;
                    for (int c = 1; c <= 7; ++c) {

                        current_statement_begin__ = 2582;
                        stan::model::assign(dparams, 
                                    stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + num_bills_grm)), stan::model::nil_index_list()), 
                                    stan::model::rvalue(steps_votes_grm7, stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_min_max(1, num_bills_grm), stan::model::nil_index_list())), "steps_votes_grm7"), 
                                    "assigning variable dparams");
                        current_statement_begin__ = 2583;
                        stan::math::assign(skip, (skip + num_bills_grm));
                    }
                }
                current_statement_begin__ = 2587;
                if (as_bool(logical_gt((get_base1(n_cats_grm, 6, "n_cats_grm", 1) - 1), 0))) {

                    current_statement_begin__ = 2588;
                    for (int c = 1; c <= 8; ++c) {

                        current_statement_begin__ = 2589;
                        stan::model::assign(dparams, 
                                    stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + num_bills_grm)), stan::model::nil_index_list()), 
                                    stan::model::rvalue(steps_votes_grm8, stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_min_max(1, num_bills_grm), stan::model::nil_index_list())), "steps_votes_grm8"), 
                                    "assigning variable dparams");
                        current_statement_begin__ = 2590;
                        stan::math::assign(skip, (skip + num_bills_grm));
                    }
                }
                current_statement_begin__ = 2594;
                if (as_bool(logical_gt((get_base1(n_cats_grm, 7, "n_cats_grm", 1) - 1), 0))) {

                    current_statement_begin__ = 2595;
                    for (int c = 1; c <= 9; ++c) {

                        current_statement_begin__ = 2596;
                        stan::model::assign(dparams, 
                                    stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + num_bills_grm)), stan::model::nil_index_list()), 
                                    stan::model::rvalue(steps_votes_grm9, stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_min_max(1, num_bills_grm), stan::model::nil_index_list())), "steps_votes_grm9"), 
                                    "assigning variable dparams");
                        current_statement_begin__ = 2597;
                        stan::math::assign(skip, (skip + num_bills_grm));
                    }
                }
                current_statement_begin__ = 2601;
                if (as_bool(logical_gt((get_base1(n_cats_grm, 8, "n_cats_grm", 1) - 1), 0))) {

                    current_statement_begin__ = 2602;
                    for (int c = 1; c <= 10; ++c) {

                        current_statement_begin__ = 2603;
                        stan::model::assign(dparams, 
                                    stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + num_bills_grm)), stan::model::nil_index_list()), 
                                    stan::model::rvalue(steps_votes_grm10, stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_min_max(1, num_bills_grm), stan::model::nil_index_list())), "steps_votes_grm10"), 
                                    "assigning variable dparams");
                        current_statement_begin__ = 2604;
                        stan::math::assign(skip, (skip + num_bills_grm));
                    }
                }
                current_statement_begin__ = 2611;
                if (as_bool(logical_eq(S_type, 0))) {

                    current_statement_begin__ = 2612;
                    if (as_bool(logical_gt(T, 1))) {

                        current_statement_begin__ = 2613;
                        for (int l = 1; l <= num_legis; ++l) {

                            current_statement_begin__ = 2614;
                            stan::model::assign(dparams, 
                                        stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + T)), stan::model::nil_index_list()), 
                                        to_vector(stan::model::rvalue(L_tp1, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::cons_list(stan::model::index_uni(l), stan::model::nil_index_list())), "L_tp1")), 
                                        "assigning variable dparams");
                            current_statement_begin__ = 2615;
                            stan::math::assign(skip, (skip + T));
                        }
                    } else {

                        current_statement_begin__ = 2618;
                        stan::model::assign(dparams, 
                                    stan::model::cons_list(stan::model::index_min_max((skip + 1), (skip + num_legis)), stan::model::nil_index_list()), 
                                    L_full, 
                                    "assigning variable dparams");
                    }
                }
                }
            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t L_tp1_j_1_max__ = (logical_gt(T, 1) ? num_legis : 0 );
                size_t L_tp1_k_0_max__ = T;
                for (size_t j_1__ = 0; j_1__ < L_tp1_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < L_tp1_k_0_max__; ++k_0__) {
                        vars__.push_back(L_tp1[k_0__](j_1__));
                    }
                }
                size_t time_var_full_j_1_max__ = num_legis;
                for (size_t j_1__ = 0; j_1__ < time_var_full_j_1_max__; ++j_1__) {
                    vars__.push_back(time_var_full(j_1__));
                }
                size_t time_var_gp_full_j_1_max__ = gp_N;
                for (size_t j_1__ = 0; j_1__ < time_var_gp_full_j_1_max__; ++j_1__) {
                    vars__.push_back(time_var_gp_full(j_1__));
                }
                size_t m_sd_full_j_1_max__ = gp_N;
                for (size_t j_1__ = 0; j_1__ < m_sd_full_j_1_max__; ++j_1__) {
                    vars__.push_back(m_sd_full(j_1__));
                }
                size_t gp_sd_full_j_1_max__ = gp_N;
                for (size_t j_1__ = 0; j_1__ < gp_sd_full_j_1_max__; ++j_1__) {
                    vars__.push_back(gp_sd_full(j_1__));
                }
                size_t varparams_j_1_max__ = vP;
                size_t varparams_k_0_max__ = S;
                for (size_t j_1__ = 0; j_1__ < varparams_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < varparams_k_0_max__; ++k_0__) {
                        vars__.push_back(varparams[k_0__](j_1__));
                    }
                }
                size_t dparams_j_1_max__ = dP;
                for (size_t j_1__ = 0; j_1__ < dparams_j_1_max__; ++j_1__) {
                    vars__.push_back(dparams(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_irt_standard";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t sigma_abs_free_j_1_max__ = num_bills;
        for (size_t j_1__ = 0; j_1__ < sigma_abs_free_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_abs_free" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_full_j_1_max__ = num_legis;
        for (size_t j_1__ = 0; j_1__ < L_full_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_full" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t m_sd_free_j_1_max__ = gp_N_fix;
        for (size_t j_1__ = 0; j_1__ < m_sd_free_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "m_sd_free" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gp_sd_free_j_1_max__ = gp_N_fix;
        for (size_t j_1__ = 0; j_1__ < gp_sd_free_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gp_sd_free" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_tp2_j_1_max__ = num_legis;
        size_t L_tp2_k_0_max__ = gp_nT;
        for (size_t j_1__ = 0; j_1__ < L_tp2_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < L_tp2_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_tp2" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t ls_int_j_1_max__ = num_ls;
        for (size_t j_1__ = 0; j_1__ < ls_int_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ls_int" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_tp1_var_j_1_max__ = (logical_gt(T, 1) ? num_legis : 0 );
        size_t L_tp1_var_k_0_max__ = (T - 1);
        for (size_t j_1__ = 0; j_1__ < L_tp1_var_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < L_tp1_var_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_tp1_var" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_AR1_j_1_max__ = ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_eq(time_proc, 3))) ? num_legis : 0 );
        for (size_t j_1__ = 0; j_1__ < L_AR1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_AR1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_reg_free_j_1_max__ = num_bills;
        for (size_t j_1__ = 0; j_1__ < sigma_reg_free_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_reg_free" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t legis_x_j_1_max__ = LX;
        for (size_t j_1__ = 0; j_1__ < legis_x_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "legis_x" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_reg_x_j_1_max__ = SRX;
        for (size_t j_1__ = 0; j_1__ < sigma_reg_x_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_reg_x" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_abs_x_j_1_max__ = SAX;
        for (size_t j_1__ = 0; j_1__ < sigma_abs_x_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_abs_x" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t B_int_free_j_1_max__ = num_bills;
        for (size_t j_1__ = 0; j_1__ < B_int_free_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B_int_free" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t A_int_free_j_1_max__ = num_bills;
        for (size_t j_1__ = 0; j_1__ < A_int_free_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "A_int_free" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t steps_votes3_j_1_max__ = (get_base1(n_cats_rat, 1, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes3_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "steps_votes3" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t steps_votes4_j_1_max__ = (get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes4_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "steps_votes4" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t steps_votes5_j_1_max__ = (get_base1(n_cats_rat, 3, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes5_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "steps_votes5" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t steps_votes6_j_1_max__ = (get_base1(n_cats_rat, 4, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes6_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "steps_votes6" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t steps_votes7_j_1_max__ = (get_base1(n_cats_rat, 5, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes7_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "steps_votes7" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t steps_votes8_j_1_max__ = (get_base1(n_cats_rat, 6, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes8_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "steps_votes8" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t steps_votes9_j_1_max__ = (get_base1(n_cats_rat, 7, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes9_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "steps_votes9" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t steps_votes10_j_1_max__ = (get_base1(n_cats_rat, 8, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes10_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "steps_votes10" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t steps_votes_grm3_j_1_max__ = (get_base1(n_cats_grm, 1, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm3_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm3_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm3_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "steps_votes_grm3" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t steps_votes_grm4_j_1_max__ = (get_base1(n_cats_grm, 2, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm4_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm4_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm4_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "steps_votes_grm4" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t steps_votes_grm5_j_1_max__ = (get_base1(n_cats_grm, 3, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm5_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm5_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm5_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "steps_votes_grm5" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t steps_votes_grm6_j_1_max__ = (get_base1(n_cats_grm, 4, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm6_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm6_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm6_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "steps_votes_grm6" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t steps_votes_grm7_j_1_max__ = (get_base1(n_cats_grm, 5, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm7_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm7_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm7_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "steps_votes_grm7" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t steps_votes_grm8_j_1_max__ = (get_base1(n_cats_grm, 6, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm8_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm8_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm8_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "steps_votes_grm8" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t steps_votes_grm9_j_1_max__ = (get_base1(n_cats_grm, 7, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm9_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm9_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm9_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "steps_votes_grm9" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t steps_votes_grm10_j_1_max__ = (get_base1(n_cats_grm, 8, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm10_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm10_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm10_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "steps_votes_grm10" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "extra_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t time_var_gp_free_j_1_max__ = gp_N_fix;
        for (size_t j_1__ = 0; j_1__ < time_var_gp_free_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "time_var_gp_free" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t time_var_free_j_1_max__ = ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_neq(time_proc, 4))) ? (num_legis - 1) : 0 );
        for (size_t j_1__ = 0; j_1__ < time_var_free_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "time_var_free" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t L_tp1_j_1_max__ = (logical_gt(T, 1) ? num_legis : 0 );
            size_t L_tp1_k_0_max__ = T;
            for (size_t j_1__ = 0; j_1__ < L_tp1_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < L_tp1_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "L_tp1" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t time_var_full_j_1_max__ = num_legis;
            for (size_t j_1__ = 0; j_1__ < time_var_full_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "time_var_full" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t time_var_gp_full_j_1_max__ = gp_N;
            for (size_t j_1__ = 0; j_1__ < time_var_gp_full_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "time_var_gp_full" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t m_sd_full_j_1_max__ = gp_N;
            for (size_t j_1__ = 0; j_1__ < m_sd_full_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "m_sd_full" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t gp_sd_full_j_1_max__ = gp_N;
            for (size_t j_1__ = 0; j_1__ < gp_sd_full_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gp_sd_full" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t varparams_j_1_max__ = vP;
            size_t varparams_k_0_max__ = S;
            for (size_t j_1__ = 0; j_1__ < varparams_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < varparams_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "varparams" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t dparams_j_1_max__ = dP;
            for (size_t j_1__ = 0; j_1__ < dparams_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dparams" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t sigma_abs_free_j_1_max__ = num_bills;
        for (size_t j_1__ = 0; j_1__ < sigma_abs_free_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_abs_free" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_full_j_1_max__ = num_legis;
        for (size_t j_1__ = 0; j_1__ < L_full_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_full" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t m_sd_free_j_1_max__ = gp_N_fix;
        for (size_t j_1__ = 0; j_1__ < m_sd_free_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "m_sd_free" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gp_sd_free_j_1_max__ = gp_N_fix;
        for (size_t j_1__ = 0; j_1__ < gp_sd_free_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gp_sd_free" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_tp2_j_1_max__ = num_legis;
        size_t L_tp2_k_0_max__ = gp_nT;
        for (size_t j_1__ = 0; j_1__ < L_tp2_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < L_tp2_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_tp2" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t ls_int_j_1_max__ = num_ls;
        for (size_t j_1__ = 0; j_1__ < ls_int_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ls_int" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_tp1_var_j_1_max__ = (logical_gt(T, 1) ? num_legis : 0 );
        size_t L_tp1_var_k_0_max__ = (T - 1);
        for (size_t j_1__ = 0; j_1__ < L_tp1_var_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < L_tp1_var_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_tp1_var" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_AR1_j_1_max__ = ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_eq(time_proc, 3))) ? num_legis : 0 );
        for (size_t j_1__ = 0; j_1__ < L_AR1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_AR1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_reg_free_j_1_max__ = num_bills;
        for (size_t j_1__ = 0; j_1__ < sigma_reg_free_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_reg_free" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t legis_x_j_1_max__ = LX;
        for (size_t j_1__ = 0; j_1__ < legis_x_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "legis_x" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_reg_x_j_1_max__ = SRX;
        for (size_t j_1__ = 0; j_1__ < sigma_reg_x_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_reg_x" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_abs_x_j_1_max__ = SAX;
        for (size_t j_1__ = 0; j_1__ < sigma_abs_x_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_abs_x" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t B_int_free_j_1_max__ = num_bills;
        for (size_t j_1__ = 0; j_1__ < B_int_free_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B_int_free" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t A_int_free_j_1_max__ = num_bills;
        for (size_t j_1__ = 0; j_1__ < A_int_free_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "A_int_free" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t steps_votes3_j_1_max__ = (get_base1(n_cats_rat, 1, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes3_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "steps_votes3" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t steps_votes4_j_1_max__ = (get_base1(n_cats_rat, 2, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes4_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "steps_votes4" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t steps_votes5_j_1_max__ = (get_base1(n_cats_rat, 3, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes5_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "steps_votes5" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t steps_votes6_j_1_max__ = (get_base1(n_cats_rat, 4, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes6_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "steps_votes6" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t steps_votes7_j_1_max__ = (get_base1(n_cats_rat, 5, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes7_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "steps_votes7" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t steps_votes8_j_1_max__ = (get_base1(n_cats_rat, 6, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes8_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "steps_votes8" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t steps_votes9_j_1_max__ = (get_base1(n_cats_rat, 7, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes9_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "steps_votes9" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t steps_votes10_j_1_max__ = (get_base1(n_cats_rat, 8, "n_cats_rat", 1) - 1);
        for (size_t j_1__ = 0; j_1__ < steps_votes10_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "steps_votes10" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t steps_votes_grm3_j_1_max__ = (get_base1(n_cats_grm, 1, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm3_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm3_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm3_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "steps_votes_grm3" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t steps_votes_grm4_j_1_max__ = (get_base1(n_cats_grm, 2, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm4_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm4_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm4_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "steps_votes_grm4" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t steps_votes_grm5_j_1_max__ = (get_base1(n_cats_grm, 3, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm5_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm5_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm5_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "steps_votes_grm5" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t steps_votes_grm6_j_1_max__ = (get_base1(n_cats_grm, 4, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm6_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm6_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm6_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "steps_votes_grm6" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t steps_votes_grm7_j_1_max__ = (get_base1(n_cats_grm, 5, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm7_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm7_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm7_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "steps_votes_grm7" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t steps_votes_grm8_j_1_max__ = (get_base1(n_cats_grm, 6, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm8_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm8_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm8_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "steps_votes_grm8" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t steps_votes_grm9_j_1_max__ = (get_base1(n_cats_grm, 7, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm9_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm9_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm9_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "steps_votes_grm9" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t steps_votes_grm10_j_1_max__ = (get_base1(n_cats_grm, 8, "n_cats_grm", 1) - 1);
        size_t steps_votes_grm10_k_0_max__ = num_bills_grm;
        for (size_t j_1__ = 0; j_1__ < steps_votes_grm10_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < steps_votes_grm10_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "steps_votes_grm10" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "extra_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t time_var_gp_free_j_1_max__ = gp_N_fix;
        for (size_t j_1__ = 0; j_1__ < time_var_gp_free_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "time_var_gp_free" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t time_var_free_j_1_max__ = ((primitive_value(logical_gt(T, 1)) && primitive_value(logical_neq(time_proc, 4))) ? (num_legis - 1) : 0 );
        for (size_t j_1__ = 0; j_1__ < time_var_free_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "time_var_free" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t L_tp1_j_1_max__ = (logical_gt(T, 1) ? num_legis : 0 );
            size_t L_tp1_k_0_max__ = T;
            for (size_t j_1__ = 0; j_1__ < L_tp1_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < L_tp1_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "L_tp1" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t time_var_full_j_1_max__ = num_legis;
            for (size_t j_1__ = 0; j_1__ < time_var_full_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "time_var_full" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t time_var_gp_full_j_1_max__ = gp_N;
            for (size_t j_1__ = 0; j_1__ < time_var_gp_full_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "time_var_gp_full" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t m_sd_full_j_1_max__ = gp_N;
            for (size_t j_1__ = 0; j_1__ < m_sd_full_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "m_sd_full" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t gp_sd_full_j_1_max__ = gp_N;
            for (size_t j_1__ = 0; j_1__ < gp_sd_full_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gp_sd_full" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t varparams_j_1_max__ = vP;
            size_t varparams_k_0_max__ = S;
            for (size_t j_1__ = 0; j_1__ < varparams_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < varparams_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "varparams" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t dparams_j_1_max__ = dP;
            for (size_t j_1__ = 0; j_1__ < dparams_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dparams" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef model_irt_standard_namespace::model_irt_standard stan_model;

STAN_REGISTER_MAP_RECT(1, model_irt_standard_namespace::overT_functor__)

#endif
